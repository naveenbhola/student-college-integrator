import express from 'express';
import path from 'path';

const ejs = require("ejs").__express;

import React from 'react';
import {Route, Router, createMemoryHistory} from 'react-router';

import {StaticRouter, Switch} from 'react-router-dom';
import {renderToString} from 'react-dom/server';
import config from './../../config/config.js';

import renderer from './../utils/renderer';
import mobileRenderer from './../utils/mobileRenderer';
import createStore from './../utils/createStore';

import logger from 'morgan';
import fs from 'fs';

import {fetchInitialData,clearReduxData,getFooterLinks,getGNBLinks} from './../modules/common/actions/commonAction';
import {fetchCourseDetailPageData} from './../modules/listing/course/actions/CourseDetailAction';
import { fetchCategoryPageData } from './../modules/listing/categoryList/actions/CategoryPageAction';
import { fetchCourseHomePageData } from './../modules/listing/courseHomePage/actions/CourseHomePageAction';
import {fetchInstituteDetailPageData} from './../modules/listing/institute/actions/InstituteDetailAction';
import { fetchAllCourseData } from './../modules/listing/instituteChildPages/actions/AllChildPageAction';
import Loadable from 'react-loadable';
import cookieParser from 'cookie-parser';
import session from 'express-session';
import csurf from 'csurf';
import {getHeaders} from './nodeHelper';
import APIConfig from './../../config/apiConfig';
import {getRequest, postRequest} from './../utils/ApiCalls';
import {removeDomainFromUrl} from './../utils/urlUtility';
import {fetchCollegeSRPData} from "../modules/search/actions/SearchAction";

var url = require('url');
var shikshaConfig = config();
var isServerCall = shikshaConfig.API_SERVER_CALL;


var app = express();
app.disable('x-powered-by');

logger.token('device-type', function getDeviceType(req){
	let deviceType = (req['headers'].HTTP_X_MOBILE == "True" ) ? 'mobile' : 'desktop';
	return deviceType;
});

logger.token('remote-addr', function getRemoteAddress(req){
	let ip = req.ip;
	if (ip.substr(0, 7) == "::ffff:") {
  		 return ip.substr(7);
	}
	return ip;
})

logger.token('http_host', function getHttpHost(req){

	return req['headers'].host;
});

logger.token('x-request-id', function getXRequestId(req){
	return req['headers']['x-request-id'];
});

logger.token('x-transaction-id', function getXtransactionId(req){
	return req['headers']['x-transaction-id'];
});

logger.token('realclfdate', function (req, res) {
    	var clfmonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
 	var pad2 = function(num) {
		var str = String(num);
		return (str.length === 1 ? '0' : '') + str;
	};
	var dateTime = new Date();
	var date = dateTime.getDate()	;
	var hour = dateTime.getHours();
	var mins = dateTime.getMinutes();
	var secs = dateTime.getSeconds();
	var year = dateTime.getFullYear();
	var timezoneofset = dateTime.getTimezoneOffset();
	var sign = timezoneofset > 0 ? '-' : '+';
	timezoneofset = parseInt(Math.abs(timezoneofset)/60);
	var month = clfmonth[dateTime.getUTCMonth()];

	return pad2(date) + '/' + month + '/' + year
	+ ':' + pad2(hour) + ':' + pad2(mins) + ':' + pad2(secs)
	+ ' '+sign+pad2(timezoneofset)+'00';
});

var loggerFormat = ':remote-addr [:realclfdate] :http_host :response-time ":method :url" :status :res[content-length] :referrer :user-agent :x-request-id :x-transaction-id :device-type';

var logPath = "/var/log/node/logs/";

app.use(logger(loggerFormat,
	{
	      stream: require('file-stream-rotator').getStream({
	      filename: path.join(logPath, 'access_%DATE%.log'),
	      frequency: 'daily',
	      verbose: false,
	      date_format: 'YYYYMMDD'
	    })
	}
));
app.use(cookieParser());
app.use(session({
    secret: 'mnbvcxxxxzlkjhgfdsapoiuytrewq', // just a long random string
    resave: false,
    saveUninitialized: true
}));
app.use(csurf({ cookie: true }));
app.use('/pwa/public/',express.static(path.resolve('public')));
app.set('view engine', 'ejs');
app.engine('.ejs', ejs);


 app.get('/service-worker([.]{0,1})([a-zA-Z0-9\-\ ]{0,}).js', (req,res) => {
     res.sendFile(path.join(process.cwd(),req.path));
 });

app.get('/manifest.json', (req,res) => {
		res.sendFile(path.join(process.cwd(),'manifest.json'));
});

var logPerformanceUrl = "/LogPerformance/logPerformace";
var serverStartTime = '';

global.isMobileRequest = true;

var applyHooks = function(req, res, next){
	serverStartTime = Date.now();
	require('./../hooks/visitor_trackers').track_visitor(req, res);
	global.isMobileRequest = require('./../hooks/get_mobile_useragent').get_mobile_useragent(req, res);
	require('./../hooks/set_siteview').set_siteview(req, res);
	if(process.env.NODE_ENV=='production' && APIConfig.BOT_DETECTION_ENABLED){
	//	next();
		require('./../hooks/bot_detector').detect(req, res, next);
	}else{
		next();
	}

}

app.use(applyHooks);

var gnbLinksData = function(req, res, next){
	if(global.isMobileRequest){
		next();
	}else{
		const url = APIConfig.GET_GNB_HEADER_LINKS;
		const gnbData = store.dispatch(getGNBLinks(url));
		Promise.resolve(gnbData).then((response) => {
			next();
		});
	}
}

app.use(gnbLinksData);

var footerLinksData = function(req, res, next){
	if(global.isMobileRequest){
		next();
	}else{
		const url = APIConfig.GET_FOOTER_LINKS;
		const footerData = store.dispatch(getFooterLinks(url));
		Promise.resolve(footerData).then((response) => {
			next();
		});
	}
}

app.use(footerLinksData);

const store = createStore();

app.get('/', (req,res) => {
	const url = (isServerCall) ? APIConfig.GET_HOME_LATESTARTICLE_SERVER : APIConfig.GET_LATESTARTICLESANDCOUNTPARAMS;
	var headerConfig= getHeaders(req);
	const HomePageData = store.dispatch(fetchInitialData(url,'homepageData',headerConfig));
	store.dispatch(clearReduxData('except_homepagedata'));
	Promise.resolve(HomePageData).then((data) => {
		res.render(getTemplate(),renderer(req, store,'homePage'));
		let endserverTime = Date.now();
		let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=homepage&teamname=mobile_app';
		if(endserverTime-serverStartTime>500){
			postRequest("https://www.shiksha.com"+logPerformanceUrl, postData).then((response)=>{
				//console.log(response);
			});
		}
	});
});

app.get('/searchLayer', (req,res) => {
    res.render(getTemplate(),renderer(req, store,'searchLayer'));
});

app.get('/desktop-common-components', (req, res) => {
	res.render(getTemplate(), renderer(req, store,'desktopCommonComponents'));
});

app.get('/([a-zA-Z0-9\-\ ]{0,})(*)-chp', (req,res) => {
	let paramsObj = {};
	for(var key in req.query)
	{
		paramsObj[key] = req.query[key];
	}
	paramsObj['url'] = req.path;

	var url  = JSON.stringify(paramsObj);
	var data = Buffer.from(url).toString('base64');
	var headerConfig= getHeaders(req);
	const courseHomePageData = store.dispatch(fetchCourseHomePageData(data,headerConfig,isServerCall));
	Promise.resolve(courseHomePageData).then((data) => {

		if(!store.getState().courseHomePageData || (store.getState().courseHomePageData && store.getState().courseHomePageData.statusCode == 404)){
			send404Page(req,res);
		}else if((store.getState().courseHomePageData && store.getState().courseHomePageData.statusCode ==  301)){
			res.redirect(301, store.getState().courseHomePageData.url);
		}else{
    		res.render('index', mobileRenderer(req, store, 'courseHomePage'));
		}
    }).catch(function(err){
        sendSorryPage(req,res);
    });
});

app.get(['/college/([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))/courses'], (req,res,next) => {
		if(isNaN(req.params.id))
		{
			send404Page(req,res,true);
		}

		let paramsObj = {};
		let firstPage = true;
		paramsObj['instituteId'] = req.params.id;
		var url  = JSON.stringify(paramsObj);
		var data = Buffer.from(url).toString('base64');
		console.log(data);
		var headerConfig= getHeaders(req);
		const allCourseData = store.dispatch(fetchAllCourseData(data, headerConfig, isServerCall));
						store.dispatch(clearReduxData('except_allCoursePageData'));
		Promise.resolve(allCourseData).then((data) => { 
			res.render('index',renderer(req, store,'allCoursePage'));
		/*	if(!store.getState().instituteData || (store.getState().instituteData && store.getState().instituteData.status == 404) || store.getState().instituteData.seoUrl == null || store.getState().instituteData.seoUrl == "")
			{
				send404Page(req,res);
			}
			else if((store.getState().instituteData && store.getState().instituteData.status ==  301))
			{
				res.redirect(301, store.getState().instituteData.seoUrl);
			}
			else if((store.getState().instituteData && store.getState().instituteData.status ==  302))
			{
				res.redirect(302, store.getState().instituteData.seoUrl);	
			}
			else if((store.getState().instituteData && typeof store.getState().instituteData.seoUrl != 'undefined' && store.getState().instituteData.seoUrl != req.path))
			{
				var reqParams = '';
				for(var query in req.query)
				{
					if(query in keyMapping)
					{
						reqParams += '&'+keyMapping[query]+'='+req.query[query];
					}
					else
					{
						reqParams += '&'+query+'='+req.query[query];
					}
				}
				if(reqParams != '')
				{
					reqParams = '?'+reqParams; 
				}
				
				res.redirect(301, store.getState().instituteData.seoUrl+reqParams);	
			}
			else
				res.render('index',renderer(req, store,'institutePage'));
			let endserverTime = Date.now();
			if(endserverTime-serverStartTime>500){
				let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=institutepage&teamname=listings';
				postRequest("https://"+shikshaConfig.SHIKSHA_HOME+logPerformanceUrl, postData).then((response)=>{
	    			//console.log(response);
				});	
			}*/
		}).catch(function(err){
			console.log(err);
			sendSorryPage(req,res);
		});
});


app.get(['/([a-zA-Z0-9\-\ ]{0,})/course/([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))','/([a-zA-Z0-9\-\ ]{0,})/([a-zA-Z0-9\-\ ]{0,})/course/([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))','getListingDetail([a-zA-Z0-9\-\ ]{0,})/course([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))'], (req,res,next) => {
		var reqParams = 'courseId='+req.params.id;
		var keyMapping = {city : 'cityId',locality : 'localityId'};
		if(isNaN(req.params.id))
		{
			send404Page(req,res,true);
		}
		for(var query in req.query)
		{
			if(query in keyMapping)
			{
				reqParams += '&'+keyMapping[query]+'='+req.query[query];
			}
			else
			{
				reqParams += '&'+query+'='+req.query[query];
			}
		}
		var headerConfig= getHeaders(req);
		const courseData = store.dispatch(fetchCourseDetailPageData(reqParams, headerConfig, isServerCall));
						store.dispatch(clearReduxData('except_coursepagedata'));
		Promise.resolve(courseData).then((data) => {
			if(!store.getState().courseData || (store.getState().courseData && store.getState().courseData.statusCode == 404))
			{
				console.log("2222");
				send404Page(req,res);
			}
			else if((store.getState().courseData && store.getState().courseData.statusCode ==  301))
			{
				res.redirect(301, store.getState().courseData.redirectUrl);
			}
			else if((store.getState().courseData && store.getState().courseData.statusCode ==  302))
			{
				res.redirect(302, store.getState().courseData.redirectUrl);
			}
			else if((store.getState().courseData && typeof store.getState().courseData.courseUrl != 'undefined' && store.getState().courseData.courseUrl != req.path))
			{
				var reqParams = '';
				for(var query in req.query)
				{
					if(query in keyMapping)
					{
						reqParams += '&'+keyMapping[query]+'='+req.query[query];
					}
					else
					{
						reqParams += '&'+query+'='+req.query[query];
					}
				}
				if(reqParams != '')
				{
					reqParams = '?'+reqParams;
				}
				res.redirect(301, store.getState().courseData.courseUrl+reqParams);
			}
			else
				res.render(getTemplate(),renderer(req, store,'coursePage'));
			let endserverTime = Date.now();
			if(endserverTime-serverStartTime>500){

				let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=coursepage&teamname=listings';
				postRequest("https://"+shikshaConfig.SHIKSHA_HOME+logPerformanceUrl, postData).then((response)=>{
	    			//console.log(response);
				});
			}
		}).catch(function(err){
			sendSorryPage(req,res);
		});
});

app.get(['/university/([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))','/college/([a-zA-Z0-9\-\ ]{0,})-(:id([0-9]+))'], (req,res,next) => {
	var reqParams = 'instituteId='+req.params.id;
		var keyMapping = {city : 'cityId',locality : 'localityId'};
		if(isNaN(req.params.id)) {
			send404Page(req,res,true);
		}
		for(var query in req.query){
			if(query in keyMapping)
			{
				reqParams += '&'+keyMapping[query]+'='+req.query[query];
			}
			else
			{
				reqParams += '&'+query+'='+req.query[query];
			}
		}
		var headerConfig= getHeaders(req);

		const instituteData = store.dispatch(fetchInstituteDetailPageData(reqParams, headerConfig, isServerCall));
						store.dispatch(clearReduxData('except_institutepagedata'));

		Promise.resolve(instituteData).then((data) => {
			if(!store.getState().instituteData || (store.getState().instituteData && store.getState().instituteData.status == 404) || store.getState().instituteData.seoUrl == null || store.getState().instituteData.seoUrl == "")
			{
				send404Page(req,res);
			}
			else if((store.getState().instituteData && store.getState().instituteData.status ==  301))
			{
				res.redirect(301, store.getState().instituteData.seoUrl);
			}
			else if((store.getState().instituteData && store.getState().instituteData.status ==  302))
			{
				res.redirect(302, store.getState().instituteData.seoUrl);
			}
			else if((store.getState().instituteData && typeof store.getState().instituteData.seoUrl != 'undefined' && store.getState().instituteData.seoUrl != req.path))
			{
				var reqParams = '';
				for(var query in req.query)
				{
					if(query in keyMapping)
					{
						reqParams += '&'+keyMapping[query]+'='+req.query[query];
					}
					else
					{
						reqParams += '&'+query+'='+req.query[query];
					}
				}
				if(reqParams != '')
				{
					reqParams = '?'+reqParams;
				}

				res.redirect(301, store.getState().instituteData.seoUrl+reqParams);
			}
			else
				res.render(getTemplate(),renderer(req, store,'institutePage'));
			let endserverTime = Date.now();
			if(endserverTime-serverStartTime>500){
				let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=institutepage&teamname=listings';
				postRequest("https://"+shikshaConfig.SHIKSHA_HOME+logPerformanceUrl, postData).then((response)=>{
	    			//console.log(response);
				});
			}
		}).catch(function(err){
			console.log(err);
			sendSorryPage(req,res);
		});
});

app.get(['/colleges/(.{0,}*)','/(.{0,}*)/colleges/(.{0,}*)','/colleges(.{0,}*)'], (req,res,next) => {
		var randomNumber = Math.floor(1000 + Math.random() * 9000);
		if(typeof req.cookies.ctpgRandom=='undefined' || req.cookies.ctpgRandom==''){
			res.cookie('ctpgRandom', randomNumber, {domain : shikshaConfig.COOKIE_DOMAIN});
		}
		let paramsObj = {};
		let firstPage = true;
		const locationRegex = /^\/colleges/;
		const  locationPage = locationRegex.test(req.path);
		for(var key in req.query)
		{
			paramsObj[key] = req.query[key];
		}
		paramsObj['url'] = req.path;//"/"+req.params[0]+"/colleges/"+req.params[1];
		if(paramsObj['rf'] !== 'filters')
			paramsObj['fr'] = "true";
		//paramsObj['ctpgRandom']= req.cookies.ctpgRandom;
		let length = req.path.length;
		let lastCharUrl = req.path[length-1];
		if(!isNaN(lastCharUrl) && parseInt(lastCharUrl) > 1){
            firstPage = false;
		}
    	const showPCW = firstPage && !locationPage;
		//const data = Buffer.from(JSON.stringify(paramsObj)).toString('base64');
		const headerConfig= getHeaders(req);
		const categoryData = store.dispatch(fetchCategoryPageData(paramsObj,headerConfig,isServerCall, showPCW));
		store.dispatch(clearReduxData('except_categorypagedata'));
		Promise.resolve(categoryData).then((data) => {
			if(!store.getState().categoryData || (store.getState().categoryData && store.getState().categoryData.requestData && !store.getState().categoryData.requestData.categoryData))
			{
				console.log("33333");
				send404Page(req,res);
			}
			else
			{
				let queryString = '';
				if(require('url').parse(req.url).query!='' && require('url').parse(req.url).query!='null' && require('url').parse(req.url).query!=null) {
                    queryString = "?" + require('url').parse(req.url).query;
                }
                let totalCount = store.getState().categoryData.totalInstituteCount;
                if(totalCount <10 && store.getState().categoryData.fallbackResultCount && store.getState().categoryData.fallbackResultCount > 0){
                    totalCount += store.getState().categoryData.fallbackResultCount;
                }
				let maxPages = Math.ceil(totalCount/20);
				let currentPageNum = store.getState().categoryData.requestData.pageNumber;
	    		let basePageUrl = store.getState().categoryData.requestData.categoryData.url;
				if(currentPageNum > maxPages && maxPages !=0) { //safe check
					res.redirect(301, basePageUrl+queryString);
	    		}else if(store.getState().categoryData && store.getState().categoryData.requestData && !store.getState().categoryData.requestData.categoryData && store.getState().categoryData.requestData.show404)
	    		{
						console.log("44444");
	    			send404Page(req,res);
	    		}
	    		else{
					res.render(getTemplate(),renderer(req, store, 'categoryPage'));
	    		}

	    		let endserverTime = Date.now();
			if(endserverTime-serverStartTime>500){
				let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=categorypage&teamname=listings';
				postRequest("https://"+shikshaConfig.SHIKSHA_HOME+logPerformanceUrl, postData).then((response)=>{
		    			//console.log(response);
				});
			}
			}
		}).catch(function(err){
			sendSorryPage(req,res);
		});
});
app.get('/search(.{0,}*)', (req,res,next) => {
    let paramsObj = {};
    for(var key in req.query)
    {
        paramsObj[key] = req.query[key];
        if(key === 'rf' && paramsObj[key] === 'searchwidget'){
            paramsObj[key] = 'searchWidget';
        }
    }
    //paramsObj['ctpgRandom']= req.cookies.ctpgRandom;
    const data = Buffer.from(JSON.stringify(paramsObj)).toString('base64');
    var headerConfig= getHeaders(req);
    const srpData = store.dispatch(fetchCollegeSRPData(data, headerConfig, isServerCall));
    store.dispatch(clearReduxData('except_categorypagedata'));
    Promise.resolve(srpData).then((data) => {
        if(!store.getState().categoryData || !store.getState().categoryData.requestData)
        {
            send404Page(req,res);
        }
        else
        {
            let queryString = '';
            if(require('url').parse(req.url).query!='' && require('url').parse(req.url).query!='null' && require('url').parse(req.url).query!=null){
                queryString = "?"+require('url').parse(req.url).query;
            }
            let maxPages = Math.ceil(store.getState().categoryData.totalInstituteCount/20);
            let currentPageNum = store.getState().categoryData.requestData.pageNumber;
            //let basePageUrl = store.getState().categoryData.requestData.categoryData.url;

            if(maxPages > 0 && currentPageNum > maxPages) { //safe check
            	let queryParams = require('querystring').parse(require('url').parse(req.url).query);
            	queryParams['pn'] = 1;
            	let queryStr = require('querystring').stringify(queryParams);
                res.redirect(301, '/search?'+queryStr);
            } else{
                res.render(getTemplate(),renderer(req, store, 'collegesrp'));
            }

            /*let endserverTime = Date.now();
            if(endserverTime-serverStartTime>500){
                let postData = 'serverStartTime='+serverStartTime+'&endserverTime='+endserverTime+'&requestedUrl='+req.url+'&module=categorypage';
                postRequest("https://www.shiksha.com"+logPerformanceUrl, postData).then((response)=>{
                    //console.log(response);
                });
            }*/
        }
    }).catch(function(err){
        sendSorryPage(req,res);
    });
});

app.get('*',function(req,res,next){
	//res.render(getTemplate(),renderer(req,store,'404Page'));
	var err = new Error('Not Found');
  	err.status = 404;
  	res.locals.message = err.message;
  	res.locals.error = (process.env.NODE_ENV === 'development') ? err : {};

  // render the error page
  	res.status(err.status || 500);
  	res.render(getTemplate(),renderer(req,store,'404Page',true));
});

function sendSorryPage(req,res){
  res.render(getTemplate(),renderer(req,store,'ErrPage'));
}
// catch 404 and forward to error handler
/*app.use(function(req, res, next) {
	send404Page(next);
});*/

function send404Page(req,res,isInvalid = false)
{
	console.log("req",req);
	var err = new Error('Not Found');
  	err.status = 404;
  	res.locals.message = err.message;
  	res.locals.error = (process.env.NODE_ENV === 'development') ? err : {};
  	
  // render the error page
  	res.status(err.status || 500);
  	res.render(getTemplate(),renderer(req,store,'404Page',isInvalid));
}

function getTemplate(){
	return global.isMobileRequest == true ? 'index' : 'index_desktop';
}

// error handler
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = (process.env.NODE_ENV === 'development') ? err : {};

  // render the error page
  res.status(err.status || 500);
	console.log(err);
  res.render(getTemplate(),renderer(req,store,'ErrPage'));
});

Loadable.preloadAll().then(() => {
    app.listen(3022, () => {
    console.log('Running on http://localhost:3022/');
  });
});
/*<Router history={createMemoryHistory} routes={routes} />
				<WithStylesContext onInsertCss={styles => css.push(styles._getCss())}>
				*/
