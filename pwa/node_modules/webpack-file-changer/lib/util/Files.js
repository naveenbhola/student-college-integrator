"use strict";
var path = require("path");
var fs = require("fs-extra");
/**
 *
 */
var Files = (function () {
    function Files() {
    }
    /**
     *
     * @param file
     * @return {boolean}
     */
    Files.isExist = function (file) {
        return fs.existsSync(file);
    };
    Files.isFile = function (filePath) {
        return fs.lstatSync(filePath).isFile();
    };
    Files.replaceInFile = function (filePath, toReplaces, replacements) {
        var content = fs.readFileSync(filePath, 'utf8');
        var _loop_1 = function (i) {
            var toReplace = toReplaces[i];
            var replacement = replacements[i];
            var replacer = function (match) {
                console.log('Replacing in %s: %s => %s', filePath, match, replacement);
                return replacement;
            };
            if (typeof toReplace === "string") {
                toReplace = new RegExp(toReplace, 'g');
            }
            content = content.replace(toReplace, replacer);
        };
        for (var i = 0; i < toReplaces.length; i++) {
            _loop_1(i);
        }
        fs.writeFileSync(filePath, content);
    };
    return Files;
}());
/**
 * Look ma, it's cp -R.
 * @param {string} src The path to the thing to copy.
 * @param {string} dest The path to the new copy.
 */
Files.copy = function (src, dest) {
    var exists = fs.existsSync(src);
    var stats = exists && fs.statSync(src);
    var isDirectory = exists && stats.isDirectory();
    if (exists && isDirectory) {
        fs.mkdirSync(dest);
        fs.readdirSync(src).forEach(function (childItemName) {
            Files.copy(path.join(src, childItemName), path.join(dest, childItemName));
        });
    }
    else {
        fs.linkSync(src, dest);
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Files;
//# sourceMappingURL=Files.js.map