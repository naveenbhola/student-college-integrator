// eslint-disable-next-line
//importScripts('https://storage.googleapis.com/workbox-cdn/releases/3.1.0/workbox-sw.js');
importScripts('https://storage.googleapis.com/workbox-cdn/releases/3.4.1/workbox-sw.js');
/**
  * Create an instance of WorkboxSW.
  * Setting clientsClaims to true tells our service worker to take
control as
  * soon as it's activated.
  */
// eslint-disable-next-line
//const workboxSW = new Workbox({ clientsClaim: true })

/**
  * DO NOT CREATE OR UPDATE THIS LIST BY HAND!
  *  Workbox will fill this array by files that are chosen by globPatterns.
  */
//workboxSW.precache([])


// Force development builds => will print in browser conosle how workbox will hanlding the network request
//workbox.setConfig({ debug: true });

workbox.skipWaiting();
workbox.clientsClaim();

// Force production builds
workbox.setConfig({ debug: false });

//confguring anf chamging name of chaches generated by workbox
workbox.core.setCacheNameDetails({
  prefix: 'shiksha.com',
  suffix: 'v1',
  precache: 'precache',
  runtime: 'runtime'
});

//precaching necessary files generated in PrecacheManifestFile
workbox.precaching.precacheAndRoute(self.__precacheManifest || []);

//const matcher = ({event}) => event.request.mode === 'navigate';

workbox.routing.registerRoute(
	new RegExp('^.*\/apigateway\/courseapi\/v1\/info\/getCourseData'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'courseData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 10 // Only cache 10 requests.	
      }),
    ]
  })
);

workbox.routing.registerRoute(
  new RegExp('^.*\/apigateway\/instituteapi\/v1\/info\/getInstituteData'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'instituteData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 10 // Only cache 10 requests. 
      }),
    ]
  })
);

workbox.routing.registerRoute(
  new RegExp('^.*\/apigateway\/commonapi\/v1\/info\/getHamburgerData'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'hamburger'
  })
);

workbox.routing.registerRoute(
  new RegExp('^.*\/apigateway\/categorypageapi\/v1\/info\/getCategoryPageTuple'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'categoryData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 20 // Only cache 20 requests. 
      }),
    ]
  })
);


workbox.routing.registerRoute(
  new RegExp('^.*\/searchfacade\/v1\/rp\/getRankingTupleAndFilter'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'RankingPage',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 20 // Only cache 20 requests. 
      }),
    ]
  })
);

workbox.routing.registerRoute(
  new RegExp('^.*\/apigateway\/homepageapi\/v1\/info\/getLatestArticlesAndCountParams'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'latestArticleData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 1 // Only cache 20 requests. 
      }),
    ]
  })
);

/*workbox.routing.registerRoute(
  new RegExp('^.*\/registration\/RegistrationAPIs\/showResponseForm'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'formData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 20 // Only cache 20 requests. 
      }),
    ]
  })
);

workbox.routing.registerRoute(
  new RegExp('^.*\/registration\/RegistrationAPIs\/getFormByClientCourse'),
    workbox.strategies.staleWhileRevalidate({
    cacheName: 'courseFormData',
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 20 // Only cache 20 requests. 
      }),
    ]
  })
);*/

var defaultHandlerAPI = workbox.strategies.networkOnly();
workbox.routing.registerRoute(new RegExp('^.*\/apigateway\/'), function (_ref) {
  var event = _ref.event;
  return defaultHandlerAPI.handle({ event: event }).catch(function () {
  });
});

var defaultHandlerReg = workbox.strategies.networkOnly();
workbox.routing.registerRoute(new RegExp('^.*\/RegistrationAPIs\/'), function (_ref) {
  var event = _ref.event;
  return defaultHandlerReg.handle({ event: event }).catch(function () {
  });
});

/*var defaultHandlerCSS = workbox.strategies.cacheFirst();
workbox.routing.registerRoute(new RegExp("^.*\/pwa\/public\/.*\.css"), function(a) {
    var b = a.event;
    return defaultHandlerCSS.handle({
        event: b
    }).catch(function() {})
});
var defaultHandlerJS = workbox.strategies.cacheFirst();
workbox.routing.registerRoute(new RegExp("^.*\/pwa\/public\/.*\.js"), function(a) {
    var b = a.event;
    return defaultHandlerJS.handle({
        event: b
    }).catch(function() {})
});

var defaultHandlerImg = workbox.strategies.cacheFirst();
workbox.routing.registerRoute(new RegExp('^.*\/pwa\/public\/images\/.*\.*'), function (_ref) {
  var event = _ref.event;
  return defaultHandlerImg.handle({ event: event }).catch(function () {
  });
});*/

//default handler for all routes that those dont have any route handlers
var FALLBACK_PAGE_URL = 'pwa/public/app-shell.html';

var defaultHandler = workbox.strategies.networkOnly();
workbox.routing.registerRoute(new RegExp('/*'), function (_ref) {
  var event = _ref.event;
  return defaultHandler.handle({ event: event }).catch(function () {
    if(_ref.event.request.mode == 'navigate' && _ref.event.request.method == 'GET')
        return caches.match(FALLBACK_PAGE_URL);
  });
});
