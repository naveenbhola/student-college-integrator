<?php

class contentnavbarpostingmodel extends MY_Model{
    private $dbHandle = '';
    private $dbHandleMode = '';
    
    
    public function __construct() {
        parent::__construct('Listing');
    }
    
    // function to be called for getting dbHandle with read/write mode
    private function initiateModel($mode='read'){
        if($this->dbHandle && $this->dbHandleMode == 'write'){
            return ;
        }
        $this->dbHandleMode = $mode;
        if($mode == 'write'){
            $this->dbHandle = $this->getWriteHandle();
        }elseif ($mode == 'read') {
            $this->dbHandle = $this->getReadHandle();
		}
	}

	public function getContentNavbars($data){
		$this->initiateModel('read');
		$this->dbHandle->select('SQL_CALC_FOUND_ROWS navbar_id,title,content_type,updated_on',false);
	    $this->dbHandle->where('status','live');
        $this->dbHandle->from('content_navbar');
        $this->dbHandle->order_by('id','DESC');
        $this->dbHandle->limit($data['dataTableParams']['length'],$data['dataTableParams']['start']);
        $result = $this->dbHandle->get()->result_array();
        $this->dbHandle->select('found_rows() as totalCount');
        $count = $this->dbHandle->get()->result_array();
        return array('rows'=>$result,
                     'totalCount'=>$count[0]['totalCount']);
    }
    
    /**
     * checks if there exists any live content for given content type and id 
     * which has been mapped to a navbar
     */
    public function checkIfContentMappedToNavbar($data)
    {
        $this->initiateModel('read');
        $this->dbHandle->select('count(cnl.id) as rowcount',false);
        $this->dbHandle->from('sa_content sac');
        $this->dbHandle->join('content_navbar_links cnl','sac.content_id=cnl.content_id and sac.status=cnl.status','inner');
	    $this->dbHandle->where('sac.status','live');
	    $this->dbHandle->where('sac.type',$data['contentType']);
        $this->dbHandle->where_in('sac.content_id',$data['contentId']);
        if($data['navbarId']>0){
            $this->dbHandle->where('cnl.navbar_id!=',$data['navbarId'],false);
        }
        $result = $this->dbHandle->get()->result_array();
        //echo $this->dbHandle->last_query();
        return $result[0]["rowcount"];
    }

    /**
     *  create a new navbar id
     */
    private function _getNewAutogeneratedId($type = 'content_navbar') {
        return Modules::run('common/IDGenerator/generateId',$type);
    }
    /**
     * set status for existing navbar records as history
     */
    private function _updateOldNavbarRecordsAsHistory($navbarId, $isTransactionActive = false)
    {
        if($isTransactionActive===false){
            $this->initiateModel('write');
            $this->dbHandle->trans_start();
        }
        if(!is_null($navbarId) && $navbarId>0)
        {
            // content_navbar
            $this->dbHandle->where("navbar_id",$navbarId);
            $this->dbHandle->update('content_navbar',array('status'=>'history'));
            // content_navbar_links
            $this->dbHandle->where("navbar_id",$navbarId);
            $this->dbHandle->update('content_navbar_links',array('status'=>'history'));
        }
        if($isTransactionActive === false){
            //Transaction Complete
            $this->dbHandle->trans_complete();

            //Check Transaction Status
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }

            return "1";
        }
    }
    /**
     * function to add new navbar details & historify old data
     */
    public function submitContentNavbarData($data)
    {
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        // check if a navbar id available (edit case) else create a new navbar id
        if(!is_null($data['navbarId']) && $data['navbarId']>0)
        {
            // update old records to set status as history
            $this->_updateOldNavbarRecordsAsHistory($data['navbarId'],$isTransactionActive);
        }else{
            // create a new navbar id
            $data['navbarId'] = $this->_getNewAutogeneratedId();
            $data['createdOn'] = date('Y-m-d H:i:s');
            $data['createdBy'] = $data['userId'];
        }
        // these will be new every time
        
        // insert into 'content_navbar'
        $tableData = array();
        $tableData['navbar_id'] = $data['navbarId'];
        $tableData['title'] 	= $data['title'];
        $tableData['content_type'] 	= $data['contentType'];
        $tableData['status'] 	= 'live';
        $tableData['created_on'] = $data['createdOn'];
        $tableData['created_by'] = $data['createdBy'];
        $tableData['updated_on'] = date('Y-m-d H:i:s');
        $tableData['updated_by'] = $data['userId'];
        $this->dbHandle->insert('content_navbar', $tableData);
        
        // insert links into 'content_navbar_links'
        $batch = array();
        foreach($data['contentLinksData'] as $key => $navbarLink)
        {
            $tableData = array();
            $tableData['navbar_id']  = $data['navbarId'];
            $tableData['content_id'] = $navbarLink['contentId'];
            $tableData['content_title'] = $navbarLink['contentTitle'];
            $tableData['status']  = 'live';
            $tableData['parent_flag'] = ($key == 0 ? 1 : 0);
            $batch[] = $tableData;
        }
        if(count($batch)>0){
            $this->dbHandle->insert_batch('content_navbar_links', $batch);
        }
        //Transaction Complete
        $this->dbHandle->trans_complete();

        //Check Transaction Status
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        return "1";
    }
    /** 
     * function to get navbar details + link data by nvabar id
     * @param : $navbarId
    */
    public function getNavbarDataById($navbarId)
    {
        if(is_null($navbarId) && !($navbarId>0))
        {
            return array();
        }
        $this->initiateModel('read');
        $this->dbHandle->select('*');
        $this->dbHandle->from('content_navbar');
        $this->dbHandle->where('status','live');
        $this->dbHandle->where('navbar_id',$navbarId);
        $res1 = $this->dbHandle->get()->result_array();

        $this->dbHandle->select('*');
        $this->dbHandle->from('content_navbar_links');
        $this->dbHandle->where('status','live');
        $this->dbHandle->where('navbar_id',$navbarId);
        $res2 = $this->dbHandle->get()->result_array();

        $returnData = array();
        if(count($res1)>0){
            $returnData = array_merge($returnData, $res1[0]);
            $returnData['navbarLinks'] = $res2;
        }
        return $returnData;
    }
    /**
     * deletes navbar from both tables 
     * @param: navbarId
     */
    function deleteContentNavbarData($navbarId)
    {
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        if(!is_null($navbarId) && $navbarId>0)
        {
            // content_navbar
            $this->dbHandle->where("navbar_id",$navbarId);
            $this->dbHandle->update('content_navbar',array('status'=>'deleted'));
            // content_navbar_links
            $this->dbHandle->where("navbar_id",$navbarId);
            $this->dbHandle->update('content_navbar_links',array('status'=>'deleted'));
        }
        //Transaction Complete
        $this->dbHandle->trans_complete();

        //Check Transaction Status
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        return "1";
    }
    /**
     * check if given contentId(s) exist as given content type
     * @param: content type & array of content ids
     * @return: array of contentIds that do exist
     */
    public function checkIfContentExists($contentType="",$contentIds = array())
    {
        if($contentType == "" || count($contentIds) == 0)
        {
            return array();
        }
        $this->initiateModel('read');
        $this->dbHandle->select('distinct content_id',false);
        $this->dbHandle->from('sa_content');
        $this->dbHandle->where('status','live');
        $this->dbHandle->where('type',$contentType);
        $this->dbHandle->where_in('content_id',$contentIds);
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }
    /**
     * function that checks if another navbar exists with same title
     * @param: array containing navbar title [ & navbar id for edit case]
     * @return: rows
     */
    public function checkIfNavbarExists($data)
    {
        if(is_null($data['title']) || $data['title'] == "")
        {
            return array();
        }
        $this->initiateModel('read');
        $this->dbHandle->select('navbar_id',false);
        $this->dbHandle->from('content_navbar');
        $this->dbHandle->where('status','live');
        if($data['navbarId'] > 0)
        {
            $this->dbHandle->where('navbar_id != ',$data['navbarId'],false);
        }
        $this->dbHandle->where('title',$data['title']);
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }
    
}

