<?php

class consultantpostingmodel extends MY_Model{
    private $dbHandle = '';
    private $dbHandleMode = '';
    private $idGeneratorEntity = array('consultant','consultant_location','consultant_student_profile');
    
    // call to parent MY_Model for setting db-configuration for Consultant Database Instances
    public function __construct() {
        parent::__construct('Consultant');
    }
    
    // function to be called for getting dbHandle with read/write mode
    private function initiateModel($mode='read'){
        if($this->dbHandle && $this->dbHandleMode == 'write'){
            return ;
        }
        $this->dbHandleMode = $mode;
        if($mode == 'write'){
            $this->dbHandle = $this->getWriteHandle();
        }elseif ($mode == 'read') {
            $this->dbHandle = $this->getReadHandle();
        }
    }
    
    // function to get Unique IDs for Consultant and StudentProfile
    private function _getNewAutogeneratedId($type) {
	if(!in_array($type, $this->idGeneratorEntity)){
            return -1;
        }
        return Modules::run('common/IDGenerator/generateId',$type);
    }
    
    /*
     *  make sure to acquire dbHandle through initiateModel($mode) with specific read/write mode specified
     * 
     */
    function getConsultantUniversityMappingData($searchType, $paginatorObj, $searchContentName)
	{
		$this->initiateModel("read");
	
		$LimitOffset 	= $paginatorObj->getLimitOffset();
		$LimitRowCount 	= $paginatorObj->getLimitRowCount();    
	
		if(empty($searchType) || $searchType == 'Consultants')
		{
			$searchType = "'Consultants'";
		}elseif($searchType == 'Universities'){
			$searchType = "'Universities'";
		}
		// prepare the like clause
		$likeClause = "";
		if(!empty($searchContentName) && !empty($searchType) && $searchType == "'Universities'")
		{
			$likeClause = "AND uni.`name` LIKE '%".mysql_escape_string($searchContentName)."%'";
			
		}elseif(!empty($searchContentName) && !empty($searchType) && $searchType == "'Consultants'"){
			
			$likeClause = "AND con.`name` LIKE '%".mysql_escape_string($searchContentName)."%'";
		}
		$query = "SELECT SQL_CALC_FOUND_ROWS
		    cum.`consultantId`,cum.`universityId`,cum.`isOfficialRepresentative`
		    ,cum.`modifiedAt`
		    ,cum.`modifiedBy`
		    ,con.`name` as consultantName
		    ,uni.`name` as universityName
		    FROM `consultantUniversityMapping` cum
		    LEFT JOIN consultant con on cum.`consultantId` = con.`consultantId` and con.status = 'live'
		    LEFT JOIN university uni on cum.`universityId` = uni.`university_id` and uni.status='live'
		    WHERE cum.status='live' ".$likeClause." ORDER BY cum.modifiedAt desc LIMIT
		    ".$LimitOffset.",".$LimitRowCount;
		    //echo $query;die;
		    
		$result['data'] = $this->dbHandle->query($query)->result_array();

		// fetch the count of total rows fetched
		$query = "SELECT FOUND_ROWS() as TotalCount";
		$row = $this->dbHandle->query($query)->row_array();
		$result['totalCount'] = $row['TotalCount'];

		// query to fetch the count of rows for each status
		$query = "SELECT count(distinct cum.id) as all_count 
		FROM `consultantUniversityMapping` cum
		LEFT JOIN consultant con on cum.`consultantId` = con.`consultantId` and con.status = 'live'
		LEFT JOIN university uni on cum.`universityId` = uni.`university_id` and uni.status='live'
		WHERE cum.status ='live' ".$likeClause;
	  	$result['dataCount'] = $this->dbHandle->query($query)->row_array();
	        return $result;
	}
    
       /*
       *Function to get ConsultantTableData
       */
    function getConsultantTableData($displayDataStatus ,$paginatorObj,$searchConsName)
    {
	// get the write DB handle
	$this->initiateModel("read");

	//use limits for results from pagination object
	$LimitOffset 		= $paginatorObj->getLimitOffset();
	$LimitRowCount 		= $paginatorObj->getLimitRowCount();
	
	// status array for the data to be fetched if display status is all
	$status = array("draft","live");
	
	if($displayDataStatus == 'draft')
	    $status = array("draft");
	    
	else if($displayDataStatus == 'published')
	    $status = array("live");
	
	// prepare the like clause
	$likeClause = "";
	if(!empty($searchConsName))
	{
	    $likeClause = "AND cn.name LIKE '%".mysql_escape_string($searchConsName)."%'";
	}
	
	// prepare the where clause    
	$whereClause = " cn.status in ('".implode("','",$status)."') ";
		
	// select query for Consultant
	
	$query=" SELECT SQL_CALC_FOUND_ROWS
	         cn.consultantId,
		 (select cn1.name from consultant cn1 where cn1.status in ('live', 'draft') and cn1.consultantId = cn.consultantId order by cn1.status desc limit 1) as name,
		 (select cn1.modifiedAt from consultant cn1 where cn1.status in ('live', 'draft') and cn1.consultantId = cn.consultantId order by cn1.modifiedAt desc limit 1) as modifiedAt,
		 MIN(cn.status) as status ,
		 cll.name as locationName,
		 COUNT(distinct(cl.consultantLocationId)) as totallocations
		 FROM consultant cn
		 LEFT JOIN consultant cn2 
		    ON (cn.consultantId = cn2.consultantId and cn2.status = 'live')
		 LEFT JOIN consultantLocation cl
		    ON (cn2.consultantId=cl.consultantId
			AND cl.status ='live'
			AND cn2.status='live')
		 LEFT JOIN consultantLocationLocality cll ON (cll.id = cl.localityId AND cll.status='live')
	         WHERE ".$whereClause
		.$likeClause."
		 GROUP BY cn.consultantId ORDER BY modifiedAt DESC
		 LIMIT ".$LimitOffset.",".$LimitRowCount;
	    
	// fetch the data
	$result['data'] = $this->dbHandle->query($query)->result_array();

	// fetch the count of total rows fetched for pagination
	$query = "SELECT FOUND_ROWS() as TotalCount";
    	$row = $this->dbHandle->query($query)->row_array();
    	$result['totalCount'] = $row['TotalCount'];
    
	
        // query to fetch the count of rows for each status
	$query = "SELECT
		    sum( case when cn.status = 'live' then 1 else 0 end) as published_count,
		    sum( case when cn.status = 'draft' then 1 else 0 end) as draft_count,
		    count(distinct cn.consultantId) as all_count
		    FROM `consultant` cn WHERE cn.status in ('live','draft')"
		    .$likeClause;
	
	$result['dataCount'] = $this->dbHandle->query($query)->row_array();
	
    	return $result;
    }

    
    function getConsultantList(){	
	$this->db->select('consultantId,name');
	$this->db->where('status','live');
	$this->db->from('`consultant`');
	$result = $this->db->get()->result_array();
	return $result;
	
    }
    
    function getUniversityByCounsltant($consultantId){
	if($consultantId)
	{
	    $this->db->select('distinct(universityId)');
	    $this->db->where('consultantId',$consultantId);
	    $this->db->where('status','live');
	    $this->db->from('`consultantUniversityMapping`');
	    $result = $this->db->get()->result_array();
	    $university = array();
	    foreach($result as $row){
		$university[] = $row['universityId'];
	    }
	}    
	return $university;
    }
    
    public function saveConsultantFormData($consultantFormData) {
    
        // get write handle on DB
        $this->initiateModel('write');
        
        $this->dbHandle->trans_start();
        
        
        if($consultantFormData['consultantActionType'] == ENT_SA_FORM_ADD_CONSULTANT){
            $consultantFormData['consultantId'] = $this->_getNewAutogeneratedId('consultant');
            $consultantFormData['consultantCreatedBy'] = $consultantFormData['consultantModifiedBy'];
            $consultantFormData['consultantCreatedAt'] = $consultantFormData['consultantModifiedAt'] = date('Y-m-d H:i:s');
            //_p($consultantFormData);die;
        }elseif ($consultantFormData['consultantActionType'] == ENT_SA_FORM_EDIT_CONSULTANT) {
            $consultantFormData['consultantModifiedAt'] = date('Y-m-d H:i:s');
            $this->updateConsultantDataOnEdit($consultantFormData, true);
        }else{
            return '-1';
        }
        
        // prepare data for consultant table
        $consultantTableData = array('consultantId'                 => $consultantFormData['consultantId'],
                                        'name'                      => $consultantFormData['consultantName'],
                                        'logo'                      => $consultantFormData['logoArr']['url'],
                                        'description'               => $consultantFormData['consultantDescription'],
                                        'establishmentYear'         => $consultantFormData['consultantEstdYear'],
                                        'facebookLink'              => $consultantFormData['facebookLink'],
                                        'linkedInLink'              => $consultantFormData['linkedinLink'],
                                        'website'                   => $consultantFormData['consultantWebsite'],
                                        'offersPaidServices'        => $consultantFormData['consultantOfferPaidService'][0],
                                        'paidServicesDetails'       => $consultantFormData['consultantServiceDescription'],
                                        'offersTestPrepServices'    => $consultantFormData['consultantOfferTestPrep'][0],
                                        'testPrepServicesDetails'   => $consultantFormData['consutantTestPrepService'],
                                        'ceoName'                   => $consultantFormData['ceoName'],
                                        'ceoQualification'          => $consultantFormData['ceoDescription'],
                                        'employeeCount'             => $consultantFormData['consultantNumberOfEmployees'],
                                        'createdAt'                 => $consultantFormData['consultantCreatedAt'],
                                        'createdBy'                 => $consultantFormData['consultantCreatedBy'],
                                        'modifiedAt'                => $consultantFormData['consultantModifiedAt'],
                                        'modifiedBy'                => $consultantFormData['consultantModifiedBy'],
                                        'status'                    => $consultantFormData['consultantSaveMode']
                                    );
        $consultantUploadedMediaTableData = array();
        foreach($consultantFormData['pictureArr'] as $key=>$mediaData){
            $consultantUploadedMediaTableData[$key] = array('consultantId'  => $consultantFormData['consultantId'],
                                                                'media_id'      => $mediaData['mediaid'],
                                                                'media_type'    => 'photo',
                                                                'name'          => strip_tags($consultantFormData['consultantName']).' picture',
                                                                'url'           => $mediaData['url'],
                                                                'description'   => '',
                                                                'uploadeddate'  => date('Y-m-d'),
                                                                'thumburl'      => $mediaData['thumburl'],
                                                                'status'        => $consultantFormData['consultantSaveMode']
                                                                );
        }
        
        $consultantCMSUserCommentsData = array('userId'     => $consultantFormData['consultantModifiedBy'],
                                                'pageType'  => $consultantFormData['consultantActionType'],
                                                'pageTypeId'=>  '',
                                                'comments'  => $consultantFormData['consultantUserComments']
                                                );
        
        
        // insert into consultant table
        $this->dbHandle->insert('consultant',$consultantTableData);
        
        // get primary key for consultant table :: it will be used for comments table
        $consultantTableId = $this->dbHandle->insert_id();
        
        // insert in consultantUploadedMedia
        foreach ($consultantUploadedMediaTableData as $consultantUploadedMedia){
            $this->dbHandle->insert('consultantUploadedMedia',$consultantUploadedMedia);
        }
        
        // insert in listing_media_table
        foreach ($listingMediaTableData as $listingMedia){
            $this->dbHandle->insert('listing_media_table',$listingMedia); 
        }
        
        $consultantCMSUserCommentsData['pageTypeId'] = $consultantTableId;
        
        // insert into consultantCMSUserComments table
        $this->dbHandle->insert('consultantCMSUserComments',$consultantCMSUserCommentsData);
        
        $this->dbHandle->trans_complete();
        
        if ($this->dbHandle->trans_status() === FALSE) {
		throw new Exception('Transaction Failed');
	  	
	}
	$this->updateConsultantCache($consultantFormData['consultantId']);
    }
    
    public function getConsultantFormData($consultantId) {
        $allowedStatus = array('live','draft');
        $this->initiateModel('read');
        $sql = "select * from consultant where consultantId=".$consultantId." order by id desc limit 1";
        $resultSet['cosultantGeneralInfo'] = $this->dbHandle->query($sql)->row_array();
        if(!in_array($resultSet['cosultantGeneralInfo']['status'], $allowedStatus)){
            return -1;
        }
        //to show user name on top as last modified by...
	$userModel = $this->load->model('user/usermodel');
	
        $userObj = $userModel->getUserById($resultSet['cosultantGeneralInfo']['modifiedBy']);
		$userName = $userObj->getFirstName()." ".$userObj->getLastName();
	
	$resultSet['cosultantGeneralInfo']['modifiedByName'] = $userName;
        
        
        
        $sql = "SELECT media_id,media_type,name,url,thumburl from consultantUploadedMedia ";
        $sql .= " WHERE media_type='photo' AND consultantId=".$consultantId." AND status='".$resultSet['cosultantGeneralInfo']['status']."' ";
        //error_log("ABHINAV@TEST :".$sql);
        $resultSet['consultantPictureData'] = $this->dbHandle->query($sql)->result_array();
        
        //_p($resultSet);
        //die;
        
        return $resultSet;
    }
    
    public function updateConsultantDataOnEdit(&$consultantFormData,$transactionActive) {
        $this->initiateModel('write');
        if(!$transactionActive){
            $this->dbHandle->trans_start();
        }
        $newStatus = 'history';
        if($consultantFormData['consultantSaveMode'] == ENT_SA_PRE_LIVE_STATUS){
            $oldStatus = "'".ENT_SA_PRE_LIVE_STATUS."','draft'";
        }else{
            $oldStatus = "'draft'";
        }
        foreach($consultantFormData['consultantPicturesMediaId'] as $key=>$mediaId){
            if($mediaId>0){
                $picData = array('mediaid'                      => $mediaId,
                                    'url'                       => $consultantFormData['consultantPicturesMediaUrl'][$key],
                                    'thumburl'                  => $consultantFormData['consultantPicturesMediaThumbUrl'][$key]
                                );
                $consultantFormData['pictureArr'][] = $picData;
            }
        }
        
        // update consultant table
        $this->dbHandle->query("update consultant set status='".$newStatus."' where consultantId=".$consultantFormData['consultantId']." and status IN (".$oldStatus.") ");
        
        // update consultantUploadedMedia
        $this->dbHandle->query("update consultantUploadedMedia SET status='".$newStatus."' WHERE consultantId=".$consultantFormData['consultantId']." AND status in (".$oldStatus.") ");
        
        if(!$transactionActive){
            $this->dbHandle->trans_complete();
        
            if ($this->dbHandle->trans_status() === FALSE) {
                    throw new Exception('Transaction Failed');

            }
        }
    }
	
	public function getConsultantSalesPersons(){
		$this->initiateModel('read');
		$this->dbHandle->select("id, name, email");
		$this->dbHandle->where("status","live");
		$result = $this->dbHandle->get("consultantSalesPersons")->result_array();
		return $result;
	}
	
	public function getConsultantMappedUniversities($consultantId){
		$this->initiateModel('read');
		$this->dbHandle->select("universityId");
		$this->dbHandle->where("consultantId",$consultantId);
		$this->dbHandle->where("status","live");
		$result = $this->dbHandle->get("consultantUniversityMapping")->result_array();
		$returnArray = array();
		foreach($result as $row){
			$returnArray[] = $row['universityId'];
		}
		return $returnArray;
	}
	
	public function saveConsultantUniversityMappingFormData($dataArray){
		$this->initiateModel('write');
		$consultantId;
		foreach($dataArray as $data){
		    $consultantId = $data["consultantId"];
		    $disabledCourses = $data['disabledCourses'];
		    unset($data['disabledCourses']);
		    $this->dbHandle->insert('consultantUniversityMapping',$data);
		    if($disabledCourses){
			foreach($disabledCourses as $disabledCourseId){
			    $data = array("consultantId"=>$data["consultantId"],"universityId"=>$data['universityId'],"courseId"=>$disabledCourseId,"status"=>"live");
			    $this->dbHandle->insert('consultantUniversityExcludedCourseMapping',$data);
			}
		    }
		}
		$this->updateConsultantCache($consultantId);
	}
        
        public function saveStudentProfileForm($studentProfileFormData) {
                
                $this->initiateModel('write');
                
                $this->dbHandle->trans_start();
                
                if($studentProfileFormData['studentActionType'] == ENT_SA_FORM_ADD_STUDENT_PROFILE){
                        $studentProfileFormData['profileId'] = $this->_getNewAutogeneratedId('consultant_student_profile');
                        $studentProfileFormData['studentProfileCreatedBy'] = $studentProfileFormData['studentProfileModifiedBy'];
                        $studentProfileFormData['studentProfileCreatedAt'] = $studentProfileFormData['studentProfileModifiedAt'] = date('Y-m-d H:i:s');
                }
		elseif($studentProfileFormData['studentActionType'] == ENT_SA_FORM_EDIT_STUDENT_PROFILE){
			$studentProfileFormData['profileId'] = $studentProfileFormData['studentId'];
			$studentProfileFormData['studentProfileModifiedAt'] = date('Y-m-d H:i:s');
			//Mark old record as history
			$this->studentProfileMarkRecordAsHistory($studentProfileFormData['studentSaveMode'],$studentProfileFormData['profileId'],true);
                }else{
                        return -1;
                }
                
                $consultantStudentProfile                       = array();
                $consultantStudentProfileToCompanyMapping       = array();
                $consultantStudentProfileToDocumentProofMapping = array();
                $consultantStudentProfileToExamMapping          = array();
                $consultantStudentProfileToGraduationMapping    = array();
                $consultantStudentProfileToUniversityMapping    = array();
		$consultantStudentProfileMaxModifiedData        = array();
                
                
                $consultantStudentProfile = array('profileId'                           => $studentProfileFormData['profileId'],
                                                        'consultantId'                  => $studentProfileFormData['consultantId'],
                                                        'admissionDate'                 => date('Y-m-d H:i:s',  strtotime('1-'.$studentProfileFormData['admissionMonth'].'-'.$studentProfileFormData['admissionYear'])),
                                                        'studentName'                   => trim($studentProfileFormData['studentName']),
                                                        'residenceCityId'               => $studentProfileFormData['studentCity'],
                                                        'classXPercentage'              => $studentProfileFormData['marks10'],
                                                        'classXYear'                    => $studentProfileFormData['year10Passing'],
                                                        'classXIIPercentage'            => $studentProfileFormData['marks12'],
                                                        'classXIIYear'                  => $studentProfileFormData['year12Passing'],
                                                        'totalWorkExperienceMonths'     => $studentProfileFormData['workex'],
                                                        'extraCurricularActivities'     => trim($studentProfileFormData['curricularAct']),
                                                        'linkedInLink'                  => trim($studentProfileFormData['linkedLink']),
                                                        'facebookLink'                  => trim($studentProfileFormData['facebookLink']),
                                                        'studentEmail'                  => trim($studentProfileFormData['studentEmail']),
                                                        'studentPhone'                  => trim($studentProfileFormData['phoneNo']),
                                                        'createdAt'                     => $studentProfileFormData['studentProfileCreatedAt'],
                                                        'createdBy'                     => $studentProfileFormData['studentProfileCreatedBy'],
                                                        'modifiedAt'                    => $studentProfileFormData['studentProfileModifiedAt'],
							                            'groupModifiedAt '              => $studentProfileFormData['studentProfileModifiedAt'],
                                                        'modifiedBy'                    => $studentProfileFormData['studentProfileModifiedBy'],
                                                        'status'                        => $studentProfileFormData['studentSaveMode']
                                                );
                
                foreach($studentProfileFormData['companyName'] as $key=>$value){
					if(trim($studentProfileFormData['companyName'][$key]) == '' &&
						$studentProfileFormData['companyDomain'][$key]=='' &&
						$studentProfileFormData['jobStart'][$key]== '' &&
						$studentProfileFormData['jobEnd'][$key]== '')
					{
						continue;
					}
					
                        $data = array('profileId'       => $studentProfileFormData['profileId'],
                                        'companyName'   => trim($studentProfileFormData['companyName'][$key]),
                                        'companyDomain' => $studentProfileFormData['companyDomain'][$key],
                                        'startYear'     => $studentProfileFormData['jobStart'][$key],
                                        'endYear'       => $studentProfileFormData['jobEnd'][$key],
                                        'status'        => $studentProfileFormData['studentSaveMode']
                                        );
                        
                        $consultantStudentProfileToCompanyMapping[$key]    = $data;
                }
                
                foreach($studentProfileFormData['documentProofs'] as $key=>$value){
                        $data = array('profileId'       => $studentProfileFormData['profileId'],
                                        'proofUrl'      => $value['url'],
                                        'status'        => $studentProfileFormData['studentSaveMode']
                            );
                        $consultantStudentProfileToDocumentProofMapping[$key] = $data;
                }
                
                foreach($studentProfileFormData['saExam'] as $key=>$value){
                        $data = array('profileId'       => $studentProfileFormData['profileId'],
                                        'examId'        => $value,
                                        'examScore'     => trim($studentProfileFormData['saExamScore'][$key]),
                                        'status'        => $studentProfileFormData['studentSaveMode']
                                );
                        $consultantStudentProfileToExamMapping[$key]    = $data ;
                }
                
                foreach($studentProfileFormData['graduationUniversity'] as $key=>$value){
                        if(
							trim($value) == '' &&
                            trim($studentProfileFormData['graduationCollege'][$key]) == '' &&
                            $studentProfileFormData['graduationlocation'][$key] == '' &&
                            $studentProfileFormData['graduationGPA'][$key] == '' &&
                            $studentProfileFormData['graduationPercentage'][$key] == '' &&
                            $studentProfileFormData['graduationPassing'][$key] == '' &&
                            trim($studentProfileFormData['graduationDesc'][$key]) == ''
						  )
						{
							continue;
						}
                        $data = array('profileId'               => $studentProfileFormData['profileId'],
                                        'universityName'        => trim($value),
                                        'collegeName'           => trim($studentProfileFormData['graduationCollege'][$key]),
                                        'graduationCityId'      => $studentProfileFormData['graduationlocation'][$key],
                                        'graduationGPA'         => $studentProfileFormData['graduationGPA'][$key],
                                        'graduationPercentage'  => $studentProfileFormData['graduationPercentage'][$key],
                                        'passingYear'           => $studentProfileFormData['graduationPassing'][$key],
                                        'description'           => trim($studentProfileFormData['graduationDesc'][$key]),
                                        'status'                => $studentProfileFormData['studentSaveMode']
                                        );
                                $consultantStudentProfileToGraduationMapping[$key] = $data;
                }
                
                foreach($studentProfileFormData['universityCountry'] as $key=>$value){
                        $data = array('profileId' => $studentProfileFormData['profileId'],
                                        'universityId'  => $studentProfileFormData['universityId'][$key],
                                        'courseName'    => trim($studentProfileFormData['courseName'][$key]),
                                        'desiredCourseId'       => $studentProfileFormData['desiredCourse'][$key],
                                        'courseLevel'           => $studentProfileFormData['courseLevel'][$key],
                                        'subcategory'           => $studentProfileFormData['childCategory'][$key],
                                        'scholarshipRecieved'   => $studentProfileFormData['scholarship'][$key],
                                        'scholarshipDetails'    => $studentProfileFormData['scholarshipDetail'][$key],
                                        'status'                => $studentProfileFormData['studentSaveMode']
                                        );
			
                        $consultantStudentProfileToUniversityMapping[$key] = $data;
			
					//Prepare Data for MaxmodifiedDate
					$modifiedDateData = array(
					 'consultantId'    =>$studentProfileFormData['consultantId'],   
					 'universityId'  => $studentProfileFormData['universityId'][$key]
					);
					$consultantStudentProfileMaxModifiedData[$key] = $modifiedDateData;
			
                }
                //_p($consultantStudentProfile);
                
                //insert in consultantStudentProfile
		
                $this->dbHandle->insert('consultantStudentProfile',$consultantStudentProfile);
                
		if(!empty($consultantStudentProfileToCompanyMapping)){
                $this->dbHandle->insert_batch('consultantStudentProfileToCompanyMapping',$consultantStudentProfileToCompanyMapping);
		}
		if(!empty($consultantStudentProfileToDocumentProofMapping)){
		    $this->dbHandle->insert_batch('consultantStudentProfileToDocumentProofMapping',$consultantStudentProfileToDocumentProofMapping);
		}
		if(!empty($consultantStudentProfileToExamMapping)){
                $this->dbHandle->insert_batch('consultantStudentProfileToExamMapping',$consultantStudentProfileToExamMapping);
		}
		
		if(!empty($consultantStudentProfileToGraduationMapping)){
                $this->dbHandle->insert_batch('consultantStudentProfileToGraduationMapping',$consultantStudentProfileToGraduationMapping);
		}
		if(!empty($consultantStudentProfileToUniversityMapping)){
                $this->dbHandle->insert_batch('consultantStudentProfileToUniversityMapping',$consultantStudentProfileToUniversityMapping);
		}
                
		if(!empty($consultantStudentProfileMaxModifiedData)){
		    $this->updateMaxModifiedDateForstudentProfile($consultantStudentProfileMaxModifiedData,true);
		}
		
                $this->dbHandle->trans_complete();

                if ($this->dbHandle->trans_status() === FALSE) {
                        throw new Exception('Transaction Failed');

                }
		$this->updateConsultantStudentProfileCache($studentProfileFormData['consultantId']);
                return 1;
        }
    
    function studentProfileMarkRecordAsHistory($oldStatus,$profileId,$transFlag=false){
	
	if($transFlag==false){
	    $this->initiateModel('write');
	    $this->dbHandle->trans_start();
	}
	if($oldStatus=='draft'){
	    $statusArray = array("draft");
	}else{
	    $statusArray = array('draft','live');
	}
	
	$data = array(
               'status'=>'history'
            );

	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfile', $data);
	
	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfileToCompanyMapping', $data);
	
	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfileToDocumentProofMapping', $data);
	
	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfileToExamMapping', $data);
	
	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfileToGraduationMapping', $data);
	
	$this->dbHandle->where('profileId', $profileId);
	$this->dbHandle->where_in("status",$statusArray);
	$this->dbHandle->update('consultantStudentProfileToUniversityMapping', $data);
	
	if($transFlag==false){
	    $this->dbHandle->trans_complete();

	    if ($this->dbHandle->trans_status() === FALSE) {
		    throw new Exception('Transaction Failed');

	    }
	}
	
    }
    
    function updateMaxModifiedDateForstudentProfile($modifiedDateData,$transFlag=false){
	
	if($transFlag==false){
	    $this->initiateModel('write');
	    $this->dbHandle->trans_start();
	}
	 $universityId = array();
	 $consultantId = '';
	foreach($modifiedDateData as $data){
	     $universityId[] = $data['universityId'];
	     $consultantId   = $data['consultantId'];
	 }
	    if(!empty($universityId)){
	    $universityId = implode("," ,array_unique($universityId)); 	
	    $query = "UPDATE consultantStudentProfile csp,consultantStudentProfileToUniversityMapping csum,
            consultantUniversityMapping cum
	    SET csp.groupModifiedAt='".date('Y-m-d H:i:s')."'
	    WHERE   csum.universityId=cum.universityId AND csp.consultantId=cum.consultantId
            AND csp.profileId=csum.profileId
            AND csp.status = 'live'  AND cum.status='live' AND csum.status='live'
            AND cum.consultantId='".$consultantId."' AND csum.universityId IN(".$universityId.")";
		$resultData = $this->dbHandle->query($query);
	    }
	    
	if($transFlag==false){
	    $this->dbHandle->trans_complete();

	    if ($this->dbHandle->trans_status() === FALSE) {
		    throw new Exception('Transaction Failed');

	    }
	}
    }
    
    
    
    /*
    * Funtion to get StudentProfile Table Data
    */
    
    function getStudentProfileMappingData($searchType ,$paginatorObj,$searchContentName)
    {
	// get the read DB handle
	$this->initiateModel("read");

	//use limits for results from pagination object
	$LimitOffset 		= $paginatorObj->getLimitOffset();
	$LimitRowCount 		= $paginatorObj->getLimitRowCount();
	
	//if($searchContentName == "Search Consultants" || $searchContentName == "Search Universities" ){   $searchContentName = ""; }
	
	//initiate variable and clauses for change in state
	$flag ='';
	$whereClause = '';
	
	//fetch consultants based on searchcontentname and searchtype 
	
	if(!empty($searchContentName) && $searchType == 'consultants')
	{
	    $flag='consultants';
	    $query = "SELECT c.consultantId as id, c.name
		      FROM consultant c,
		      consultantUniversityMapping cum
		      WHERE c.name LIKE '%".mysql_escape_string($searchContentName)."%'
		      AND c.status = 'live' 
		      AND cum.status = 'live'
		      AND cum.consultantId = c.consultantId";
		      
	    $resultData = $this->dbHandle->query($query)->result_array();
	    
	    $consultantIds="";
	    
	    foreach ($resultData as $value)
	    {
		$consultantIds .= ','.$value['id'];
		$result['consultants'][$value['id']] = $value['name'];
	    }
	    
	    //just to remove the first character from the string which is not an Id because of the above contatenation
	    $consultantIds = substr($consultantIds,1);
	    
	    //check if incase no such consultant is available
	    if(empty($consultantIds))
	    {
		return $result['querydata'] = array();
	    }
	    
	    $whereClause = ' AND cum.consultantId IN('.$consultantIds.')';
	    
	}
	
	//fetch universities based on searchcontentname and searchtype 
	
	elseif(!empty($searchContentName) && $searchType == 'universities')
	{
	    $flag='universities';
	    $query = "SELECT distinct u.university_id as id,
	              u.name
		      FROM university u,
		      consultantUniversityMapping cum
		      WHERE u.name  LIKE '%".mysql_escape_string($searchContentName)."%'
		      AND u.status = 'live' 
		      AND cum.universityId = u.university_id
		      AND cum.status = 'live'";
	    
	    $resultData = $this->dbHandle->query($query)->result_array();
	    
	    $universityIds="";	    
	    
	    foreach ($resultData as $value)
	    {
		$universityIds .= ','.$value['id'];
		$result['universities'][$value['id']] = $value['name'];
	    }
	    
	    $universityIds = substr($universityIds,1);
	    
	    if(empty($universityIds))
	    {
		return $result['querydata'] = array();
	    }
	    
	    $whereClause = ' AND cum.universityId IN ('.$universityIds.')';
	}		    
    
	
	//fetch query for Student Profile Table

	$query ="SELECT SQL_CALC_FOUND_ROWS
             cum.consultantId,
             cum.universityId,
		    b.groupModifiedAt as lastModified,
		    b.liveprofiles
		    FROM
		    consultantUniversityMapping cum
		    LEFT JOIN

		    (SELECT csp.consultantId, csum.universityId, 
		    csp.groupModifiedAt, count( csum.profileId ) as liveprofiles
		    FROM consultantStudentProfile csp, 
		    consultantStudentProfileToUniversityMapping csum
		    WHERE csp.status = 'live' AND csp.profileId = csum.profileId
		    AND csum.status = 'live'
		    GROUP BY csp.consultantId, csum.universityId)  b


		    ON (
			    cum.consultantId = b.consultantId AND cum.universityId = 
			    b.universityId)
			WHERE cum.status ='live' ".$whereClause."

            ORDER BY lastModified DESC
		    LIMIT ".$LimitOffset.",".$LimitRowCount;
	// fetch the data
	$result['querydata'] = $this->dbHandle->query($query)->result_array();
	
        // fetch the count of total rows fetched for pagination 
	$query = "SELECT FOUND_ROWS() as TotalCount";
	$row = $this->dbHandle->query($query)->row_array();
	$result['totalCount'] = $row['TotalCount'];
	
	
	//incase no result is found then in this case totalcount is handled in the view
        if($result['totalCount'] == 0)
	{
            return $result;
        }
	
	

        //creating array of Ids to fetch the respective names for the universities
        $searchUniversityIds=array();
	$searchConsultantIds=array();
	$i=0;
	
	//foreach university/consultant		
	foreach ($result['querydata'] as $value)
	{
	    $searchUniversityIds[$i] = $value['universityId'];
	    $searchConsultantIds[$i] = $value['consultantId'];
	    $i++;		
	}
	    
	$consultantIds = implode("," ,array_unique($searchConsultantIds));
	$universityIds = implode("," ,array_unique($searchUniversityIds));
	    
	if($flag == 'consultants' || $flag=='')
	{
	    $query = "  SELECT
	                uni.university_id,
			uni.name as universityName
			FROM university uni
			WHERE uni.status='live'
			AND uni.university_id IN (".$universityIds.")";
		      
	    $resultSet = $this->dbHandle->query($query)->result_array();
	    foreach($resultSet as $value)
	    {
		$result['universities'][$value['university_id']] = $value['universityName'];
	    }
	    

	}
	if($flag == 'universities' || $flag=='')
	{
	    $flag='consultants';
	    //fetch consultants based on searchcontentname and searchtype 
	    $query = "SELECT
			cn.consultantId,
			cn.name as consultantName
			FROM consultant cn
			WHERE cn.status='live'
			AND cn.consultantId IN (".$consultantIds.")";
		 
	    $resultSet = $this->dbHandle->query($query)->result_array();
	    foreach($resultSet as $value)
	    {
		$result['consultants'][$value['consultantId']] = $value['consultantName'];
	    }
	   
	}
	
	
    	return $result;
    }
    
    /*
     * get consultant location cities
     */
    public function getConsultantLocationCities()
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select('id as cityId, name as cityName');
	$this->db->from('consultantLocationCity');
	$this->db->where('status','live');
	$result = $this->db->get()->result_array();
	return $result;
    }
    /*
     * get consultant location localities by cityids
     */
    public function getConsultantLocalitiesByCity($cityIds = array())
    {
	// get the read DB handle
	$this->initiateModel("read");
	/*$this->db->select('cCity.id as cityId, cCity.name as cityName, cLocality.id as localityId, cLocality.name as localityName');
	$this->db->from('consultantLocationCity cCity');
	$this->db->join('consultantLocationLocality cLocality', 'cLocality.cityId = cCity.id and cLocality.cityId = cCity.id');
	$this->db->where_in('cCity.id',$cityIds);
	$this->db->where('cCity.status','live');
     * 
     */
    $this->dbHandle->select('id as localityId, name as localityName, cityId');
    $this->dbHandle->from('consultantLocationLocality');
    $this->dbHandle->where_in('cityId',$cityIds);
    $this->dbHandle->where(array('status'   => 'live'));
	$result = $this->dbHandle->get()->result_array();
    error_log("locality_sql: ".$this->dbHandle->last_query());
	return $result;
    }
    
    public function getConsultantLocationRegions() {
        $this->initiateModel('read');
        $this->dbHandle->select('id,name as regionName');
        $this->dbHandle->from('consultantRegions');
        $this->dbHandle->where(array('status'   => 'live'));
        return $this->dbHandle->get()->result_array();
    }
    
    /*
     * get consultant location localities by consultantId, location city, locality
     */
    public function getLocationByConsultant($data = array())
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select('consultantId,consultantLocationId,cityId,localityId');
	$this->db->from('consultantLocation');
	$this->db->where('consultantId',$data['consultantId']);
	$this->db->where('cityId',$data['consultantCity']);
	$this->db->where('localityId',$data['consultantLocality']);
	$this->db->where('status','live');
	$result = $this->db->get()->result_array();
	return $result;
    }
    
    public function saveConsultantLocationFormData($consultantLocationFormData) {
    
        // get write handle on DB
        $this->initiateModel('write');
        
        $this->dbHandle->trans_start();
        
        
        if($consultantLocationFormData['consultantLocSaveMode'] == ENT_SA_FORM_ADD_CONSULTANT_LOCATION)
	    {
            $consultantLocationFormData['createdBy'] = $consultantLocationFormData['modifiedBy'];
            $consultantLocationFormData['createdAt'] = $consultantLocationFormData['modifiedAt'] = date('Y-m-d H:i:s');
            //_p($consultantFormData);die;
        }
        else if ($consultantLocationFormData['consultantLocSaveMode'] == ENT_SA_FORM_EDIT_CONSULTANT_LOCATION)
	    {
            $consultantLocationFormData['modifiedAt'] = date('Y-m-d H:i:s');
            $this->updateConsultantLocationDataOnEdit($consultantLocationFormData, true);
        }
        else{
            return '-1';
        }

        for($k = 0;$k<count($consultantLocationFormData['contactName']);$k++)
	   {
  
              if($consultantLocationFormData['consultantLocSaveMode'] == ENT_SA_FORM_ADD_CONSULTANT_LOCATION)
	    {
		$consultantLocationFormData['consultantLocationId'] = $this->_getNewAutogeneratedId('consultant_location');
	    }
	    else{
		$consultantLocationFormData['consultantLocationId'] = $consultantLocationFormData['oldConsultantLocationId'];
	    }
	    // check for existing head office. if not found, put head office as yes for first record
	    $headOffice = 'no';
	    $existingHeadOffice = $this->checkIfHeadOfficeExists($consultantLocationFormData['consultantId']);
	    if($existingHeadOffice>0 && $existingHeadOffice != $consultantLocationFormData['consultantLocationId'])
	    {
		$headOffice = 'no';
	    }
	    else if($k == 0)
	    {
		$headOffice = 'yes';
	    }
	    //else{
		//$headOffice = 'no';
	    //}
	    // prepare data for consultant table
	    $tableData =
		array	(
			    'consultantId'          => $consultantLocationFormData['consultantId'        ],
			    'consultantLocationId'  => $consultantLocationFormData['consultantLocationId'],
			    'contactName'           => $consultantLocationFormData['contactName'         ][$k],
			    'defaultPhone'          => $consultantLocationFormData['defaultPhone'        ][$k][0],
			    'email'                 => $consultantLocationFormData['email'        	 ][$k],
			    'cityId'                => $consultantLocationFormData['cityId'       	 ][$k],
			    'localityId'     	    => $consultantLocationFormData['localityId'          ][$k],
                'regionId'              => $consultantLocationFormData['regionId'][$k],
			    'locationAddress'       => $consultantLocationFormData['locationAddress'     ][$k],
			    'latitude'              => $consultantLocationFormData['latitude'            ][$k],
			    'longitude'             => $consultantLocationFormData['longitude'           ][$k],
			    'defaultBranch'         => $consultantLocationFormData['defaultBranch'       ][$k],
			    'headOffice'            => $headOffice,
			    'contactHours'          => $consultantLocationFormData['contactHours'        ][$k],
			    'createdAt'             => $consultantLocationFormData['createdAt'           ],
			    'createdBy'             => $consultantLocationFormData['createdBy'           ],
			    'modifiedAt'            => $consultantLocationFormData['modifiedAt'          ],
			    'modifiedBy'            => $consultantLocationFormData['modifiedBy'          ],
			    'status'                => 'live'
			);
            /*prepare data for consultant location table*/
		if($consultantLocationFormData['defaultPhone'][$k][1] != '')
		{ $tableData ['phone1'] =  $consultantLocationFormData['defaultPhone'][$k][1]; }
		if($consultantLocationFormData['defaultPhone'][$k][2] != '')                   
		{ $tableData ['phone2'] =  $consultantLocationFormData['defaultPhone'][$k][2]; }
		if($consultantLocationFormData['defaultPhone'][$k][3] != '')                   
		{ $tableData ['phone3'] =  $consultantLocationFormData['defaultPhone'][$k][3]; }
		if($consultantLocationFormData['defaultPhone'][$k][4] != '')                   
		{ $tableData ['phone4'] =  $consultantLocationFormData['defaultPhone'][$k][4]; }
		if($consultantLocationFormData['pincode'][$k] != '' && $consultantLocationFormData['pincode'][$k] != '0')
		{ $tableData ['pincode'] = $consultantLocationFormData['pincode'][$k]; }
		if($consultantLocationFormData['shikshaPRINumber'][$k] != '' && $consultantLocationFormData['shikshaPRINumber'][$k] != '0')
		{ $tableData ['shikshaPRINumber'] = $consultantLocationFormData['shikshaPRINumber'][$k]; }
		if($consultantLocationFormData['displayPRINumber'][$k] != '' && $consultantLocationFormData['displayPRINumber'][$k] != '0')
            { $tableData ['displayPRINumber'] = $consultantLocationFormData['displayPRINumber'][$k]; }
            
	    $this->dbHandle->insert('consultantLocation',$tableData );
	    // get primary key for consultant Location table :: it will be used for comments table
	    $consultantLocationTableId = $this->dbHandle->insert_id();
	    // comments
	    $consultantCMSUserCommentsData = array( 'userId'    => $consultantLocationFormData['modifiedBy'],
						    'pageType'  => $consultantLocationFormData['consultantLocSaveMode'],
						    'pageTypeId'=> $consultantLocationTableId,
						    'comments'  => $consultantLocationFormData['consultantLocationComments']
						    );
	    
	    // insert into consultantCMSUserComments table
	    $this->dbHandle->insert('consultantCMSUserComments',$consultantCMSUserCommentsData);
	   }
       /*For loop ends*/
        $this->dbHandle->trans_complete();
        
        if ($this->dbHandle->trans_status() === FALSE) {
		throw new Exception('Transaction Failed');
	}
	$this->updateConsultantLocationCache($consultantLocationFormData['consultantId']);
	// updation of consultant required due to addition of default branch data
	$this->updateConsultantCache($consultantLocationFormData['consultantId']);
	return true;
    }
    /*
     * to update status of old consultantLocation records as history
     */
    public function updateConsultantLocationDataOnEdit(&$consultantLocationFormData,$transactionActive)
    {
        $this->initiateModel('write');
        if(!$transactionActive){
            $this->dbHandle->trans_start();
        }
        $newStatus = 'history';
        $oldStatus = 'live';
	$sql = "update consultantLocation set status=? where consultantLocationId=? and status = ? ";
        // update consultant Location table
        $this->dbHandle->query($sql,array($newStatus, $consultantLocationFormData['oldConsultantLocationId'], $oldStatus));
	
	// check if we need to change default branch status of previous default branch to no-default, update accordingly
	//var_dump("SSS".$consultantLocationFormData['defaultBranch'][0] ."::".$consultantLocationFormData['oldDefaultBranchStatus']);
	if($consultantLocationFormData['defaultBranch'][0] == 'yes' /*&& $consultantLocationFormData['oldDefaultBranchStatus'] == 'no'*/)
	{
	    $sql = "update consultantLocation set defaultBranch='no' where consultantId=? and regionId IN(?) and defaultBranch = 'yes' and status = 'live' ";
	    $this->dbHandle->query($sql,array($consultantLocationFormData['consultantId'], $consultantLocationFormData['regionId'][0].',0'));
	}
        if(!$transactionActive)
	{
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                    throw new Exception('Transaction Failed');
            }
        }
    }
    /*
     * check if head office already exists for given consultantId
     */
    public function checkIfHeadOfficeExists($consultantId)
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select('consultantLocationId');
	$this->db->from('consultantLocation');
	$this->db->where('consultantId',$consultantId);
	$this->db->where('headOffice','yes');
	$this->db->where('status','live');
	$result = $this->db->get()->result_array();
	if(count($result)>0)
	{
	    return $result[0]['consultantLocationId'];
	}
	else
	{
	    return false;
	}
    }
    
    
    /*
     * check if default branch already selected for given consultantId,consultantCity
     */
    public function checkIfDefaultBranchAlreadyChosen($data)
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select('consultantLocationId');
	$this->db->from('consultantLocation');
	$this->db->where('consultantId',$data['consultantId']);
	$this->db->where('regionId',$data['regionId']);
	$this->db->where('defaultBranch','yes');
    $this->db->where('consultantLocationId !=',$data['excludeConsultantLocationId']);
	$this->db->where('status','live');
	$result = $this->db->get()->result_array();
	//_p($this->db->last_query());
	return $result;
    }
    /*
     * function to get data for location table for a given consultant
     */
    public function getLocationsForConsultant($consultantId = array())
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select("cl.consultantLocationId as consultantLocationId,CONCAT_WS(',',cll.name,clc.city_name) as locationName,cl.contactName as contactPerson,CONCAT_WS(',',cl.defaultPhone,cl.phone1,cl.phone2,cl.phone3,cl.phone4) as phone,cl.shikshaPRINumber as shikshaPRI,cl.headOffice as headOffice ",false);
	$this->db->from('consultantLocation cl');
	$this->db->join('countryCityTable clc','cl.cityId = clc.city_id and clc.enabled=0');
	$this->db->join('consultantLocationLocality cll', 'cl.localityId = cll.id and cl.status = cll.status');
	if(count($consultantId)>0){
	    $this->db->where_in('cl.consultantId',$consultantId);
	}
	$this->db->where('cl.status','live');
	$this->db->group_by('cl.consultantLocationId');
	$this->db->order_by('cl.modifiedAt','desc');
	$this->db->order_by('cl.id','desc');
	$result = $this->db->get()->result_array();
	return $result;
    }
    
    /*
     * function to set a location as head office
     */
    public function setLocationAsHeadOffice($params)
    {
	// get the write DB handle
	$this->initiateModel('write');
        if(!$transactionActive){
            $this->dbHandle->trans_start();
        }
	
	//_p($data);
	//die;

	/*Select old headoffice for this consultant*/
	$query = $this->db->get_where('consultantLocation', array('consultantId' => $params['consultantId'], 'status'=>'live' , 'headOffice'=>'yes'));
	$result =$query->result_array();
//	_p($result);
	
	/*Update old headoffice for this consultant to history*/
	$data = array(
			'status'     => 'history',
		    );

	$this->db->update('consultantLocation', $data, array('consultantId' => $params['consultantId'], 'status'=>'live' , 'headOffice'=>'yes'));
	
	/*Insert old headoffice to simple location*/
	$data = array(
			'consultantLocationId' 	=> $result[0]['consultantLocationId'],
			'consultantId' 		=> $params['consultantId'] ,
			'contactName' 		=> $result[0]['contactName'],
			'defaultPhone' 		=> $result[0]['defaultPhone'] ,
			'shikshaPRINumber' 	=> $result[0]['shikshaPRINumber'],
			'email' 		=> $result[0]['email'] ,
			'cityId' 		=> $result[0]['cityId'] ,
			'localityId' 		=> $result[0]['localityId'],
			'locationAddress' 	=> $result[0]['locationAddress'] ,
			'pincode' 		=> $result[0]['pincode'] ,
			'latitude' 		=> $result[0]['latitude'],
			'longitude' 		=> $result[0]['longitude'] ,
			'defaultBranch' 	=> $result[0]['defaultBranch'] ,
			'headOffice' 		=> 'no',
			'defaultPhone' 		=> $result[0]['defaultPhone'] ,
			'contactHours' 		=> $result[0]['contactHours'] ,
			'phone1' 		=> $result[0]['phone1'],
			'phone2' 		=> $result[0]['phone2'],
			'phone3' 		=> $result[0]['phone3'] ,
			'phone4' 		=> $result[0]['phone4'],
			'createdAt' 		=> $result[0]['createdAt'] ,
			'createdBy' 		=> $result[0]['createdBy'] ,
			'modifiedAt' 		=> date('Y-m-d H:i:s'),
			'modifiedBy' 		=> $params['userId'],
			'status' 		=> 'live' 
		     );
		     
	$this->db->insert('consultantLocation', $data);
	
	/*place comments */
	// get primary key for consultant table :: it will be used for comments table
        $locationTableId = $this->dbHandle->insert_id();
        
	$consultantCMSUserCommentsData = array( 'userId'     =>$params['userId'],
                                                'pageType'   => '',
                                                'pageTypeId' => $locationTableId,
                                                'comments'   => 'headoffice removed'
                                                );
        
        // insert into consultantCMSUserComments table
        $this->dbHandle->insert('consultantCMSUserComments',$consultantCMSUserCommentsData);
	
	/*Select new headoffice */
	$query = $this->db->get_where('consultantLocation', array('consultantLocationId' => $params['consultantLocationId'], 'status'=>'live' ));
	$result =$query->result_array();
	
	/*Update status of new headoffice to history*/
	$data = array(
			'status'     => 'history'
            );

	$this->db->update('consultantLocation', $data, array('consultantLocationId' => $params['consultantLocationId'], 'status'=>'live'));
	
	/*insert the new headoffice to db*/
	
	$data = array(
			'consultantLocationId' 	=> $params['consultantLocationId'],
			'consultantId' 		=> $params['consultantId'] ,
			'contactName' 		=> $result[0]['contactName'],
			'defaultPhone' 		=> $result[0]['defaultPhone'] ,
			'shikshaPRINumber' 	=> $result[0]['shikshaPRINumber'],
			'email' 		=> $result[0]['email'] ,
			'cityId' 		=> $result[0]['cityId'] ,
			'localityId' 		=> $result[0]['localityId'],
			'locationAddress' 	=> $result[0]['locationAddress'] ,
			'pincode' 		=> $result[0]['pincode'] ,
			'latitude' 		=> $result[0]['latitude'],
			'longitude' 		=> $result[0]['longitude'] ,
			'defaultBranch' 	=> $result[0]['defaultBranch'] ,
			'headOffice' 		=> 'yes',
			'defaultPhone' 		=> $result[0]['defaultPhone'] ,
			'contactHours' 		=> $result[0]['contactHours'] ,
			'phone1' 		=> $result[0]['phone1'],
			'phone2' 		=> $result[0]['phone2'],
			'phone3' 		=> $result[0]['phone3'] ,
			'phone4' 		=> $result[0]['phone4'],
			'createdAt' 		=> $result[0]['createdAt'] ,
			'createdBy' 		=> $result[0]['createdBy'] ,
			'modifiedAt' 		=> date('Y-m-d H:i:s'),
			'modifiedBy' 		=> $params['userId'],
			'status' 		=> 'live' 
		     );
		     
	$this->db->insert('consultantLocation', $data);
	
	/*put comments for user*/

        $locationTableId = $this->dbHandle->insert_id();
        
	$consultantCMSUserCommentsData = array( 'userId'     =>$params['userId'],
                                                'pageType'   => '',
                                                'pageTypeId' => $locationTableId,
                                                'comments'   => 'location removed'
                                                );
         // insert into consultantCMSUserComments table
        $this->dbHandle->insert('consultantCMSUserComments',$consultantCMSUserCommentsData);
	
        if(!$transactionActive)
	{
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                    throw new Exception('Transaction Failed');
            }
        }
	$this->updateConsultantLocationCache($params['consultantId']);
	return true;
    }
    /*
     * to get consultant location details for editing
     */
    public function getConsultantLocationDetails($consultantLocationId)
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->db->select('consultantId,consultantLocationId,contactName,CONCAT_WS(",",defaultPhone,phone1,phone2,phone3,phone4) as phones,shikshaPRINumber,displayPRINumber,email,cityId,localityId,locationAddress,pincode,latitude,longitude,defaultBranch,headOffice,contactHours,date_format(modifiedAt,"%d-%m-%Y") as modifiedAt,modifiedBy,createdAt,createdBy',false);
	$this->db->from('consultantLocation');
	$this->db->where_in('consultantLocationId',$consultantLocationId);
	$this->db->where('status','live');
	$result = $this->db->get()->result_array();
	//to show user name on top as last modified by...
	$UserModel = $this->load->model('user/usermodel');
	for($i = 0 ; $i < count($result); $i++){
	    $userName = $UserModel->getUserById($result[$i]['modifiedBy'])->getDisplayName();
	    $result[$i]['modifiedBy'] = $userName;
	}
	//_p($result);
	return $result;
    }
	
    public function getDefaultLocationForConsultant($consultantId,$regionId = ''){
        if(empty($consultantId) || $consultantId==''){
            return array();
        }
        $this->initiateModel('read');
        $this->dbHandle->select('cityId,regionId');
        $this->dbHandle->from('consultantLocation');
        $this->dbHandle->where(array(   'consultantId'  => $consultantId,
                                        'defaultBranch' => 'yes',
                                        'status'        => 'live'
                                    ));
        
        $result = $this->dbHandle->get()->result_array();
        //error_log("ABHINAV@TEST getDefaultLocationForConsultant sql: ".$this->dbHandle->last_query());
        return $result;
    }
    
    public function getPRIRegions($priNumber)
    {
        if(empty($priNumber) || $priNumber == '')
        {
            return array();
        }

        $priNumber = array_unique($priNumber);
        $this->initiateModel('read');
        $this->dbHandle->select('cityId,regionId,consultantId,shikshaPRINumber');
        $this->dbHandle->from('consultantLocation');
        $this->dbHandle->where(array('status' => 'live'
                                    ));
        $this->dbHandle->where_in('shikshaPRINumber',$priNumber);
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }
	
        public function deleteConsultant($consultantId=0,$userId=0) {
                
                if($consultantId <= 0 || $userId <= 0){
                        return -1;
                }
                
                $this->initiateModel('write');
                $this->dbHandle->trans_start();
                $deleteConditionParameters = array('consultantId' => $consultantId);
                
                // delete Consultant Locations data for consultantId
                $this->deleteConsultantLocations($userId,$deleteConditionParameters,TRUE);
                
                // delete ConsultantStudentProfile related data for consultantId
                $this->deleteStudentProfile($userId,$deleteConditionParameters,TRUE);
                
                // delete consultant university mapping data for consultantId
                $this->deleteConsultantUniversityMapping($userId,$deleteConditionParameters,TRUE);
                
                // delete consultant base table data and media data(pictures and logo)
                $this->deleteConsultantAndMediaData($userId,$deleteConditionParameters,TRUE);
                
                
                $this->dbHandle->trans_complete();
                if ($this->dbHandle->trans_status() === FALSE) {
                        throw new Exception('Transaction Failed');
                }
                $this->deleteConsultantCache($consultantId);
                return 1;
        }
        
        public function deleteConsultantAndMediaData($userId,$requiredData=array(),$parentCall=FALSE) {
                if($parentCall == FALSE){
                        $this->initiateModel('write');
                        $this->dbHandle->trans_start();
                }
                if($requiredData['consultantId'] <= 0 || $userId <= 0){
                        return FALSE;
                }
                $oldStatus = "'draft','live'";
                $newStatus = "'deleted'";
                
                $updateSqlConsultant = "UPDATE consultant set status=".$newStatus.",modifiedBy=".$userId.",modifiedAt=NOW() "
                                        ." WHERE status IN(".$oldStatus.") AND consultantId=".mysql_escape_string($requiredData['consultantId']);
                
                $updateSqlConsultantUploadedMedia = "UPDATE consultantUploadedMedia set status=".$newStatus
                                                        ." WHERE status IN(".$oldStatus.") AND consultantId=".mysql_escape_string($requiredData['consultantId']);
                
                $this->dbHandle->query($updateSqlConsultant);
                
                $this->dbHandle->query($updateSqlConsultantUploadedMedia);
                
                if($parentCall == FALSE){
                        $this->dbHandle->trans_complete();
                        if ($this->dbHandle->trans_status() === FALSE) {
                                throw new Exception('Transaction Failed');
                        }
                }
                
                return TRUE;
        }
        
        /*
	 *Function to delete Consultant University Mapping
	 *Parameters : requiredData=array('consultantId' => <?>,'universityId' => <?>) {atleast consultantId or consultantId and universityId combination is mandatory}, TransactionFlag
	 *If only consultant ID is given, it will delete all mappings to that consultant
	 *If both consultant ID and university ID is given, it will delete only that mapping.
	 *If transactionFlag is false, it will create a new transaction for the deletion. Else it assume that we are already
	 *inside another transaction and skip that stage.
	 *Return true if it completes successfully, false if it fails
	 */
	public function deleteConsultantUniversityMapping($userId,$requiredData=array(),$parentCall=FALSE){
		
                if($parentCall == FALSE){
                        $this->initiateModel('write');
                        $this->dbHandle->trans_start();
                }
                
                $whereClause = '';
                if($requiredData['consultantId'] > 0){
                        $whereClause .= " AND consultantId=".mysql_escape_string($requiredData['consultantId']);
                }
                if($requiredData['universityId'] > 0){
                        $whereClause .= " AND universityId=".mysql_escape_string($requiredData['universityId']);
                }
                
                if(empty($whereClause) || $userId<=0){
                        return FALSE;
                }
                
                $oldStatus = "'live'";
                $newStatus = "'deleted'";
                
                $updateSqlConsultantUniversityMapping = "UPDATE consultantUniversityMapping SET status=".$newStatus.",modifiedBy=".$userId.",modifiedAt=NOW() "
                                                        ."WHERE status IN(".$oldStatus.") ".$whereClause;
                
                
                $this->dbHandle->query($updateSqlConsultantUniversityMapping);
		
		$updateDisabledCoursesMappingSql = "update consultantUniversityExcludedCourseMapping set status=".$newStatus." where status in(".$oldStatus.") ".$whereClause;
		$this->dbHandle->query($updateDisabledCoursesMappingSql);
                
                if($parentCall == FALSE){
                        $this->dbHandle->trans_complete();
                        if ($this->dbHandle->trans_status() === FALSE) {
                                throw new Exception('Transaction Failed');
                        }
                }
                $this->updateConsultantCache($requiredData['consultantId']);
                return TRUE;
                
	}


        /*
	 *Function to delete Consultant Locations 
	 *Parameters : array('consultantId' => <?>,'consultantLocationId' => <?>) atleast one of the values required
	 *For a given consultant ID all  the tuples with unqiue combinations of consultantLocationId and ConsultantID generated by the ticketing server should
	 *be deleted
	 *Return true if it completes successfully, false if it fails
	 */
	public function deleteConsultantLocations($userId,$requiredData=array(),$parentCall=FALSE){
		
                if($parentCall == FALSE){
                        $this->initiateModel('write');
                        $this->dbHandle->trans_start();
                        
                }
                
                $whereClause = '';
                if($requiredData['consultantId'] > 0){
                        $whereClause .= " AND consultantId=".mysql_escape_string($requiredData['consultantId']);
                }
                if($requiredData['consultantLocationId'] > 0){
                        $whereClause .= " AND consultantLocationId=".mysql_escape_string($requiredData['consultantLocationId']);
                }
                if(empty($whereClause) || $userId <= 0){
                        return FALSE;
                }
                
                $oldStatus = "'draft','live'";
                $newStatus = "'deleted'";
                
                $updateSqlConsultantLocations = "UPDATE consultantLocation SET status=".$newStatus.",modifiedBy=".$userId.",modifiedAt=NOW() "
                                                ." WHERE status IN(".$oldStatus.") ".$whereClause;
                
                $resultSet = $this->dbHandle->query($updateSqlConsultantLocations);
                
                if($parentCall == FALSE){
                        $this->dbHandle->trans_complete();
                        if ($this->dbHandle->trans_status() === FALSE) {
                                throw new Exception('Transaction Failed');
                        }
                }
                
                return TRUE;
                
	}
	
	public function getStudentProfileDataForConsultant($consultantId){
	    $this->initiateModel("read");
	    if(!empty($consultantId)){
		$this->db->select('distinct(csp.profileId),csp.studentName,cspum.courseName,cspum.universityId,csp.status,csp.modifiedAt');
		$this->db->from('consultantStudentProfile csp');
		$this->db->join('consultantStudentProfileToUniversityMapping cspum', 'csp.profileId = cspum.profileId and csp.status=cspum.status');
		$this->db->where('csp.consultantId',$consultantId);
		$this->db->where('csp.id = (select max(id) from consultantStudentProfile where profileId=csp.profileId)');
		$this->db->where_in('csp.status',array('live','draft'));
		$this->db->order_by('csp.modifiedAt','desc');
		$result = $this->db->get()->result_array();
    		return $result;
	    }
	}
	
	public function getStudentProfileDetails($profileId){
	    $this->initiateModel("read");
	    $result = array();
	    if(!empty($profileId)){
		$this->db->select('csp.*');
		$this->db->from('consultantStudentProfile csp');
		$this->db->where('csp.profileId',$profileId);
		$this->db->where_in('csp.status',array('live','draft'));
		$this->db->order_by('csp.modifiedAt','desc');
		$this->db->limit(1);
		$result = $this->db->get()->result_array();
		if(!empty($result)){
		    $result = reset($result);
		    $result['admissionYear'] = date('Y',strtotime($result['admissionDate']));
		    $result['admissionMonth'] = date('m',strtotime($result['admissionDate']));
		}
	    }
		//$consultantStudentProfileMaxModifiedData        = array();
	    if(!empty($result)){
		
		$userModel = $this->load->model('user/usermodel');
		$userobj = $userModel->getUserById($result['modifiedBy']);
		$userName =  $userobj->getFirstName()." ".$userobj->getLastName();
		$result['modifiedByName'] = $userName;
		
		$this->db->select('cspum.*,cbt.parentId as parentCategoryId');
		$this->db->from('consultantStudentProfileToUniversityMapping cspum');
		$this->db->join("categoryBoardTable cbt","cbt.boardId = cspum.subcategory","left");
		$this->db->where('cspum.profileId',$profileId);
		$this->db->where('cspum.status',$result['status']);
		$this->db->order_by('cspum.id','ASC');
		$result['universityMappingResult'] = $this->db->get()->result_array();
		
		$this->db->select('cspem.*');
		$this->db->from('consultantStudentProfileToExamMapping cspem');
		$this->db->where('cspem.profileId',$profileId);
		$this->db->where('cspem.status',$result['status']);
		$this->db->order_by('cspem.id','ASC');
		$result['examMappingResult'] = $this->db->get()->result_array();
		
		$this->db->select('cspgm.*');
		$this->db->from('consultantStudentProfileToGraduationMapping cspgm');
		$this->db->where('cspgm.profileId',$profileId);
		$this->db->where('cspgm.status',$result['status']);
		$this->db->order_by('cspgm.id','ASC');
		$result['graduationMappingResult'] = $this->db->get()->result_array();
		
		$this->db->select('cspcm.*');
		$this->db->from('consultantStudentProfileToCompanyMapping cspcm');
		$this->db->where('cspcm.profileId',$profileId);
		$this->db->where('cspcm.status',$result['status']);
		$this->db->order_by('cspcm.id','ASC');
		$result['companyMappingResult'] = $this->db->get()->result_array();
		
		$this->db->select('cspdpm.*');
		$this->db->from('consultantStudentProfileToDocumentProofMapping cspdpm');
		$this->db->where('cspdpm.profileId',$profileId);
		$this->db->where('cspdpm.status',$result['status']);
		$this->db->order_by('cspdpm.id','ASC');
		$result['documentMappingResult'] = $this->db->get()->result_array();
	    }
	    
	    return $result;
	}
	/*
	 *Function to get the data for the edit table in consultant-university-mapping-form
	 */
	public function getUniversityMappingDataForConsultant($consultantId){
		$this->initiateModel("read");
		$this->dbHandle->select("cum.isOfficialRepresentative");
		$this->dbHandle->select("DATE_FORMAT(cum.representativeValidTo,'%d %b %Y') as representativeValidTo",false);
		$this->dbHandle->select("cum.proofType");
		$this->dbHandle->select("c.name as ConsultantName");
		$this->dbHandle->select("u.name as UniversityName");
		$this->dbHandle->select("cum.universityId");
		$this->dbHandle->from("consultantUniversityMapping cum");
		$this->dbHandle->join("consultant c","cum.consultantId = c.consultantId and c.status = 'live'","inner");
		$this->dbHandle->join("university u","u.university_id = cum.universityId and u.status = 'live'","inner");
		$this->dbHandle->where("cum.status","live");
		$this->dbHandle->where("cum.consultantId",$consultantId);
		$this->dbHandle->order_by("cum.modifiedAt desc");
		$result = $this->dbHandle->get()->result_array();
		//_p($this->dbHandle->last_query());
		//_p($result);die;
		return $result;
	}
	
	public function getDataForConsultantUniversityMapping($consultantId,$universityId){
		$this->initiateModel('read');
		$sql = "select ct.name as countryName, u.name as UniversityName, ct.countryId, u.university_id, 
				cum.*
				from consultantUniversityMapping cum
				inner join university u on cum.universityId = u.university_id and u.status = 'live'
				inner join university_location_table ult on ult.university_id = u.university_id and ult.status='live'
				inner join countryTable ct on ct.countryId = ult.country_id
				where cum.status='live' and cum.consultantId = ? and cum.universityId = ?";
		return $this->dbHandle->query($sql,array($consultantId,$universityId))->result_array();
	}
	
	public function updateConsultantUniversityMappingFormData($dataArray,$mappingId){
		$this->initiateModel('write');
		$sql = "update consultantUniversityMapping set status='history' where id=?";
		$this->dbHandle->query($sql,array($mappingId));
		foreach($dataArray as $mappingRow){
		    $consultantId = $mappingRow['consultantId'];
		    $univId = $mappingRow['universityId'];
		    $sql = "update consultantUniversityExcludedCourseMapping set status='history' where consultantId = ? and universityId =? and status='live'";
		    $this->dbHandle->query($sql,array($consultantId,$univId));
		}
		
		
		$this->saveConsultantUniversityMappingFormData($dataArray);
	}
	
	public function getLastEditorForUniversityConsultantMapping($consultantId,$universityId){
		$this->initiateModel('read');
		$sql = "select concat(tu.firstname,' ',tu.lastname) as modifiedBy, DATE_FORMAT(cum.modifiedAt,'%d-%b-%Y') as modifiedAt from consultantUniversityMapping cum, tuser tu where cum.modifiedBy = tu.userid and consultantId = ? and universityId = ? and status='live'";
		return $this->dbHandle->query($sql,array($consultantId,$universityId))->result_array();
	}
	
	
	//API model call to get consultant Data required for various checks during the deletion flow
	public function getCompleteConsultantDataForDeletion($consultantId){
		
		$this->initiateModel('read');
		
		$this->dbHandle->select("universityId");
		$this->dbHandle->select("regionId");
		$this->dbHandle->where("endDate >= now()");
		$this->dbHandle->where("status","live");
		$this->dbHandle->where("consultantId",$consultantId);
		$subscriptionResult = $this->dbHandle->get("consultantRegionSubscription")->result_array();
		
		$this->dbHandle->select("count(distinct(csp.id)) as pCount");
		$this->dbHandle->select("csptum.universityId as universityId");
		$this->dbHandle->join("consultantStudentProfileToUniversityMapping csptum","csptum.profileId = csp.profileId and csptum.status=csp.status","inner");
		$this->dbHandle->where("csp.consultantId",$consultantId);
		$this->dbHandle->where_in("csp.status",array("live"));
		$this->dbHandle->group_by("csptum.universityId");
		$profileCountResult = $this->dbHandle->get("consultantStudentProfile csp")->result_array();
		
		$this->dbHandle->select("consultantLocationId");
		$this->dbHandle->select("cityId");
		$this->dbHandle->select("localityId");
		$this->dbHandle->select("defaultBranch");
		$this->dbHandle->select("headOffice");
		$this->dbHandle->where("status","live");
		$this->dbHandle->where("consultantId",$consultantId);
		$locationResult = $this->dbHandle->get("consultantLocation")->result_array();
		
		return array("subscriptionResult"=>$subscriptionResult, "profileCountResult"=>$profileCountResult,"locationResult"=>$locationResult);
	}
        
        /*
         * requiredData = array('consultantId' => <?>,'studentProfileId' => <?>,'universityId' => <?>) atleast consultantId or combination of
         * profileId and universityId must be provided
         */
        public function deleteStudentProfile($userId,$requiredData=array(),$parentCall=FALSE) {
                
                $whereClause = '';
                $updateGroupModifiedAtSql = '';
                if($requiredData['studentProfileId'] > 0){
                        $whereClause .= " AND csp.profileId=".mysql_escape_string($requiredData['studentProfileId']);
                }
                if($requiredData['consultantId'] > 0){
                        $whereClause .= " AND csp.consultantId=".mysql_escape_string($requiredData['consultantId']);
                }
                if(empty($whereClause) || $userId <= 0){
                        return FALSE;
                }
                if($parentCall == FALSE){
                        $this->initiateModel('write');
                        $this->dbHandle->trans_start();
                }
                
                $oldStatus = "'draft','live'";
                $newStatus = "'deleted'";
                
                if($requiredData['studentProfileId'] == '' || !(isset($requiredData['studentProfileId']))){
                        $getStudentProfiles = "select distinct(profileId) from consultantStudentProfile where status IN(".$oldStatus.") AND consultantId=".mysql_escape_string($requiredData['consultantId']);
                        $resultSet = $this->dbHandle->query($getStudentProfiles)->result_array();
                        foreach ($resultSet as $value){
                                $requiredData['studentProfileId'] .= ','.$value['profileId'];
                        }
                        $requiredData['studentProfileId'] = substr($requiredData['studentProfileId'], 1);
                }
                
                if($requiredData['studentProfileId'] == ''){ // We need atleast student profiles IDs to delete otherwise no deletion flow
                        return FALSE;
                }
                
                $this->dbHandle->query("UPDATE consultantStudentProfile SET modifiedBy=".$userId.",modifiedAt=NOW(),groupModifiedAt=NOW(),status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
                $this->dbHandle->query("UPDATE consultantStudentProfileToCompanyMapping SET status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
                $this->dbHandle->query("UPDATE consultantStudentProfileToDocumentProofMapping SET status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
                $this->dbHandle->query("UPDATE consultantStudentProfileToExamMapping SET status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
                $this->dbHandle->query("UPDATE consultantStudentProfileToGraduationMapping SET status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
                $this->dbHandle->query("UPDATE consultantStudentProfileToUniversityMapping SET status=".$newStatus." WHERE profileId IN(".$requiredData['studentProfileId'].") AND status IN(".$oldStatus.") ");
                
               /* $updateStudentProfile = "UPDATE consultantStudentProfile csp JOIN consultantStudentProfileToCompanyMapping cspcm ON(csp.profileId=cspcm.profileId AND cspcm.status=csp.status) "
                                        ." LEFT JOIN consultantStudentProfileToDocumentProofMapping cspdm ON(csp.profileId=cspdm.profileId AND csp.status=cspdm.status) LEFT JOIN consultantStudentProfileToExamMapping cspem ON(csp.profileId=cspem.profileId AND csp.status=cspem.status) "
                                        ." LEFT JOIN consultantStudentProfileToGraduationMapping cspgm ON(csp.profileId=cspgm.profileId AND csp.status=cspgm.status) LEFT JOIN consultantStudentProfileToUniversityMapping cspum ON(csp.profileId=cspum.profileId AND csp.status=cspum.status) "
                                        ." SET csp.modifiedBy=".$userId.",csp.modifiedAt=NOW(),csp.groupModifiedAt=NOW(),csp.status=".$newStatus.",cspcm.status=".$newStatus.",cspdm.status=".$newStatus.",cspem.status=".$newStatus.","
                                        ." cspgm.status=".$newStatus.",cspum.status=".$newStatus
                                        ." WHERE csp.status IN(".$oldStatus.") "
                                        .$whereClause;
                                error_log("delete_query : ".$updateStudentProfile);
                
                $this->dbHandle->query($updateStudentProfile);
                */
                if($requiredData['universityId'] > 0){
                        $data = array('consultantId'    => mysql_escape_string($requiredData['consultantId']),
                                        'universityId'  => mysql_escape_string($requiredData['universityId']));
                        
                        $this->updateMaxModifiedDateForstudentProfile(array($data), false);
                }
                if($parentCall == FALSE){
                        $this->dbHandle->trans_complete();
                        if ($this->dbHandle->trans_status() === FALSE) {
                                throw new Exception('Transaction Failed');
                        }
                }
		if($requiredData['consultantId'] > 0){
		    $this->updateConsultantStudentProfileCache($requiredData['consultantId']);
		}
                return true;
                
        }

        
        public function getLocationTableData($searchLocality,$paginatorObj) {
                $this->initiateModel('read');
                
                //use limits for results from pagination object
                $limitOffset 		= $paginatorObj->getLimitOffset();
                $limitRowCount 		= $paginatorObj->getLimitRowCount();
                
                $this->dbHandle->select('SQL_CALC_FOUND_ROWS cll.id,cll.name as locality,clc.city_name as city,cll.modifiedAt',FALSE);
                $this->dbHandle->from('consultantLocationLocality cll');
                $this->dbHandle->from('countryCityTable clc');
                
                if(!empty($searchLocality)){
                        $this->dbHandle->like('cll.name',$searchLocality);
                }
                
                $this->dbHandle->where('cll.cityId=clc.city_id','',FALSE);
                $this->dbHandle->where(array('cll.status'       =>      'live',
                                                'clc.enabled'    =>      0
                                                ));
                
                $this->dbHandle->limit($limitRowCount,$limitOffset);
                $this->dbHandle->order_by('cll.modifiedAt','desc');
                $result['data']         = $this->dbHandle->get()->result_array();
                $result['totalCount']   = $this->dbHandle->query('SELECT FOUND_ROWS() as totalCount')->row_array();
                return $result;
        }
        
        public function getLocalityCityData($localityArray,$cityArray) {
            if( empty($localityArray) || empty($cityArray)){
                return array();
            }
            $this->initiateModel('read');
            $this->dbHandle->select('name,cityId');
            $this->dbHandle->from('consultantLocationLocality');
            $this->dbHandle->where_in('name'    ,$localityArray);
            $this->dbHandle->where_in('cityId'  ,$cityArray);
            $result = $this->dbHandle->get()->result_array();
            //echo 'last_query: '.$this->dbHandle->last_query();
            return $result;
        }
        
        public function saveLocalityFormData($localityFormData) {
            
            if($localityFormData['modifiedBy'] == '' || count($localityFormData['cityIds']) == 0){
                return -1;
            }
            
            $this->initiateModel('write');
            
            if($localityFormData['localityActiontype'] == ENT_SA_FORM_ADD_LOCALITY){
                $localityFormData['createdBy'] = $localityFormData['modifiedBy'];
                $localityFormData['createdAt'] = $localityFormData['modifiedAt'] = date('Y-m-d H:i:s');
                $tableData = array();
                foreach($localityFormData['cityIds'] as $key=>$value){
                    $data = array('name'      => $localityFormData['localityNames'][$key],
                                        'cityId'    => $value,
                                        'createdBy' => $localityFormData['createdBy'],
                                        'createdAt' => $localityFormData['createdAt'],
                                        'modifiedBy'=> $localityFormData['modifiedBy'],
                                        'modifiedAt'=> $localityFormData['modifiedAt'],
                                        'status'    => 'live'
                                    );
                    $tableData[$key] = $data;
                }
                
                $this->dbHandle->insert_batch('consultantLocationLocality',$tableData);
                //error_log('ABHINAV@TEST:: '.$this->dbHandle->last_query());
                
            }elseif($localityFormData['localityActiontype'] == ENT_SA_FORM_EDIT_LOCALITY){
                $localityFormData['modifiedAt'] = date('Y-m-d H:i:s');
               
                $updateQuery = "UPDATE consultantLocationLocality SET name='".mysql_escape_string($localityFormData['localityNames'][0])."',modifiedBy=".$localityFormData['modifiedBy'].",modifiedAt='".$localityFormData['modifiedAt']."' ";
                $updateQuery .= " WHERE id=".$localityFormData['localityId']." AND cityId=".$localityFormData['cityIds'][0]." AND status='live' ";
                $this->dbHandle->query($updateQuery);
                //error_log('ABHINAV@TEST:: '.$this->dbHandle->last_query());
            }
            
            return 1;
        }
        
        public function getLocalityData($localityId) {
            if(empty($localityId)){
                return array();
            }
            $this->initiateModel('read');
            $this->dbHandle->where(array('id' => $localityId,
                                            'status'    => 'live')
                                    );
            $result = $this->dbHandle->get('consultantLocationLocality')->result_array();
            
            //to show user name on top as last modified by...
            $userModel = $this->load->model('user/usermodel');

            $userObj = $userModel->getUserById($result[0]['modifiedBy']);
			$userName = $userObj->getFirstName()." ".$userObj->getLastName();
            $result[0]['modifiedByName'] = $userName;
            
            return $result;
        }

    /*
     * to save city subscription data in db
     */
    public function saveCitySubscriptionFormData($citySubscriptionData)
    {
	// get write handle on DB
	$this->initiateModel('write');
	$this->dbHandle->trans_start();
	
	if($citySubscriptionData['cityAssignmentSaveMode'] == ENT_SA_FORM_ASSIGN_REGION)
	{
	    $citySubscriptionData['createdBy'] = $citySubscriptionData['modifiedBy'];
	    $citySubscriptionData['createdAt'] = $citySubscriptionData['modifiedAt'] = date('Y-m-d H:i:s');
	    //_p($consultantFormData);die;
	}
	else if ($citySubscriptionData['cityAssignmentSaveMode'] == ENT_SA_FORM_EDIT_ASSIGNED_REGION)
	{
	    $citySubscriptionData['modifiedAt'] = date('Y-m-d H:i:s');
	    $this->updateCitySubscriptionDataOnEdit($citySubscriptionData, true);
	}else{
	    return '-1';
	}
	for($k = 0;$k<count($citySubscriptionData['regionId']);$k++)
	{
	    // prepare data for consultant table
	    $tableData =
		array	(
			    'consultantId'		=> $citySubscriptionData['consultantId'     ],
			    'universityId'  	=> $citySubscriptionData['universityId'	    ],
			    'createdAt'        	=> $citySubscriptionData['createdAt'        ],
			    'createdBy'        	=> $citySubscriptionData['createdBy'        ],
			    'modifiedAt'       	=> $citySubscriptionData['modifiedAt'       ],
			    'modifiedBy'       	=> $citySubscriptionData['modifiedBy'       ],
			    'regionId'       	=> $citySubscriptionData['regionId'         ][$k],
			    'startDate'        	=> $citySubscriptionData['startDate'        ][$k],
			    'endDate'          	=> $citySubscriptionData['endDate'          ][$k],
			    'salesPerson'      	=> $citySubscriptionData['salesPerson'      ][$k],
			    'status'           	=> 'live'
			);
		
	    $this->dbHandle->insert('consultantRegionSubscription',$tableData );
	    // get primary key for consultant Location table :: it will be used for comments table
	    $citySubscriptionTableId = $this->dbHandle->insert_id();
	    // comments
	    $consultantCMSUserCommentsData = array( 'userId'    => $citySubscriptionData['modifiedBy'],
						    'pageType'  => $citySubscriptionData['cityAssignmentSaveMode'],
						    'pageTypeId'=> $citySubscriptionTableId ,
						    'comments'  => $citySubscriptionData['cityAssignmentComments']
						    );
	    
	    // insert into consultantCMSUserComments table
	    $this->dbHandle->insert('consultantCMSUserComments',$consultantCMSUserCommentsData);
	}
	$this->dbHandle->trans_complete();
	
	if ($this->dbHandle->trans_status() === FALSE) {
		throw new Exception('Transaction Failed');
	}
	// updation of consultant required due to addition of default branch data
	$this->updateConsultantCache($citySubscriptionData['consultantId']);
	$this->updateConsultantLocationCache($citySubscriptionData['consultantId']);
	
	return true;
    }
    /*
     * to update status of old consultantLocation records as history
     */
    public function updateCitySubscriptionDataOnEdit($citySubscriptionData,$transactionActive)
    {
        $this->initiateModel('write');
        if(!$transactionActive){
            $this->dbHandle->trans_start();
        }
        $newStatus = 'history';
		$sql = "update consultantRegionSubscription set status = ? where id = ?";
		$queryData = array(
						   $newStatus,
						   $citySubscriptionData['subscriptionId']
						);
		$this->dbHandle->query($sql,$queryData);
        if(!$transactionActive)
	{
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                    throw new Exception('Transaction Failed');
            }
        }
    }
    /*
     * get universities mapped to a consultant, without student profile is checked
     */
    public function getConsultantUniversities($consultantId = array())
    {
	// get the read DB handle
	$this->initiateModel("read");
	$this->dbHandle->select('distinct cum.universityId',false);
	$this->dbHandle->from('consultantUniversityMapping cum');
	$this->dbHandle->where_in('cum.consultantId',$consultantId,false);
	$this->dbHandle->where('cum.status','live');
	$result = $this->dbHandle->get()->result_array();
	//_p($result);
	return $result;
    }
    /*
     * get consultant city subscriptions (ACTIVE)
     * NOTE : this function serves following purposes
     * 1. check if subscription already given on a combination (consultant,city,univ)
     * 2. check if same city-university combination available with different consultants(prevent more than 3 such instances)
     * 3. get data to be displayed in add/edit city assignment form BOTTOM table(send flag 'displayTableData' =>true)
     * @params : just add an associative index to $data array, that will be used in where_in clause.(all must be array)
     * 		in case of empty array all active subscriptions of each consultant will be returned
     */
    public function getActiveConsultantCitySubscriptions($data)
    {
		// get the read DB handle
		$this->initiateModel("read");
		$this->dbHandle->select('*');
		$this->dbHandle->from('consultantRegionSubscription ccs');
		//$this->dbHandle->join('consultantStudentProfileToUniversityMapping cspum','csp.profileId = cspum.profileId and csp.status = cspum.status','inner');
		
		foreach($data as $k=>$val){
			if(!empty($val)){
				$this->dbHandle->where_in('ccs.'.$k, $val,false);
			}
		}
			
		$this->dbHandle->where('ccs.status','live');
		$this->dbHandle->where('ccs.endDate > now()','',false);
		
		$result = $this->dbHandle->get()->result_array();
		//_p($this->dbHandle->last_query());
		//_p($result);
		return $result;
    }
    
    public function getStudentProfileStatus($profileId){
	$this->initiateModel('read');
		
	$this->dbHandle->select("count(csp.id) as pCount");
	$this->dbHandle->from("consultantStudentProfile csp");
	$this->dbHandle->where("csp.profileId",$profileId);
	$this->dbHandle->where("csp.status","live");
	$profileCountResult = $this->dbHandle->get()->result_array();
	return $profileCountResult;
	
    }
    

    public function getAllUniversitiesForStudentProfile($profileId){
	$this->initiateModel('read');
		
	$this->dbHandle->select("universityId ");
	$this->dbHandle->from("consultantStudentProfileToUniversityMapping cspum");
	$this->dbHandle->where("cspum.profileId",$profileId);
	$this->dbHandle->where("cspum.status","live");
	$universityResult = $this->dbHandle->get()->result_array();
	return $universityResult;
    }
    
    /*
     *Get assigned cities data
    */
  
    function getAllCitiesData($paginatorObj)
    {
	// get the read DB handle
	$this->initiateModel("read");

	//use limits for results from pagination object
	$LimitOffset 		= $paginatorObj->getLimitOffset();
	$LimitRowCount 		= $paginatorObj->getLimitRowCount();
	
	  
	
	/*SELECT ccs.`consultantId`, cn.name as consultant, ccs.`universityId`, univ.name as university , ccs.`cityId`, clc.name as city, ccs.`startDate`, ccs.`endDate`
	 *FROM consultantRegionSubscription ccs INNER JOIN consultant cn ON (ccs.consultantId = cn.consultantId AND cn.status ='live')
	INNER JOIN university univ ON (ccs.universityId = univ.university_id AND univ.status ='live' )
	INNER JOIN consultantLocationCity clc ON (ccs.cityId = clc.id AND clc.status = 'live' )
	WHERE ccs.status ='live' AND ccs.endDate >= NOW() */
	
	
	$this->dbHandle->select('SQL_CALC_FOUND_ROWS ccs.consultantId, cn.name as consultant, ccs.universityId, univ.`name` as university , ccs.regionId , clc.name as city, ccs.startDate, ccs.endDate ',false);
	$this->dbHandle->from('consultantRegionSubscription ccs');
	$this->dbHandle->join('consultant cn',"ccs.consultantId = cn.consultantId AND cn.status ='live'",'inner');
	$this->dbHandle->join('university univ',"ccs.universityId = univ.university_id AND univ.status ='live'",'inner');
	$this->dbHandle->join('consultantRegions clc',"ccs.regionId = clc.id AND clc.status = 'live'",'inner');
	$this->dbHandle->where('ccs.status','live');
	$this->dbHandle->where('ccs.endDate >= NOW()');
	$this->dbHandle->limit($LimitRowCount, $LimitOffset);
	//$this->dbHandle->order_by("ccs.modifiedAt", "desc");
	$this->dbHandle->order_by("ccs.modifiedAt desc,consultant,university,city desc");
	

	$result['resultdata'] = $this->dbHandle->get()->result_array();
	
	//error_log('ABHINAV@test: '.$this->dbHandle->last_query());
	//_p($result);
	
	//fetch the count of total rows fetched
	$query = "SELECT FOUND_ROWS() as TotalCount";
	$row = $this->dbHandle->query($query)->row_array();
	$result['totalCount'] = $row['TotalCount'];
		
    	return $result;
    }
    
       
    function getAssignedCitiesData($searchType ,$searchContentName, $paginatorObj )
    {
	// get the read DB handle
	$this->initiateModel("read");
	//use limits for results from pagination object
	$LimitOffset 		= $paginatorObj->getLimitOffset();
	$LimitRowCount 		= $paginatorObj->getLimitRowCount();
	
	$searchContentName=mysql_escape_string($searchContentName);
	
	/*SELECT ccs.`consultantId`, cn.name as consultant, ccs.`universityId`, univ.name as university , ccs.`cityId`, clc.name as city, ccs.`startDate`, ccs.`endDate`
	 *FROM consultantRegionSubscription ccs INNER JOIN consultant cn ON (ccs.consultantId = cn.consultantId AND cn.status ='live')
	INNER JOIN university univ ON (ccs.universityId = univ.university_id AND univ.status ='live' )
	INNER JOIN consultantLocationCity clc ON (ccs.cityId = clc.id AND clc.status = 'live' )
	WHERE ccs.status ='live'*/
	
	if($searchType == "universities")
	{
	    
	    $this->dbHandle->select('university_id',false);
	    $this->dbHandle->from('university');
	    $this->dbHandle->where('status','live');
	    $this->dbHandle->like('`name`',$searchContentName);
	    
	    $ids = $this->dbHandle->get()->result_array();
	    
	    //_p($ids);
	}
	
	else if($searchType == "consultants")
	{
	  
	    $this->dbHandle->select('consultantId',false);
	    $this->dbHandle->from('consultant');
	    $this->dbHandle->where('status','live');
	    $this->dbHandle->like('`name`',$searchContentName); 
	    $ids = $this->dbHandle->get()->result_array();
	
	}
	
	else
	{
	
	    $this->dbHandle->select('id',false);
	    $this->dbHandle->from('consultantRegions');
	    $this->dbHandle->where('status','live');
	    $this->dbHandle->like('`name`',$searchContentName); 
	    $ids = $this->dbHandle->get()->result_array();
	}
	
	if(empty($ids) )return $result = array();
	//_p($ids);
        $searchids = array();
	
	$this->dbHandle->select('SQL_CALC_FOUND_ROWS ccs.consultantId, cn.name as consultant, ccs.universityId, univ.`name` as university , ccs.regionId, clc.name as city, ccs.startDate, ccs.endDate ',false);
	$this->dbHandle->from('consultantRegionSubscription ccs');
	$this->dbHandle->join('consultant cn',"ccs.consultantId = cn.consultantId AND cn.status ='live'",'inner');
	$this->dbHandle->join('university univ',"ccs.universityId = univ.university_id AND univ.status ='live'",'inner');
	$this->dbHandle->join('consultantRegions clc',"ccs.regionId = clc.id AND clc.status = 'live'",'inner');
	$this->dbHandle->where('ccs.status','live');
	$this->dbHandle->where('ccs.endDate >= NOW()');
	if($searchType == "universities")
	{
	    foreach($ids as $key=>$values)
	    {
		$searchids[]= $values['university_id'];
	    }
	   // _p($searchids);

	    $this->dbHandle->where_in('ccs.universityId', $searchids);
	}
	else if($searchType == "consultants")
	{
	    foreach($ids as $key=>$values)
	    {
		$searchids[]= $values['consultantId'];
	    }
	    //_p($searchids);
	    $this->dbHandle->where_in('ccs.consultantId', $searchids);
	}
	else
	{
	    foreach($ids as $key=>$values)
	    {
		$searchids[]= $values['id'];
	    }
	    //_p($searchids);
	    $this->dbHandle->where_in('ccs.regionId', $searchids);
	}
	
	
	$this->dbHandle->limit($LimitRowCount, $LimitOffset);
	//$this->dbHandle->order_by("ccs.modifiedAt", "desc"); 
	$this->dbHandle->order_by("ccs.modifiedAt desc,consultant,university,city desc");
	$result['resultdata'] = $this->dbHandle->get()->result_array();
	//_p($result);
	
	//fetch the count of total rows fetched
	$query = "SELECT FOUND_ROWS() as TotalCount";
	$row = $this->dbHandle->query($query)->row_array();
	$result['totalCount'] = $row['TotalCount'];
	
    	return $result;
    }
	
	public function getConsultantUniversityCitySubscriptionDataForConsultant($consultantId){
		$this->initiateModel('read');
		$sql = "select u.name as universityName, clc.name as cityName, ccs.universityId as universityId, ccs.regionId as cityId,
				DATE_FORMAT(ccs.startDate,'%d %b %Y') as startDate, DATE_FORMAT(ccs.endDate,'%d %b %Y') as endDate,
				cum.id as liveCheck, ccs.id as primaryKey
				from consultantRegionSubscription ccs
				inner join university u on ccs.universityId = u.university_id and u.status = 'live'
				inner join consultantRegions clc on clc.id = ccs.regionId and clc.status='live'
				left join consultantUniversityMapping cum on cum.universityId = ccs.universityId and ccs.consultantId = cum.consultantId and cum.status='live'
				where ccs.status = 'live' and ccs.consultantId = ?
				order by ccs.modifiedAt desc";
		$res = $this->dbHandle->query($sql,array($consultantId))->result_array();
		return $res;
	}
	
	public function getConsultantSubscriptionData($subscriptionId){
		$this->initiateModel('read');
		$sql = "select clc.name as regionName, ccs.startDate as startDate,
				DATE_FORMAT(ccs.startDate,'%d/%m/%Y') as startDate, DATE_FORMAT(ccs.endDate,'%d/%m/%Y') as endDate,
				csp.name as salesPersonName, concat(tu.firstname,' ',tu.lastname) as lastModifiedBy, ccs.modifiedAt as lastModifiedAt,
				ccs.createdAt as createdAt, ccs.createdBy as createdBy
				from consultantRegionSubscription ccs
				inner join consultantRegions clc on clc.id = ccs.regionId and clc.status='live'
				inner join consultantSalesPersons csp on csp.id = ccs.salesPerson and csp.status='live'
				inner join tuser tu on tu.userid = ccs.modifiedBy
				where ccs.id = ? and ccs.status = 'live'";
		$res =  $this->dbHandle->query($sql,array($subscriptionId))->result_array();
		return $res;
	}
	
	public function getBasicIdsForSubscription($subscriptionId){
		$this->initiateModel('read');
		$sql = "select consultantId, universityId, regionId from consultantRegionSubscription where id = ?";
		return $this->dbHandle->query($sql,array($subscriptionId))->result_array();
	}
	
	//Function : To delete consultant-university mapping during university deletion.
	//			 Deletes all consultant-university-mappings mapped to a particular record
	// Returns : Number of records updated (0 if none)
	public function deleteConsultantUniversityMappingsForUniversity($universityId){
		$this->initiateModel('write');
		$sql = "update consultantUniversityMapping set status = 'deleted' where universityId = ? and status='live'";
		$this->dbHandle->query($sql,array($universityId));
		return $this->dbHandle->affected_rows();
	}
	//Function : To delete all student profiles->university mapping mapped to a particular university during university deletion
	// Returns : Ids of all profiles affected and number of university mappings remaining.
	public function deleteStudentProfileToUniversityMappingByUniversity($universityId){
		$this->initiateModel('write');
		$sql = "select profileId, count(1) as profileCount from consultantStudentProfileToUniversityMapping where profileId in (select profileId from consultantStudentProfileToUniversityMapping where universityId = ? and status='live') and status = 'live' group by profileId";
		$result = $this->dbHandle->query($sql,array($universityId))->result_array();
		$sql = "update consultantStudentProfileToUniversityMapping set status = 'deleted' where universityId = ? and status = 'live'";
		$this->dbHandle->query($sql,array($universityId));
		return $result;
		
	}
    
    public function getCourseNamesForUniversity($univId){
	$this->initiateModel("read");
	$sql = "select cd.course_id, cd.courseTitle from course_details cd
		inner join abroadCategoryPageData acpd on acpd.university_id = ? and acpd.status='live' and acpd.course_id = cd.course_id
		where cd.status = 'live'";
	$res = $this->dbHandle->query($sql,array($univId))->result_array();
	$result = array();
	foreach($res as $row){
	    $result[$row['course_id']] = $row['courseTitle'];
	}
	return $result;
    }
    
    public function getExcludedCoursesForUniversity($consultantId, $univId){
	$this->initiateModel("read");
	$sql = "select courseId from consultantUniversityExcludedCourseMapping where consultantId = ? and universityId = ? and status='live'";
	$res = $this->dbHandle->query($sql,array($consultantId,$univId))->result_array();
	$result = array();
	foreach($res as $row){
	    $result[] = reset($row);
	}
	return $result;
    }
	public function validateConsultantforClientMapping($data){
	    
	    $finalData = array();
	    $this->initiateModel("read");
	    $this->dbHandle->select('count(id) as totalCount',false);
	    $this->dbHandle->from('consultantClientSubscriptionDetail');
	    $this->dbHandle->where('consultantId',$data['consultantId']);
	    $this->dbHandle->where('status','live');
	    if($data['mappingId']>0){
		$this->dbHandle->where('id !=',$data['mappingId']);
	    }
	    
	    $result = $this->dbHandle->get()->result_array();
	    if($result[0]['totalCount']==0){
		    $this->dbHandle->select('name',false);
		    $this->dbHandle->from('consultant');
		    $this->dbHandle->where('consultantId',$data['consultantId']);
		    $this->dbHandle->where('status','live');
		    
		    $nameResult = $this->dbHandle->get()->result_array();
		    if(count($nameResult[0])>0){
			$finalData['error'] = false;
			$finalData['errorMsg'] = '';
			$finalData['data'] = $nameResult[0];
		    }else{
			$finalData['error'] = true;
			$finalData['errorMsg'] = 'Please enter valid consultant ID';
		    }
		    
		}
	    else{
		
		$finalData['error'] = true;
		$finalData['errorMsg'] = 'Consultant is already mapped with other client';
	    } 
	   return  $finalData;
}
	public function getClientConsultantSubscription($paginatorObj,$consultantId)
	{
	    $this->initiateModel('read');
	    $LimitOffset 	= $paginatorObj->getLimitOffset();
	    $LimitRowCount 	= $paginatorObj->getLimitRowCount();
	   
	    //fetch clientConsultantSubscriptionDetails from shiksha DB
	    
	    if($consultantId !="")
	    {
		$whereclause = " AND consultantId ='".mysql_escape_string($consultantId)."'";
	    }
	    else
	    {
		$whereclause = " ORDER BY createdAt DESC";
	    }

	    $sql1 = "SELECT SQL_CALC_FOUND_ROWS
		    `id` as mappingId,`consultantId`, `clientId`, `subscriptionId`, `costPerResponse` , `createdAt` 
		     FROM `consultantClientSubscriptionDetail`
		     WHERE status ='live'".$whereclause."
		    LIMIT ".$LimitOffset.",".$LimitRowCount;
		     
	    $consultantData = $this->dbHandle->query($sql1)->result_array();
	    //echo $this->dbHandle->last_query();
	    //die;
	    $sql = "SELECT FOUND_ROWS() as TotalCount";
	    $row = $this->dbHandle->query($sql)->row_array();
	    $result['totalCount'] = $row['TotalCount'];

	    $i=0;
	    foreach ($consultantData as $value)
	    {
		$result['subscriptionIds'] [$i] = $value['subscriptionId'];
		$result['consultantData'][$value['consultantId']]['mappingId'] 		= $value['mappingId'];
		$result['consultantData'][$value['consultantId']]['consultantId'] 	= $value['consultantId'];
		$result['consultantData'][$value['consultantId']]['clientId'] 		= $value['clientId'];
		$result['consultantData'][$value['consultantId']]['subscriptionId'] 	= $value['subscriptionId'];
		$result['consultantData'][$value['consultantId']]['CPR'] 		= $value['costPerResponse'];
		$result['consultantData'][$value['consultantId']]['createdAt'] 		= $value['createdAt'];
		$i++;
	    }

	    return $result;
	}
    public function getRegionsMapping($locationId=0,$locationType='') {
        /*$whereClause = "";
        $whereClause .= ($locationId > 0)?" locationId=".$locationId." AND locationType=".$locationType:"";
        $sql = "SELECT crlm.regionId,cr.name from consultantRegionsToLocationMapping crlm,consultantRegions cr "
                ." where crlm.regionId=cr.id and cr.status='live' and crlm.status='live' "
                .($whereClause != "")?" AND ".$whereClause:"";
         * 
         */
        $this->initiateModel('read');
        $this->dbHandle->select("crlm.regionId,cr.name as regionName,crlm.locationId,crlm.locationType");
        $this->dbHandle->from("consultantRegionsToLocationMapping crlm");
        $this->dbHandle->join("consultantRegions cr","crlm.regionId=cr.id and cr.status='live' and crlm.status='live'","inner");
        if($locationId > 0 && $locationType!=''){
            $this->dbHandle->where(array(   'crlm.locationId'   => $locationId,
                                            'crlm.locationType' => $locationType
                                        )
                                    );
        }
        $result = $this->dbHandle->get()->result_array();
        //echo 'sql: '.$this->dbHandle->last_query();
        //_p($result);
        //die;
        return $result;
        
    }

	
	public function saveClientConsultantSubscriptionData($data,$mappingId=0){

	    $this->initiateModel('write');
	    $this->dbHandle->trans_start();
	    if($mappingId >0)
	    {
		//Mark Old Record as history
		$historydata = array(
               'status'=>'history'
		);
	       $this->dbHandle->where('id', $mappingId);
	       $this->dbHandle->update('consultantClientSubscriptionDetail', $historydata);
	    }
	    //Insert Row for New Data
	    $this->dbHandle->insert('consultantClientSubscriptionDetail',$data);
	    
	    $this->dbHandle->trans_complete();
	    if ($this->dbHandle->trans_status() === FALSE) {
		    throw new Exception('Transaction Failed');
		    
	    }
	    return true;
	}
	
	public function getClientConsultantSubscriptionData($mappingId, $includeOldMappings = false){
	    $this->initiateModel("read");
	    $this->dbHandle->select('ccsd.id as mappingId,ccsd.consultantId,ccsd.clientId,ccsd.subscriptionId,ccsd.costPerResponse,ccsd.createdAt,ccsd.createdBy,ccsd.modifiedAt,ccsd.modifiedBy,ccsd.status,c.`name` as consultantName');
	    $this->dbHandle->from('consultantClientSubscriptionDetail ccsd');
	    $this->dbHandle->join('consultant c', 'c.consultantId = ccsd.consultantId and c.status = "live"');
	    $this->dbHandle->where('ccsd.id',$mappingId);
		if(!$includeOldMappings){
			$this->dbHandle->where('ccsd.status','live');
		}
	    $result = $this->dbHandle->get()->result_array();
	    //echo $this->dbHandle->last_query();
	    //_p($result);
	    return $result;
	}
	
	private function updateConsultantCache($consultantId = 0)
	{
	    if($consultantId == 0)
	    {
		return false;
	    }
	    //sleep(2); //we are adding this delay to avoid read and write delay between different DB servers
	    // load consultant builder
	    $this->load->builder('ConsultantPageBuilder', 'consultantProfile');
	    $consultantPageBuilder = new ConsultantPageBuilder;
	    // ranking page repository
	    $consultantPageRepository = $consultantPageBuilder->getConsultantRepository();
	    $consultantPageRepository->disableCaching();
	    $r = $consultantPageRepository->find($consultantId);
	    return true;
	}
	
	private function deleteConsultantCache($consultantId = 0)
	{
	    if($consultantId == 0)
	    {
		return false;
	    }
	    sleep(2); //we are adding this delay to avoid read and write delay between different DB servers
	    $consultantCache = $this->load->library('consultantProfile/cache/ConsultantCache');
	    $consultantCache->deleteConsultant($consultantId);
	    
	    $consultantLocationCache = $this->load->library('consultantProfile/cache/ConsultantLocationCache');
	    $consultantLocationCache->deleteConsultantLocation($consultantId);
	    
	    $consultantStudentProfileCache = $this->load->library('consultantProfile/cache/ConsultantStudentProfileCache');
	    $consultantStudentProfileCache->deleteConsultantStudentProfile($consultantId);
	    
	    return true;
	}
	
	private function updateConsultantLocationCache($consultantId = 0)
	{
	    if($consultantId == 0)
	    {
		return false;
	    }
	    //sleep(2); //we are adding this delay to avoid read and write delay between different DB servers
	    // load consultant builder
	    $this->load->builder('ConsultantPageBuilder', 'consultantProfile');
	    $consultantPageBuilder = new ConsultantPageBuilder;
	    // ranking page repository
	    $consultantLocationRepository = $consultantPageBuilder->getConsultantLocationRepository();
	    $consultantLocationRepository->disableCaching();
	    //we are updateing the location of consultant so pass 2nd argument true is mandatory
	    $r = $consultantLocationRepository->find($consultantId,TRUE);
	    return true;
	}
	
	
	private function updateConsultantStudentProfileCache($consultantId = 0)
	{
	    if($consultantId == 0)
	    {
		return false;
	    }
            //this delay is removed to improve page load time as currently we don't think there is much issue of delay
	   // sleep(2); //we are adding this delay to avoid read and write delay between different DB servers
	    // load consultant builder
	    $this->load->builder('ConsultantPageBuilder', 'consultantProfile');
	    $consultantPageBuilder = new ConsultantPageBuilder;
	    // ranking page repository
	    $consultantStudentProfileRepo = $consultantPageBuilder->getConsultantStudentProfileRepository();
	    $consultantStudentProfileRepo->disableCaching();
	    //we are updateing the location of consultant so pass 2nd argument true is mandatory
	    $r = $consultantStudentProfileRepo->find($consultantId,TRUE);
	    return true;
	}
	public function getConsultantRegionAssignmentAfterDate($afterDate, $consultantId)
	{
		$this->initiateModel("read");
	    $this->dbHandle->select('consultantId,universityId,regionId');
	    $this->dbHandle->from('consultantRegionSubscription');
	    $this->dbHandle->where("createdAt > '".$afterDate."'","",false);
		$this->dbHandle->where('consultantId',$consultantId);
		$this->dbHandle->where('status','live');
	    $result = $this->dbHandle->get()->result_array();
	    //echo $this->dbHandle->last_query();
	    //_p($result);
	    return $result;
	}
}
