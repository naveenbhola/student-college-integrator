<?php

class AbroadListingPosting extends MX_Controller
{
    /**
    * Class data member declaration section
    */
    private $usergroupAllowed;
    private $abroadCommonLib;
	private $abroadPostingLib;
	private $abroadCmsModelObj;

    /**
    * Constructor
    */
    public function __construct()
    {
	// load the config
	$this->config->load('studyAbroadCMSConfig');
	
	// initialize the user group to be allowed to access Atudy abroad CMS
	$this->usergroupAllowed = array('saAdmin','saCMS');
	
	$this->abroadCommonLib 		= $this->load->library('listingPosting/AbroadCommonLib');
	$this->abroadPostingLib 	= $this->load->library('listingPosting/AbroadPostingLib');
	$this->abroadCmsModelObj	= $this->load->model('listingPosting/abroadcmsmodel');
	$this->abroadPostingLib = $this->load->library('listingPosting/AbroadPostingLib');
	
	$this->load->builder('LocationBuilder','location');
	$locationBuilder = new LocationBuilder;
	$this->locationRepository = $locationBuilder->getLocationRepository();
	
	$this->load->repository('CategoryRepository','categoryList');
	$this->load->builder('CategoryBuilder','categoryList');
    }
    
    /**
    * Purpose : Index function of the class
    * Params  :	none
    * Author  : none
    */
    function index()
    {
	$this->viewUniversityListing();
    }
    
    /**
    * Purpose : Method to validate the user and do the necessary action(s)
    * Params  :	none
    * Author  : none
    */
    function cmsAbroadUserValidation($noRedirectionButReturn = false)
    {
	    $usergroupAllowed 	= $this->usergroupAllowed;
	    $validity 			= $this->checkUserValidation();	    
	    global $logged;
	    global $userid;
	    global $usergroup;
	    $thisUrl 		= $_SERVER['REQUEST_URI'];
		$errorType 		= "";
	    if(($validity == "false" )||($validity == ""))
	    {
		    $logged = "No";
			if(!$noRedirectionButReturn){
				header('location:/enterprise/Enterprise/loginEnterprise');
				exit();
			} else {
				$errorType = "notloggedin";
			}
		}
	    else
	    {
		    $logged 		= "Yes";
		    $userid 		= $validity[0]['userid'];
		    $usergroup 		= $validity[0]['usergroup'];
		    $displayname 	= $validity[0]['displayname'];
			if(!in_array($usergroup,$usergroupAllowed)){
				if(!$noRedirectionButReturn){
					header("location:/enterprise/Enterprise/disallowedAccess");
					exit();	
				} else {
					$errorType = "disallowedaccess";
				}
			}
	    }
	    $returnArr['userid']		= $userid;
	    $returnArr['usergroup']		= $usergroup;
	    $returnArr['logged'] 		= $logged;
	    $returnArr['thisUrl'] 		= $thisUrl;
	    $returnArr['validity'] 		= $validity;
	    $returnArr['displayname'] 	= $displayname;
		
		if(!empty($errorType)){
			$returnArr['error'] 		= "true";
			$returnArr['error_type'] 	= $errorType;
		}
		return $returnArr;
    }

    /**
    * Purpose : Method to validate the user and do the necessary action(s)
    * Params  :	none
    * Author  : Romil Goel
    */
    public function addCityForm()
    {
	$this->usergroupAllowed = array('saAdmin');
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	$countryId = $this->input->get("countryId");
	$countryId = empty($countryId) ? 0 : $countryId;
	
	// prepare the display date here
	$displayData['formName'] 	 = ENT_SA_FORM_ADD_CITY;
	$displayData['selectLeftNav']    = "CITY";
	$displayData['abroadStatesList'] = $this->abroadCommonLib->getAllAbroadStates();
	$displayData['countryIdAddCityForm']   = $countryId;
	
	$this->_populateAbroadCountries($displayData);

	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

    /**
    * Purpose : Method for showing city listing 
    * Params  :	none
    * Author  : Vinay Airan
    */
  public function viewCityListing()
    {
    $this->usergroupAllowed = array('saAdmin');
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
    $searchCityString = trim($this->input->get('seachCitybox'));
    if(strcmp($searchCityString,"Search a City") ==0 || $searchCityString =="")
     { 
     	$searchCityString = "";
     	
     }
    $URL = !empty($searchCityString) ? ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_CITY."?seachCitybox=".$searchCityString : ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_CITY;
	$this->load->library('listingPosting/Paginator'); 
	$displayData['paginator']  = new Paginator($URL);
    $cityArray = $this->abroadCommonLib->getAllCityList($searchCityString,$displayData['paginator']->getLimitOffset(), $displayData['paginator']->getLimitRowCount());
	$displayData['paginator']->setTotalRowCount($cityArray['totalCount']);
	 
	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_VIEW_LISTING_CITY;
    $displayData['searchCityString'] = $searchCityString;
	$displayData['selectLeftNav']   = "CITY";
    $displayData['totalCount'] = $cityArray['totalCount'];
	$displayData['cityArray'] = $cityArray['data'];
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    /**
    * Purpose : Method to render the Universities MIS
    * Params  :	1. Status of the data to be shown, by default it is 'all' i.e live and draft both
    * Author  : Romil Goel
    */
    public function viewUniversityListing($displayDataStatus = 'all')
    {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get post parameters
	$searchUnivName = $this->input->get("q");
	$resultPerPage  = $this->input->get("resultPerPage");
	
	// data massaging
	$searchUnivName = ($searchUnivName == "Search University") ? "" : $searchUnivName;
	$resultPerPage  = ($resultPerPage) ? $resultPerPage : "";
	
	// prepare the query parameters coming
	$queryParams	= "1";
	$queryParams   .= ($searchUnivName ? "&q=".$searchUnivName : "");
	$queryParams   .= ($resultPerPage  ? "&resultPerPage=".$resultPerPage : "");
	$queryParams    = $queryParams 	   ? "?".$queryParams : "";
	
	// prepare the URL for view as well as for paginator
	$URL 		= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_UNIVERSITY."/".$displayDataStatus;
	$URLPagination 	= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_UNIVERSITY."/".$displayDataStatus.($queryParams ? $queryParams : "");
	
	// initialize the paginator instance
	$this->load->library('listingPosting/Paginator'); 
	$displayData['paginator']  	  = new Paginator($URLPagination);  
	
	// fetch the universities data
	$result = $this->abroadPostingLib->getUniversityTableData($displayDataStatus, $displayData['paginator'], $searchUnivName);
	$displayData['paginator']->setTotalRowCount($result['totalCount']);
	
	// prepare the display date here
	$displayData['formName'] 	  = ENT_SA_VIEW_LISTING_UNIVERSITY;
	$displayData['selectLeftNav']     = "UNIVERSITY";
	$displayData['displayDataStatus'] = $displayDataStatus;
	$displayData['searchTerm'] 	  = $searchUnivName;
	$displayData['queryParams'] 	  = $queryParams;
	$displayData['totalResultCount']  = $result['dataCount'];
	$displayData['URL'] 	  	  = $URL;
	$displayData["reportData"] 	  = $result['data'];
	
	// load the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    /**
    * Purpose : none
    * Params  :	none
    * Author  : none
    */
    public function viewDepartmentListing($displayDataStatus = 'all')
    {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get post parameters
	$searchDeptName = $this->input->get("q");
	$resultPerPage  = $this->input->get("resultPerPage");
	
	// data massaging
	$searchDeptName = ($searchDeptName == "Search Department") ? "" : $searchDeptName;
	$resultPerPage  = ($resultPerPage) ? $resultPerPage : "";
	
	// prepare the query parameters coming
	$queryParams	= "1";
	$queryParams   .= ($searchDeptName ? "&q=".$searchDeptName : "");
	$queryParams   .= ($resultPerPage  ? "&resultPerPage=".$resultPerPage : "");
	$queryParams    = $queryParams 	   ? "?".$queryParams : "";
	
	// prepare the URL for view as well as for paginator
	$URL 		= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_DEPARTMENT."/".$displayDataStatus;
	$URLPagination 	= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_DEPARTMENT."/".$displayDataStatus.($queryParams ? $queryParams : "");
	
	// initialize the paginator instance
	$this->load->library('listingPosting/Paginator'); 
	$displayData['paginator']  	  = new Paginator($URLPagination);  
	
	// fetch the universities data
	$result = $this->abroadPostingLib->getDepartmentTableData($displayDataStatus, $displayData['paginator'], $searchDeptName);
	//_p($result['totalCount']);
	$displayData['paginator']->setTotalRowCount($result['totalCount']);
	//_p($displayData['paginator']); die;
	
	// prepare the display date here
	$displayData['formName'] 	  = ENT_SA_VIEW_LISTING_DEPARTMENT;
	$displayData['selectLeftNav']     = "DEPARTMENT";
	$displayData['displayDataStatus'] = $displayDataStatus;
	$displayData['searchTerm'] 	  = $searchDeptName;
	$displayData['queryParams'] 	  = $queryParams;
	$displayData['totalResultCount']  = $result['dataCount'];
	$displayData['URL'] 	  	  = $URL;
	$displayData["deptData"] 	  = $result['data'];
	
	foreach($displayData["deptData"] as $key=>$value)
	{
	    $universityLocationInfo = $this->abroadCmsModelObj->getUniversityLocationInfo($value['universityId'],$value["status"]);
	    $locResult = $this->abroadCmsModelObj->getlocationDetailsByCityId($universityLocationInfo['city_id']);
	    if($locResult) {
		$displayData["deptData"][$key]['cityName'] = $locResult['cityName'];
		$displayData["deptData"][$key]['stateName'] = $locResult['stateName'];
		$displayData["deptData"][$key]['countryName'] = $locResult['countryName'];
	    }
	    //$profileCompltnResult = $this->abroadCmsModelObj->getProfileCompletePercentage($value['deptId'], 'institute');
	    //$displayData["deptData"][$key]['profileCompletion'] = $profileCompltnResult;
	}
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

    /**
    * Purpose : none
    * Params  :	none
    * Author  : none
    */
    public function viewCourseListing()
    {
	$this->usergroupAllowed = array('saAdmin','saCMS');
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get Course And PageNo.
	$courseName = ($this->input->get("searchCourse"))?$this->input->get("searchCourse"):"";
	$status = ($this->input->get("status"))?$this->input->get("status"):"";
	$rowsPerPage = ($this->input->get("resultPerPage"))?$this->input->get("rowsPerPage"):"";
	
	if($courseName == 'Search Course'){
	    $courseName = "";
	}
	
	// prepare the query parameters coming
	$queryParams	= "";
	$queryParams   .= ($courseName ? "&searchCourse=".$courseName : "");
	$queryParams   .= ($resultPerPage  ? "&resultPerPage=".$resultPerPage : "");
	$queryParams    = $queryParams 	   ? $queryParams : "";
	
	//Forming Relative URL
	$formURL = ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_COURSE."/";
	$relativeUrl = ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_COURSE."/?status=".$status.$queryParams;
	
	//Loading Libraries for Pagination
	$this->load->library('listingPosting/Paginator');
	$displayData['paginator']  = new Paginator($relativeUrl);
	
	// Get Lower Limit and Rows Per Page
	$lowerlimit = $displayData['paginator']->getLimitOffset();
        $rowsPerPage = $displayData['paginator']->getLimitRowCount();
	
	// library call for courses data
	$courseResultArr = $this->abroadPostingLib->viewCourseTable($courseName,$status,$lowerlimit,$rowsPerPage);
	$courseArr = $courseResultArr['course_data'];
	$totalRows = $courseResultArr['total_count'];
	$tabsArr = $courseResultArr['tabs'];
	
	if(!empty($courseArr)){
	    //collect categoryIds for courses
	    foreach($courseArr as $course){
		if($course['category_id']){
		    $categoryIds[] = $course['category_id'];
		}
		$instituteIds[] = $course['institute_id'];
	    }
	    
	    //unique institute Ids
	    array_unique($instituteIds);
	    
	    //fetch institute-university location details
	    $intituteArr = $this->abroadPostingLib->getInstituteLocation($instituteIds);
	    
	    //unique categoryIds
	    $categoryIds = array_unique($categoryIds);
	    
	    if(!empty($categoryIds)){
	    //Loading CategoryBuilder for getting CategoryRepository
	    $this->load->builder('CategoryBuilder','categoryList');
	    $categoryBuilder = new CategoryBuilder;
	    $categoryRepository = $categoryBuilder->getCategoryRepository();
	    
	    //fetch multiple objects for sub-category Ids
	    $categoryIds = $categoryRepository->findMultiple($categoryIds);
	    
	    //retriving parent categoryIds
	    foreach($categoryIds as $categoryIdObj){
		$parentCategoryIds[] = $categoryIdObj->getParentId();
	    }
	    
	    //unique parent categoryIds
	    array_unique($parentCategoryIds);
	    
	    //fetch multiple objects for parent-category Ids
	    $parentCategoryIds = $categoryRepository->findMultiple($parentCategoryIds);
	    }
	    //Arrange view-Data
	    foreach($courseArr as &$courseObj){
		if($courseObj['category_id']){
		$courseObj['subCategory_name'] = $categoryIds[$courseObj['category_id']]->getName();
		$courseObj['parentCategory_name'] = $parentCategoryIds[$categoryIds[$courseObj['category_id']]->getParentId()]->getName();
		}
		$courseObj['department_name'] = $intituteArr[$courseObj['institute_id']]['department_name'];
		$courseObj['university_name'] = $intituteArr[$courseObj['institute_id']]['university_name'];
		$courseObj['city_name'] = $intituteArr[$courseObj['institute_id']]['city_name'];
		$courseObj['country_name'] = $intituteArr[$courseObj['institute_id']]['country_name'];
		
		$courseObj['date'] = date("j M Y",strtotime($courseObj['date']));
	    }	    
	    
	}
	
	//Setting Total RowCount for Pagination
	$displayData['paginator']->setTotalRowCount($totalRows[0]['totalRows']);

	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_VIEW_LISTING_COURSE;
	$displayData['selectLeftNav']   = "COURSE";
	$displayData['courseArr']   	= $courseArr;
	$displayData['searchTerm'] 	= $courseName;
	$displayData['formURL'] 	= $formURL;
	$displayData['displayDataStatus'] = $status;
	$displayData['totalResultCount']  = $tabsArr;
	$displayData['queryParams'] 	  = $queryParams;
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    public function showEditCourseForm($courseId = "")
    {
	if($courseId == "" || !is_numeric($courseId)) {
	    show_404();
	}
	
	$displayData = $this->cmsAbroadUserValidation();
	$displayData['formName'] = ENT_SA_FORM_EDIT_COURSE;
	$displayData['courseId'] = $courseId;
	$displayData['courseData'] = $this->abroadCommonLib->getCourseInfo($courseId);
	if($displayData['courseData']['listings_main']['course_id'] == "") {
	    show_404();
	}
	//_p($displayData['courseData']); die;
	
	$displayData['countryId'] = $displayData['courseData']['course_location_attribute']['country_id'];
	$displayData['deptInfo']['deptId'] = $displayData['courseData']['course_details']['institute_id'];
	$displayData['deptInfo']['deptName'] = $displayData['courseData']['course_details']['deptName'];
	
	$displayData['universityInfo']['universityId'] = $displayData['courseData']['university_info']['university_id'];
	$displayData['universityInfo']['universityName'] = $displayData['courseData']['university_info']['universityName'];
	
	$displayData['mainCategoryIdOfCourse'] = $displayData['courseData']['listing_category_table']['parentId'];
	$displayData['subCategoryIdofCourse'] = $displayData['courseData']['listing_category_table']['category_id'];
	foreach($displayData['courseData']['clientCourseToLDBCourseMapping'] as $ldbCourseId =>  $ldbCourseInfo) {
	    $displayData['desiredCourseIdArray'][] = $ldbCourseInfo['LDBCourseID'];
	}
	
	foreach($displayData['courseData']['listing_external_links'] as $key =>  $infoArray) {
	    $displayData['externalLinks'][$infoArray['link_type']] = $infoArray['link'];
	}
	
	foreach($displayData['courseData']['listing_attributes_table'] as $key =>  $infoArray) {
	    $displayData['listingAttributes'][str_replace(" ", "_", $infoArray['caption'])] = $infoArray['attributeValue'];
	}
	
	foreach($displayData['courseData']['course_attributes'] as $key =>  $infoArray) {
	    $displayData['courseAttributes'][$infoArray['attribute']] = $infoArray['value'];
	}
	
	foreach($displayData['courseData']['course_start_date_info'] as $key =>  $infoArray) {
	    $displayData['courseStartDateInfo'][] = $infoArray['start_date_month'];
	}
	
	foreach($displayData['courseData']['company_logo_mapping'] as $key =>  $infoArray) {
	    $displayData['recruitingComapanies'][] = $infoArray['logo_id'];
	}
	
	if(count($displayData['courseData']['listingExamAbroad'])) {
	    $count = 0;
	    foreach($displayData['courseData']['listingExamAbroad'] as $key =>  $infoArray) {
		if($infoArray['examId'] == -1) {
		        $displayData['customExamData'][$count]['examName'] = $infoArray['examName'];
			$displayData['customExamData'][$count]['cutoff'] = $infoArray['cutoff'];
			$displayData['customExamData'][$count]['comments'] = $infoArray['comments'];
			
			$count++;
		} else {
		    $displayData['examData'][$infoArray['examId']]['cutOff'] = $infoArray['cutoff'];
		    $displayData['examData'][$infoArray['examId']]['comments'] = $infoArray['comments'];
		}
	    }
	 
	}
	// _p($displayData['customExamData']);die;
	// _p( array_keys($displayData['examData'])); die;
	// $universityDetails = $this->abroadCommonLib->getUniversityDetails($universityId, ENT_SA_PRE_LIVE_STATUS);
	
	$this->_populateAbroadCountries($displayData);
	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
	
	$displayData['abroadMainLDBCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
	$displayData['currencyData'] = $this->abroadCommonLib->getCurrencyList();	
	$displayData['selectLeftNav']   = "COURSE";

	$displayData['recruitingCompanies'] = $this->abroadCommonLib->getRecruitingCompanies();
	$displayData['abroadExamsMasterList'] = $this->abroadCommonLib->getAbroadExamsMasterList();
	$displayData['formPostUrl'] = '/listingPosting/AbroadListingPosting/editCourse';
	
	//_p($displayData['abroadExamsMasterList']); die;  disabled=""

	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    public function editCourse() {
	$params['userInfo'] = $this->cmsAbroadUserValidation();
	
	$courseData = $this->_getPostDataForCourse(ENT_SA_FORM_EDIT_COURSE);
	$courseData['flow'] = "edit";
	
	if($this->abroadCmsModelObj->checkIfCourseAlreadyExists($courseData['courseName'], $courseData['departmentId'], $courseData['courseId'])) {
	    $response['Fail']['courseAlreadyExists'] = "Course with same name already exists. Please enter a different Course Name.";
	    echo json_encode($response);
	    exit;
	}
	
	// error_log("\n course info = ".print_r($courseData, true),3,'/home/amitkuksal/Desktop/log.txt'); die;

	// $courseData['courseId'] = Modules::run('common/IDGenerator/generateId', 'course');
	
	$requestBrochureResp = $this->listingBrochureUpload('abroadCourse','brochureLink');
	if(array_key_exists('Fail', $requestBrochureResp)) {
		echo json_encode($requestBrochureResp);
		exit;
	}
	
	$courseData['courseBrochureUrl'] = "";
	if($requestBrochureResp == "") {	    
	    if($courseData['existingBrochureUrl'] != "") {
		$courseData['courseBrochureUrl'] = $courseData['existingBrochureUrl'];
	    }
	} else {    
	    $courseData['courseBrochureUrl'] = $requestBrochureResp;
	}
	
	$courseBasicInfo = $this->abroadCmsModelObj->getCourseBasicInfo($courseData['courseId']);
	$courseData['submit_date'] = $courseBasicInfo['submit_date'];
	$courseData['username'] = $courseBasicInfo['username'];
	$courseData['pack_type'] = $courseBasicInfo['pack_type'];
	// error_log("\n course info = ".print_r($courseBasicInfo, true),3,'/home/amitkuksal/Desktop/log.txt'); die;	
	
	$departmentLocationInfo = $this->abroadCmsModelObj->getDepartmentLocationInfo($courseData['departmentId']);
	$courseData['institute_location_id'] = $departmentLocationInfo[0]['institute_location_id'];	
	$params['courseData'] = $courseData;
	// error_log("courseId = ".$courseData['courseId']."\n dept info = ".print_r($departmentLocationInfo, true),3,'/home/amitkuksal/Desktop/log.txt');
	
	// calculate the percentage completion of course
	$highLowFieldValues 			= $this->abroadCommonLib->getCourseHighAndLowFields($courseData);
	$params['courseData']['percentageCompletion'] 	= $this->abroadCommonLib->calculatePercentageCompletion($highLowFieldValues['high_field_values'], $highLowFieldValues['low_field_values']);

	// Posting data now..
	$postingFlag = $this->abroadPostingLib->postCourseForm($params);
	
	if($postingFlag) {
	    return json_encode($return_response_array['Success']['true']);
	}
    }

    public function showAddCourseForm($type="",$typeId="")
    {	
	$displayData = $this->cmsAbroadUserValidation();
	$displayData['formName'] = ENT_SA_FORM_ADD_COURSE;
	
	if($type == "department" && $typeId != "") {
	    $departmentDetails = $this->abroadCommonLib->getDepartmentBasicInfo($typeId);
	    //_p($departmentDetails); die;
	    $displayData['countryId'] = $departmentDetails['country_id'];
	    $displayData['deptInfo']['deptId'] = $typeId;
	    $displayData['deptInfo']['deptName'] = $departmentDetails['listing_title'];
	    
	    $displayData['universityInfo']['universityId'] = $departmentDetails['university_id'];
	    $displayData['universityInfo']['universityName'] = $departmentDetails['name'];
	}
	elseif($type == "university" && $typeId != ""){
	    $universityDetails = $this->abroadCommonLib->getUniversityInfo($typeId);
	    $displayData['countryId'] = $universityDetails['country_id'];
	    $displayData['universityInfo']['universityId'] = $typeId;
	    $displayData['universityInfo']['universityName'] = $universityDetails['university_name'];
	}
	
	$this->_populateAbroadCountries($displayData);
	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
	
	$displayData['abroadMainLDBCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
	$displayData['currencyData'] = $this->abroadCommonLib->getCurrencyList();	
	$displayData['selectLeftNav']   = "COURSE";

	$displayData['recruitingCompanies'] = $this->abroadCommonLib->getRecruitingCompanies();
	$displayData['abroadExamsMasterList'] = $this->abroadCommonLib->getAbroadExamsMasterList();
	$displayData['formPostUrl'] = '/listingPosting/AbroadListingPosting/addCourse';
	
	//_p($displayData['abroadExamsMasterList']); die;

	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    public function addCourse() {	
	
	$params['userInfo'] = $this->cmsAbroadUserValidation();
	
	$courseData = $this->_getPostDataForCourse(ENT_SA_FORM_ADD_COURSE);
	$courseData['flow'] = "add";
	if($this->abroadCmsModelObj->checkIfCourseAlreadyExists($courseData['courseName'], $courseData['departmentId'])) {
	    $response['Fail']['courseAlreadyExists'] = "Course with same name already exists. Please enter a different Course Name.";
	    echo json_encode($response);
	    exit;
	}

	$courseData['courseId'] = Modules::run('common/IDGenerator/generateId', 'course');
	
	$requestBrochureResp = $this->listingBrochureUpload('abroadCourse','brochureLink');
	if(array_key_exists('Fail', $requestBrochureResp)) {
		echo json_encode($requestBrochureResp);
		exit;
	}

	$courseData['courseBrochureUrl'] = $requestBrochureResp;
	
	$departmentLocationInfo = $this->abroadCmsModelObj->getDepartmentLocationInfo($courseData['departmentId']);
	$courseData['institute_location_id'] = $departmentLocationInfo[0]['institute_location_id'];	
	$params['courseData'] = $courseData;
	// error_log("courseId = ".$courseData['courseId']."\n dept info = ".print_r($departmentLocationInfo, true),3,'/home/amitkuksal/Desktop/log.txt');
	
	// calculate the percentage completion of course
	$highLowFieldValues 			= $this->abroadCommonLib->getCourseHighAndLowFields($courseData);
	$params['courseData']['percentageCompletion'] 	= $this->abroadCommonLib->calculatePercentageCompletion($highLowFieldValues['high_field_values'], $highLowFieldValues['low_field_values']);
	//error_log(":::ROMIL:::: Course profile : ".$params['courseData']['percentageCompletion']);

	// Posting data now..
	$postingFlag = $this->abroadPostingLib->postCourseForm($params);
	
	if($postingFlag) {
	    return json_encode($return_response_array['Success']['true']);
	}
    }
    
    private function _getPostDataForCourse($formName)
    {
	$courseId = $this->input->post('courseId');
	if($courseId != "") {
	    $data['courseId'] = $courseId;
	}
	$data['universityId'] = $this->input->post('university_'.$formName);
	$data['departmentId'] = $this->input->post('departments_'.$formName);
	
	$data['mainCatId'] = $this->input->post('parentCat_'.$formName);
	$data['subCatId'] = $this->input->post('childCat_'.$formName);
	$data['ldbCourseId'] = $this->input->post('ldbcourses_dropdown');
	
	$data['courseName'] = $this->input->post('courseName_'.$formName);
	$data['courseType'] = $this->input->post('courseType');
	$data['courseLevel'] = $this->input->post('courseLevel');
	$data['affiliationDetails'] = $this->input->post('affiliationDetails');
	$data['accreditationDetails'] = $this->input->post('accreditationDetails');
	$data['courseWebsite'] = $this->input->post('website_'.$formName);
	$data['courseDuration'] = $this->input->post('courseDuration_'.$formName);
	$data['courseDurationUnit'] = $this->input->post('courseDuration2');
	$data['courseStartDateArray'] = $this->input->post('courseStartDate');
	$data['courseDurationLink'] = $this->input->post('courseDurationLink_'.$formName);
	$data['courseDescription'] = $this->input->post('courseDescription_'.$formName);
	$data['applicationDeadlineLink'] = $this->input->post('applicationDeadlineLink');
	
	$data['admissionWebsiteLink'] = $this->input->post('admissionWebsiteLink');
	$data['examsRequiredFreeText'] = $this->input->post('examsRequiredFreeText');
	$examRequiredArray = $this->input->post('examRequired');
	$i = 0;
	foreach($examRequiredArray as $key => $examId) {
	    $examData[$i]['examId'] = $examId;
	    $examData[$i]['examCutOff'] = $this->input->post('examRequiredCutOff'.$examId);
	    $examData[$i]['examComments'] = $this->input->post('examComments'.$examId);	    
	    $i++;
	}
	$data['examsRequiredDataArray'] = $examData;
	$customExam = $this->input->post('customExam');
	$i = 0;
	unset($examData);
	foreach($customExam as $key => $examName) {
	    if($examName == "") {
		continue;
	    }
	    $examData[$i]['examName'] = $examName;
	    $examData[$i]['examCutOff'] = $this->input->post('customExamCutOffs'.$key);
	    $examData[$i]['examComments'] = $this->input->post('customExamComments'.$key);	    
	    $i++;
	}
	$data['examsRequiredCustomDataArray'] = $examData;

	$data['averageWorkExp'] = $this->input->post('averageWorkExp');
	$data['averageBachelorsGPA'] = $this->input->post('averageBachelorsGPA');
	$data['averageClass12Percentage'] = $this->input->post('averageClass12Percentage');
	$data['averageGMATScore'] = $this->input->post('averageGMATScore');
	$data['averageAge'] = $this->input->post('averageAge');
	$data['internationalStudentsPercentage'] = $this->input->post('internationalStudentsPercentage');
	
	$data['feesPageLink'] = $this->input->post('feesPageLink_'.$formName);
	$data['tutionFee'] = $this->input->post('tutionFee_'.$formName);
	$data['tutionFeeCurrency'] = $this->input->post('tutionFeeCurrency_'.$formName);
	$data['scholarshipLinkCourseLevel'] = $this->input->post('scholarshipLinkCourseLevel');
	$data['scholarshipLinkDeptLevel'] = $this->input->post('scholarshipLinkDeptLevel');
	$data['scholarshipLinkUniversityLevel'] = $this->input->post('scholarshipLinkUniversityLevel');
	
	$data['careerServiceWebsiteLink'] = $this->input->post('careerServiceWebsiteLink_'.$formName);
	$data['percentageEmployed'] = $this->input->post('percentageEmployed');
	$data['avgSalary'] = $this->input->post('avgSalary');
	$data['avgSalaryCurrency'] = $this->input->post('avgSalaryCurrency');
	$data['popularSectors'] = $this->input->post('popularSectors');
	$data['internships'] = $this->input->post('internships');
	$data['internshipsLink'] = $this->input->post('internshipsLink');	
	$data['recruitingCompaniesArray'] = $this->input->post('recruitingCompanies');
	$data['facultyInfoLink'] = $this->input->post('facultyInfoLink');
	$data['alumniInfoLink'] = $this->input->post('alumniInfoLink');
	$data['faqLink'] = $this->input->post('faqLink');
	
	$data['userComments'] = $this->input->post('userComments_'.$formName);
	$data['listingStatus'] = $this->input->post('listingStatus');
	if($data['listingStatus'] == 'live') {
	    $data['listingStatus'] = ENT_SA_PRE_LIVE_STATUS;
	}
	
	$existingBrochureUrl = $this->input->post('existingBrochureUrl');
	$data['existingBrochureUrl'] = "";
	if($existingBrochureUrl != '') {
	    $data['existingBrochureUrl'] = $existingBrochureUrl;
	}
	
	return $data;
    }
    
    public function addSnapshotCourseForm()
    {
	// get the user data
	$this->usergroupAllowed = array('saAdmin');
	$displayData = $this->cmsAbroadUserValidation();
	
	$displayData['formName'] 	= ENT_SA_FORM_ADD_SNAPSHOT_COURSE;
	$displayData['selectLeftNav']   = "SNAPSHOT_COURSE";
	
	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
	$displayData['lastAddedOn'] = $this->abroadPostingLib->getSnapshotLastAddedOnDate();
	$displayData['courseType'] = $this->abroadCommonLib->getAbroadCourseLevels();
	$this->_populateAbroadCountries($displayData);
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    public function editSnapshotCourseForm($courseId)
    {
	// get the user data
	$this->usergroupAllowed = array('saAdmin');
	$displayData = $this->cmsAbroadUserValidation();
	
	$displayData['formName'] 	= ENT_SA_FORM_EDIT_SNAPSHOT_COURSE;
	$displayData['selectLeftNav']   = "SNAPSHOT_COURSE";
	
	$displayData['courseId'] = $courseId;
	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
	$displayData['lastAddedOn'] = $this->abroadPostingLib->getSnapshotLastAddedOnDate();
	$displayData['courseType'] = $this->abroadCommonLib->getAbroadCourseLevels();
	$this->_populateAbroadCountries($displayData);
	
	$displayData['courseData'] = $this->abroadPostingLib->getSnapshotCourseDataForEdit($courseId);
	$universityDetails = $this->abroadCommonLib->getUniversityDetails($displayData['courseData']['university_id'], ENT_SA_PRE_LIVE_STATUS);
	$displayData['universityName'] = $universityDetails['name'];
	$subCatId = $displayData['courseData']['category_id'];
	
	$userModel = $this->load->model('user/usermodel');
	$userData = $userModel->getUserById($displayData['courseData']['lastModifiedBy']);
	$displayData['lastModifiedBy'] = $userData->getDisplayName();
	$displayData['lastModified'] =  date("d/m/Y",strtotime($displayData['courseData']['last_modified']));
	
	$builderObj	= new CategoryBuilder;
	$repoObj 	= $builderObj->getCategoryRepository();
	$subCatObj 	= $repoObj->find($subCatId);
	$displayData['parentCat'] = $subCatObj->getParentId();
	
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

public function addBulkSnapshotCourseForm()
    {
    	
    	// get the user data
    	$this->usergroupAllowed = array('saAdmin');
    	$displayData = $this->cmsAbroadUserValidation();
    	$UserId = $displayData['userid'];
        $comments= trim($this->input->post('comment'));
       
        $abroadCMSModelObj = $this->load->model('listingPosting/abroadcmsmodel');
        $LastUploadedData =  $abroadCMSModelObj->getbulkSnapshotAdditionTrackingEntry();
        if(!empty($LastUploadedData)){
        $UserModel = $this->load->model('user/usermodel');
        $UserData = $UserModel->getUserById($LastUploadedData['userId']);
        $displayData['lastuploadedBy'] = $UserData->getDisplayName();
        $displayData['lastUploaded'] =  date("d/m/Y",strtotime($LastUploadedData['updatedAt']));
        }
		$countries = $abroadCMSModelObj->getAbroadCountriesId();
			
        $error_msg;
        if(!empty($_FILES["file"])) {
        if($_FILES["file"]["type"] != "text/csv" && $_FILES["file"]["type"] !="application/csv" && $_FILES["file"]["type"] !="application/vnd.ms-excel") {
    	$error_msg = "Please upload a file in above mentioned format.";
    	} else{
    	$fileName = $_FILES["file"]["name"];
        $file = fopen($_FILES["file"]["tmp_name"],"r");
        $uploadedData ;
        $noOfSnapshotCoursesInserted = 0;
        $count = 1;
        $snapShotTitle;
        $errorEntries;
        $traverseCSV = TRUE; 
  		while(! feof($file))
   		{  $snapShotCoursesdata = fgetcsv($file,0,"|");
   		
   		  if($count==1)
   		  {
   		  	if(!empty($snapShotCoursesdata)){
   		  		$noOfTitle = 0;
   		  		foreach($snapShotCoursesdata as $snapTitleColumn)
   		  		{
   		  			
   		  			$columnTitle = trim(strtoupper($snapTitleColumn));
   		  			
   		  			switch($columnTitle)
   		  			{
   		  				case "COUNTRY ID" :
   		  				$snapShotTitle[]= "COUNTRY ID";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  			    case "UNIVERSITY NAME" :
   		  			    $snapShotTitle[]= "UNIVERSITY NAME";
   		  			    $noOfTitle++;
   		  				break;
   		  				
   		  				case "COURSE EXACT NAME" :
   		  				$snapShotTitle[]= "COURSE EXACT NAME";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  				case "COURSE TYPE" :
   		  				$snapShotTitle[]= "COURSE TYPE";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  				case "PARENT CATEGORY" :
   		  				$snapShotTitle[]= "PARENT CATEGORY";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  				case "CHILD CATEGORY" :
   		  				$snapShotTitle[]= "CHILD CATEGORY";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  				case "COURSE WEBSITE LINK" :
   		  				$snapShotTitle[]= "COURSE WEBSITE LINK";
   		  				$noOfTitle++;
   		  				break;
   		  				
   		  				default :
   		  				$traverseCSV = false;
   		  				$error_msg = "Invalid File or First Line in csv is not according to format.<BR> Please use '|' as a seprator";
   		  				      
   		  			}
   		  			
   		  			
   		  		}
   		  		if($noOfTitle != 7)
   		  		{
   		  		$error_msg = "Invalid File or First Line in csv is not according to format.<BR> Please use '|' as a seprator";
   		  		$traverseCSV = FALSE;
   		  		}	
   			}
   		  	else {
   		  		$error_msg = "Invalid File or First Line in csv is not according to format.<BR> Please use '|' as a seprator";
   		  		$traverseCSV = FALSE;
   			  	}
   		  	
   		  	
   		}
         if($traverseCSV && ($count > 1)) {
         if(count($snapShotCoursesdata) == 7)
         {
         	$COUNTRY_ID = trim($snapShotCoursesdata[array_search("COUNTRY ID", $snapShotTitle)]);
         	$UNIVERSITY_NAME = trim($snapShotCoursesdata[array_search("UNIVERSITY NAME", $snapShotTitle)]);
         	$COURSE_EXACT_NAME = trim($snapShotCoursesdata[array_search("COURSE EXACT NAME", $snapShotTitle)]);
         	$COURSE_TYPE = trim($snapShotCoursesdata[array_search("COURSE TYPE", $snapShotTitle)]);
         	$PARENT_CATEGORY = trim($snapShotCoursesdata[array_search("PARENT CATEGORY", $snapShotTitle)]);
         	$CHILD_CATEGORY = trim($snapShotCoursesdata[array_search("CHILD CATEGORY", $snapShotTitle)]);
         	$COURSE_WEBSITE_LINK = trim($snapShotCoursesdata[array_search("COURSE WEBSITE LINK", $snapShotTitle)]);
          if(
    		 empty($COUNTRY_ID)
    		 || empty($UNIVERSITY_NAME)
    		 || empty($COURSE_EXACT_NAME)
    		 || empty($COURSE_TYPE)
    		 || empty($PARENT_CATEGORY)
    		 || empty($CHILD_CATEGORY)
    		 || empty($COURSE_WEBSITE_LINK)
           )
          {	  	
         	
          	$errorEntries[$count]["error_msg"] = "All the column should have value.";
          	$errorEntries[$count]["data"] = $snapShotCoursesdata;
          }else{	
          	
        	 $key= array_search("Country Id", $snapShotTitle);
       		 if(!empty($snapShotCoursesdata)){
   		
   		 		if(in_array(trim($snapShotCoursesdata[array_search("COUNTRY ID", $snapShotTitle)]),explode(',',$countries['countriesId']))){
        		$uploadedData[$snapShotCoursesdata[array_search("COUNTRY ID", $snapShotTitle)]][trim($snapShotCoursesdata[array_search("UNIVERSITY NAME", $snapShotTitle)])] [$count] = array(
        			"Country_Id" => trim($snapShotCoursesdata[array_search("COUNTRY ID", $snapShotTitle)]),
        			"University_Name" => trim($snapShotCoursesdata[array_search("UNIVERSITY NAME", $snapShotTitle)]),	
        			"Course_Exact_Name" =>	trim($snapShotCoursesdata[array_search("COURSE EXACT NAME", $snapShotTitle)]),
        			"Course_Type"	 => trim($snapShotCoursesdata[array_search("COURSE TYPE", $snapShotTitle)]),
        			"Parent_Category" => trim($snapShotCoursesdata[array_search("PARENT CATEGORY", $snapShotTitle)]),
        		    "Child_Category" => trim($snapShotCoursesdata[array_search("CHILD CATEGORY", $snapShotTitle)]),
        			"Course_website_link" => trim($snapShotCoursesdata[array_search("COURSE WEBSITE LINK", $snapShotTitle)])
        		);
        		}else {
        		$errorEntries[$count]["error_msg"] = "Invalid Country Id";
        		$errorEntries[$count]["data"] = $snapShotCoursesdata;
        		}
   		    }
           }
         }
         else{
         	$errorEntries[$count]["error_msg"] = "Invalid no of Values in Row";
         	$errorEntries[$count]["data"] = $snapShotCoursesdata;
         	}
         }
         $count++;
   		}
   		
   		$result = $this->abroadPostingLib->addBulkSnapshotCourse($uploadedData,$UserId,$comments);
      	fclose($file);
      	if(empty($errorEntries)){
      		$errorEntries = $result['errorEntries'];
      	}elseif(!empty($result['errorEntries'])){
      		$errorEntries =  $errorEntries + $result['errorEntries'];
      	}
  
          $noOfSnapshotCoursesInserted = $result['noOfSnapshotCoursesInserted'];
          unset($result);
          }
        }
         else{
         	$error_msg = "Please upload a CSV File";
         }
         $displayData['showErrorLogLink'] = count($errorEntries) >=1 ? true : false ; 
         $logFilePath = "/var/www/html/shiksha/mediadata/text/".$fileName."_log";
         unlink($logFilePath); //delete log file if already exists
         $noOfCoursesFailed = 0; 
        foreach($errorEntries as $errorLine => $errorEntry)
         { $errorString = " Line No : ".$errorLine;
         	foreach($errorEntry['data'] as $errorEntryData)
         	{
         		$errorString = $errorString."|".$errorEntryData;
         	}
         	$errorString = $errorString."| Error Message - ".$errorEntry['error_msg']."\n";
         	error_log($errorString,3,"/var/www/html/shiksha/mediadata/text/".$fileName."_log");
         	$noOfCoursesFailed ++;
         	
         }	
          if($noOfCoursesFailed < 1 && $noOfSnapshotCoursesInserted < 1 && $traverseCSV){
          	$error_msg = "No Data Found to upload.";
          }
            $displayData['noOfCoursesFailed'] = $noOfCoursesFailed; 
        	$displayData['uploadErrorMsg'] = $error_msg;
        	$displayData['noOfSnapshotCoursesInserted'] = $noOfSnapshotCoursesInserted;
        	$displayData['formName'] 	= ENT_SA_FORM_ADD_BULK_SNAPSHOT_SOURES;
        	$displayData['fileName'] = $fileName;
        	$displayData['selectLeftNav']   = "SNAPSHOT_COURSE";
        	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
       
     }
   
     public function downloadBulkSnapshotUploadFile($filename) {
      
     	$file = '/var/www/html/shiksha/mediadata/text/'.$filename;
     	
     	if (file_exists($file)) {
     		header('Content-Description: File Transfer');
     		header('Content-Type: application/csv');
     		header('Content-Disposition: attachment; filename='.basename($file));
     		header('Expires: 0');
     		header('Cache-Control: must-revalidate');
     		header('Pragma: public');
     		header('Content-Length: ' . filesize($file));
     		ob_clean();
     		flush();
     		readfile($file);
     		exit;
     	}	
     }   


    
    public function getMainAbroadCategories() {
	$this->load->builder('CategoryBuilder','categoryList');
	$categoryBuilder = new CategoryBuilder;
	$repository = $categoryBuilder->getCategoryRepository();
	$mainCategories =  $repository->getSubCategories(1,'newAbroad');   // Main Abroad Categories..
	return $mainCategories;
    }
    
    function submitSnapshotCourse()
    {
		
	$this->usergroupAllowed = array('saAdmin');
	$userDetails = $this->cmsAbroadUserValidation(true);
	
	$userValidation = $this->cmsAbroadUserValidation(true);
	if(!empty($userValidation['error']) && !empty($userValidation['error_type'])) {
		echo json_encode($userValidation);
		return;
	}
	
	$snapshotData['country_id'] 	= $this->input->post('countryId');
	$snapshotData['university_id'] 	= $this->input->post('universityId');
	$snapshotData['course_name'] 	= trim($this->input->post('courseName'));
	$snapshotData['course_type'] 	= $this->input->post('courseType');
	$snapshotData['category_id'] 	= $this->input->post('childCatId');
	$snapshotData['website_link']	= $this->input->post('courseWebsite');
	$snapshotData['comments'] 	= $this->input->post('comment');
        
	foreach($snapshotData as $data)
	{
	    if(empty($data))
	    {
		$resp['error']['message'] = "Please fill all the mandatory fields.";
		echo json_encode($resp);
		return;
	    }
	}
	$snapshotData['action'] = $this->input->post('action');
	
	if($snapshotData['action'] == 'edit') {
	    $snapshotData['course_id'] = $this->input->post('courseId');
	    $snapshotData['created'] = $this->input->post('created');
	    $snapshotData['createdBy'] = $this->input->post('createdBy');
	}
	else {
	    $snapshotData['createdBy'] = $userDetails['userid'];
	}
	
	$snapshotData['lastModifiedBy'] = $userDetails['userid'];
	$result = $this->abroadPostingLib->addEditSnapshotCourse($snapshotData);
	return $result;
    }
    
    function checkAvailabilitySnapshotCourse()
    {
	$checkData['countryId']		= $this->input->post('countryId');
	$checkData['universityId']	= $this->input->post('universityId');
	$checkData['courseName']	= $this->input->post('courseName');
	$checkData['courseId']		= $this->input->post('courseId');
	$checkData['courseType']	= $this->input->post('courseType');
	
	$result = $this->abroadPostingLib->checkAvailabilitySnapshotCourse($checkData);
	
	if($result)
	{
	    $resp['error']['message'] = "Course name already exists. Please enter a different name.";
	    echo json_encode($resp);
	    return;
	}
	else
	{
	    $resp['message'] = "Course name available.";
	    echo json_encode($resp);
	    return;
	}
    }
    
    private function _populateAbroadCountries(& $displayData)
    {
	$countries = $this->locationRepository->getAbroadCountries();
	//sort countries by name ascending order
	usort($countries,function($c1,$c2){
	    return (strcasecmp($c1->getName(),$c2->getName()));
	});
	$displayData['abroadCountries'] = $countries;
    }
    
    /**
    * Purpose : View SnapShot Courses
    * Params  :	none
    * Author  : Abhinav
    */
    public function viewSnapshotCourseListing()
    {
	$this->usergroupAllowed = array('saAdmin');
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get SnapShot Course And PageNo.
	$snapshotCourse	= $this->input->get("snapshotCourse");
	
	// If SnapShot Course is Not Filtered then show all Courses
	$snapshotCourse	= $snapshotCourse?$snapshotCourse:"";
	if($snapshotCourse=='Select Course'){
	    $snapshotCourse="";
	}
	
	//Forming Relative URL
	$relativeUrl =	"/listingPosting/AbroadListingPosting/viewSnapshotCourseListing";
	if($snapshotCourse != ""){
	    $relativeUrl .="/?snapshotCourse=".$snapshotCourse;
	}
	
	//Loading Libraries for Pagination
	$this->load->library('listingPosting/Paginator');
	$displayData['paginator']  = new Paginator($relativeUrl);
	
	// Get Lower Limit and Rows Per Page
	$lowerlimit = $displayData['paginator']->getLimitOffset();
        $rowsPerPage = $displayData['paginator']->getLimitRowCount();
	
	// model call for snapshot courses data
	$this->abroadModel = new abroadcmsmodel();
	$snapshotCourseArr = $this->abroadModel->getSnapshotCourse($snapshotCourse,$lowerlimit,$rowsPerPage);
	$totalRows = array_pop($snapshotCourseArr);
	
	if(!empty($snapshotCourseArr)){
	    
	    //Getting Unique-Ids for Sub-Category for fetched data
	    foreach($snapshotCourseArr as $snapshotCourseObj) {
		$snapShotCategoryIds[] = $snapshotCourseObj['category_id'];
	    }
	    array_unique($snapShotCategoryIds);
	    
	    //Loading CategoryBuilder for getting CategoryRepository
	    $this->load->builder('CategoryBuilder','categoryList');
	    $categoryBuilder = new CategoryBuilder;
	    $categoryRepository = $categoryBuilder->getCategoryRepository();
	    
	    //fetch multiple objects for sub-category Ids
	    $snapShotCategoryIds = $categoryRepository->findMultiple($snapShotCategoryIds);
	    
	    //Getting Unique-Ids for Parent-Category for fetched data	
	    foreach($snapShotCategoryIds as $snapShotCategoryId){
		$parentCategoryIds[] = $snapShotCategoryId->getParentId();
	    }
	    array_unique($parentCategoryIds);
	    
	    //fetch multiple objects for parent-category Ids
	    $parentCategoryIds = $categoryRepository->findMultiple($parentCategoryIds);
	    
	    //Adding CategoryName and ParentCategoryName in View-Data
	    foreach($snapshotCourseArr as &$snapshotCourseObj){
		$snapshotCourseObj['subCategory_name'] = $snapShotCategoryIds[$snapshotCourseObj['category_id']]->getName();
		$snapshotCourseObj['parentCategory_name'] = $parentCategoryIds[$snapShotCategoryIds[$snapshotCourseObj['category_id']]->getParentId()]->getName();
		
		//date formatting
		$snapshotCourseObj['date'] = date("j M Y",strtotime($snapshotCourseObj['date']));
	    }
	}
	
	//Setting Total RowCount for Pagination
	$displayData['paginator']->setTotalRowCount($totalRows['totalRows']);
	
	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_VIEW_LISTING_SNAPSHOT_COURSE;
	$displayData['selectLeftNav']   = "SNAPSHOT_COURSE";
	$displayData['snapshotCourseArr'] = $snapshotCourseArr;
	if($snapshotCourse == ''){
	    $snapshotCourse='Select Course';
	}
	$displayData['snapshotCourse']	= $snapshotCourse;
	$displayData['totalRecords']	= $totalRows['totalRows'];
	
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    /**
    * Purpose : none
    * Params  :	none
    * Author  : none
    */
    public function viewRankingListing()
    {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get RankName And PageNo.
	$rankName = ($this->input->get("searchRank"))?$this->input->get("searchRank"):"";
	$status = ($this->input->get("status"))?$this->input->get("status"):"";
	$rowsPerPage = ($this->input->get("resultPerPage"))?$this->input->get("rowsPerPage"):"";
	
	if($rankName == 'Search Ranking'){
	    $rankName = "";
	}
	
	// prepare the query parameters coming
	$queryParams	= "";
	$queryParams   .= ($rankName ? "&searchRank=".$rankName : "");
	$queryParams   .= ($resultPerPage  ? "&resultPerPage=".$resultPerPage : "");
	$queryParams    = $queryParams 	   ? $queryParams : "";
	
	//Forming Relative URL
	$formURL = ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_RANKING."/";
	$relativeUrl = ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_RANKING."/?status=".$status.$queryParams;
	
	//Loading Libraries for Pagination
	$this->load->library('listingPosting/Paginator');
	$displayData['paginator']  = new Paginator($relativeUrl);
	
	// Get Lower Limit and Rows Per Page
	$lowerlimit = $displayData['paginator']->getLimitOffset();
        $rowsPerPage = $displayData['paginator']->getLimitRowCount();
	
	// library call for rank data
	$rankResultArr = $this->abroadPostingLib->getRankingDetails($rankName,$status,$lowerlimit,$rowsPerPage);
	$rankArr = $rankResultArr['rank_data'];
	$totalRows = $rankResultArr['total_count'];
	$tabsArr = $rankResultArr['tabs'];
	
	//check if result-set obtained is not empty
	if(!empty($rankArr)){
	    foreach($rankArr as $rankRow){
		if($rankRow['subcategory_id']){
		    $subCategoryIds[] = $rankRow['subcategory_id'];
		}
		if($rankRow['country_id']){
		    $countryIds[] = $rankRow['country_id'];
		}
	    }
	    if(!empty($subCategoryIds)){
		
		//Loading CategoryBuilder for getting CategoryRepository
		$this->load->builder('CategoryBuilder','categoryList');
		$categoryBuilder = new CategoryBuilder;
		$categoryRepository = $categoryBuilder->getCategoryRepository();
		
		//fetch multiple objects for sub-category Ids
		$categoryIds = $categoryRepository->findMultiple($subCategoryIds);
		
		//retriving parent categoryIds
		foreach($categoryIds as $categoryIdObj){
		    $parentCategoryIds[] = $categoryIdObj->getParentId();
		}
		
		//unique parent categoryIds
		$parentCategoryIds = array_unique($parentCategoryIds);
		
		//fetch multiple objects for parent-category Ids
		$parentCategoryIds = $categoryRepository->findMultiple($parentCategoryIds);
	    }
	    
	    //Get Country Details
	    $countryIds = $this->abroadCmsModelObj->getAbroadCountries($countryIds);
	    
	    //get LDB Course Mapping Data
	    $ldbCourseMapping = $this->abroadCommonLib->getAbroadMainLDBCourses();
	    
	    
	    foreach($rankArr as &$rankRowObj){
		$rankRowObj['category_name'] = ($rankRowObj['subcategory_id'])?$parentCategoryIds[$categoryIds[$rankRowObj['subcategory_id']]->getParentId()]->getName():"";
		$rankRowObj['country_name'] = ($rankRowObj['country_id'])?$countryIds[$rankRowObj['country_id']]['name']:"";
		if(!$rankRowObj['category_name']){
		    foreach($ldbCourseMapping as $ldbCourse){
			if($ldbCourse['SpecializationId'] == $rankRowObj['ldb_course_id']){
			    $rankRowObj['category_name'] = $ldbCourse['CourseName'];
			    break;
			}
		    }
		}
		$rankRowObj['last_date'] = date("j M Y",strtotime($rankRowObj['last_date']));
		
	    }
	}
	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_VIEW_LISTING_RANKING;
	$displayData['selectLeftNav']   = "RANKING";
	$displayData['rankArr']   	= $rankArr;
	$displayData['searchTerm'] 	= $rankName;
	$displayData['formURL'] 	= $formURL;
	$displayData['displayDataStatus'] = $status;
	$displayData['totalResultCount']  = $tabsArr;
	$displayData['queryParams'] 	  = $queryParams;
	//Setting Total RowCount for Pagination
	$displayData['paginator']->setTotalRowCount($totalRows[0]['totalRows']);
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }    

    /**
    * Purpose : none
    * Params  :	none
    * Author  : none
    */
    public function advanceSearchUniversityForm()
    {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();

	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_FORM_ADVANCE_SEARCH_UNIVERSITY;
	$displayData['selectLeftNav']   = "ADVANCE_SEARCH";
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);

    }
    
    /**
    * Purpose : render addUniversityForm
    * Params  :	none
    * Author  : SRB
    */
    public function addUniversityForm()
    {
	// get the user data
	$this->usergroupAllowed = array('saAdmin','saCMS', 'cms');
	$displayData = $this->cmsAbroadUserValidation();

	// prepare the display data here
	$displayData['formName'] 	= ENT_SA_FORM_ADD_UNIVERSITY;
	$displayData['selectLeftNav']   = "UNIVERSITY";
	//countries required for country drop down in the university form
	$this->_populateAbroadCountries($displayData);
	//get currencies
	$displayData['currencies'] = $this->abroadCommonLib->getCurrencyList();
	//_p($displayData);
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

    /**
    * Purpose : render editUniversityForm
    * Params  :	none
    * Author  : SRB
    */
    public function editUniversityForm()
    {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	//get the univ id
	$universityId = $this->input->get("uniId");
	$displayData['formData'] = $this->abroadCommonLib->getUniversityDataForEditMode($universityId);
	// prepare the display date here
	$displayData['formName'] 	= ENT_SA_FORM_EDIT_UNIVERSITY;
	$displayData['selectLeftNav']   = "UNIVERSITY";
	//countries required for country drop down in the university form
	$this->_populateAbroadCountries($displayData);
	//get currencies
	$displayData['currencies'] = $this->abroadCommonLib->getCurrencyList();
	//_p($displayData['formData']);
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

    /**
    * Purpose : Check if city exists or not (for ajax purpose)
    * Params  :	none
    * Author  : Romil Goel
    */
    public function isCityExists()
    {
	// get post parameters
	$countryId = $this->input->post("country");
	$stateId   = $this->input->post("state");
	$cityName  = $this->input->post("city");

	// data massaging
	$countryId = isset($countryId) ? $countryId : 0;
	$stateId   = isset($stateId)   ? $stateId   : 0;
	$cityName  = isset($cityName)  ? $cityName  : '';
	
	// call library function to check if the provided city exists or not
	$cityAlreadyExistsFlag = $this->abroadCommonLib->isCityExists($cityName, $countryId, $stateId);
	
	echo $cityAlreadyExistsFlag;
    }
    
    /**
    * Purpose : Save city(s) in database
    * Params  :	none
    * Author  : Romil Goel
    */
    public function addCityAction()
    {
	$this->usergroupAllowed = array('saAdmin');
	$userData = $this->cmsAbroadUserValidation();
	
	// get the post paramaters
	$countryArr 	= $this->input->post("countryPL");
	$stateArr   	= $this->input->post("statePL");
	$cityTierArr   	= $this->input->post("cityTierPL");
	$cityArr  	= $this->input->post("cityTB");
	
	// save each city
	foreach( $countryArr as $key=>$countryId)
	{
	    $stateId  = empty($stateArr[$key]) ? -1 : $stateArr[$key];
	    $cityTier = empty($cityTierArr[$key]) ? 1 : $cityTierArr[$key];
	    
	    $this->abroadCommonLib->addCity($countryId, $stateId, trim($cityArr[$key]), $userData['userid'], $cityTier );
	}
	
	// redirect the user to the view city page
	header('Location:'.ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_CITY."?msgType=1");
    }
        
    public function getUniversitiesForCountry() {	
		$countryId 		= $_POST['countryId'];
		$excludeCollege		= $_POST['excludeCollege'];
		$abroadCMSModelObj 	= $this->load->model('listingPosting/abroadcmsmodel');
		if($excludeCollege == 1)
		{
		    $universities 	= $abroadCMSModelObj->getUniversitiesForCountry($countryId,$excludeCollege);
		}
		else
		{
		    $universities 	= $abroadCMSModelObj->getUniversitiesForCountry($countryId);
		}
		$dataArray = array();
		foreach($universities as $key => $university) {
			$dataArray[$university['university_id']] = $university['university_name'];
		}
		echo json_encode($dataArray);
    }

	public function checkDepartmentNameForUniquenessInUniversity() {
		$department = array();
		$departmentName 		= trim($this->input->post('departmentName'));
		$universityId 			= trim($this->input->post('universityId'));
		$departmentId 			= trim($this->input->post('departmentId'));
		if(empty($departmentName) || empty($universityId)){
			$department['error'] = "true";
			echo json_encode($department);
			return;
		}
		$abroadCMSModelObj 		= $this->load->model('listingPosting/abroadcmsmodel');
		$department 			= $this->abroadCmsModelObj->checkDepartmentNameForUniquenessInUniversity($departmentName, $universityId, array('draft', ENT_SA_PRE_LIVE_STATUS), $departmentId);
		echo json_encode($department);
	}
	
	public function editDepartmentForm($departmentId = NULL)
    {
		$this->init();
		$displayData = $this->cmsAbroadUserValidation();
		$departmentDetails 					= $this->abroadPostingLib->getDepartmentEditInformation($departmentId);
		$displayData['formName'] 			= ENT_SA_FORM_EDIT_DEPARTMENT;
		$displayData['selectLeftNav']   	= "DEPARTMENT";
		$displayData['action']   			= "EDIT";
		$displayData['department_details'] 	= $departmentDetails;
		$this->load->view('listingPosting/abroad/abroadCMSOverview', $displayData);
    }
	
	public function addDepartmentForm()
    {
		$this->init();
		$displayData = $this->cmsAbroadUserValidation();
		$displayData['university_from_url'] = "false";
		
		$this->_populateAbroadCountries($displayData);
		$universityId = $this->input->get('uniId');
		if(isset($universityId) && !empty($universityId)) {
			$universityDetails = $this->abroadCommonLib->getUniversityDetails($universityId, ENT_SA_PRE_LIVE_STATUS);
			if(!empty($universityDetails)) {
				$universityLocationInfo = $this->abroadCmsModelObj->getUniversityLocationInfo($universityId);
				$country = $this->abroadCmsModelObj->getAbroadCountries($universityLocationInfo['country_id']);
				$universityDetails['country_id'] 	= $universityLocationInfo['country_id'];
				$universityDetails['country_name'] 	= $country[$universityLocationInfo['country_id']]['name'];
				$displayData['university_from_url'] = "true";
				$displayData['university_details'] = $universityDetails;
			}
		}
		// prepare the display date here
		$displayData['formName'] 		= ENT_SA_FORM_ADD_DEPARTMENT;
		$displayData['selectLeftNav']   = "DEPARTMENT";
		$displayData['action']   		= "ADD";
		$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
	
	public function postDepartmentForm() {
		$userValidation = $this->cmsAbroadUserValidation(true);
		if(!empty($userValidation['error']) && !empty($userValidation['error_type'])) {
			echo json_encode($userValidation);
			return;
		}
		
		$params = array();
		$params['countryId'] 					= trim($this->input->post('countryId'));
		$params['universityId'] 				= trim($this->input->post('universityId'));
		$params['departmentWebsite'] 			= trim($this->input->post('departmentWebsite'));
		$params['accreditationDetails'] 		= trim($this->input->post('accreditationDetails'));
		$params['schoolName']					= trim($this->input->post('schoolName'));
		$params['schoolAcronym'] 				= trim($this->input->post('schoolAcronym'));
		$params['schoolDescription'] 			= trim(str_replace("&lt;iframe","<iframe",str_replace("&gt;&lt;/iframe","></iframe",$this->input->post("schoolDescription"))));
		$params['contactPersonName'] 			= trim($this->input->post('contactPersonName'));
		$params['contactEmail'] 				= trim($this->input->post('contactEmail'));
		$params['contactPhoneNo'] 				= trim($this->input->post('contactPhoneNo'));
		$params['facultyPageUrl'] 				= trim($this->input->post('facultyPageUrl'));
		$params['alumniPageUrl'] 				= trim($this->input->post('alumniPageUrl'));
		$params['fbPageUrl'] 					= trim($this->input->post('fbPageUrl'));
		$params['action'] 						= trim($this->input->post('action')) == 'EDIT' ? 'EDIT' : 'ADD';
		$params['department_id'] 				= trim($this->input->post('department_id'));
		$params['userComments'] 				= trim($this->input->post('comments'));
		$params['userId'] 						= $userValidation['userid'];
		$btnPressed 							= trim($this->input->post('btnPressed'));
		$params['departmentSubmitDate'] 		= trim($this->input->post('submit_date'));
		
		if($params['action'] == 'ADD'){
			$params['department_id'] = Modules::run('common/IDGenerator/generateId', 'institute');
		}
		if($btnPressed == 'save') {
			$params['status'] = 'draft';
		} else if($btnPressed == 'publish'){
			$params['status'] = 'live';
		}
		
		$returnArray = array();
		if(( $params['action'] == 'ADD' || $params['action'] == 'EDIT') && $params['status'] == 'draft') {
			if(	empty($params['universityId']) ||
				empty($params['schoolName']) ||
				empty($params['department_id'])
			) {
			$returnArray['error'] 		= "true";
			$returnArray['error_type'] 	= "Please fill all the mandatory fields properly";
			echo json_encode($returnArray);
			return;
			}
		}
		
		if( $params['status'] == 'live') {
			if(
			   empty($params['universityId']) ||
			   empty($params['departmentWebsite']) ||
			   empty($params['schoolName']) ||
			   empty($params['department_id']) ||
			   empty($params['userComments']) ||
			   empty($params['schoolDescription'])) {
				$returnArray['error'] 		= "true";
				$returnArray['error_type'] 	= "Please fill all the mandatory fields properly";
				echo json_encode($returnArray);
				return;
			}
		}
		
		$highLowFieldValues 				= $this->abroadCommonLib->getDepartmentHighAndLowFields($params);
		$params['percentageCompletion'] 	= $this->abroadCommonLib->calculatePercentageCompletion($highLowFieldValues['high_field_values'], $highLowFieldValues['low_field_values']);
		$postingFlag = $this->abroadPostingLib->postDepartmentForm($params);
		if($postingFlag){
			$returnArray = array();
			$returnArray['success'] = "true";
		}
		echo json_encode($returnArray);
	}
    
    public function getDepartmentsForUniversity() {
	$universityId = $_POST['universityId'];
	$abroadCMSModelObj = $this->load->model('listingPosting/abroadcmsmodel');
	$institutes = $abroadCMSModelObj->getDepartmentsForUniversity($universityId);	
	
	$dataArray = array();
	foreach($institutes as $key => $institute) {
	    if($institute['is_dummy'] == 1){
		$dataArray[$institute['institute_id']] = "-1";
	    }
	    else{
		$dataArray[$institute['institute_id']] = $institute['institute_name'];
	    }
	}
	
	echo json_encode($dataArray);
    }   
    
    /**
    * Purpose : get cities for a country
    * Params  :	countryId (post)
    * Author  : SRB
    */
    public function getCitiesByCountry()
    {
	$countryId = $this->input->post('countryId');
	$cities = $this->abroadCommonLib->_getCitiesByCountry($countryId);
	$cityOptionHtml = "";
	foreach($cities as $city)
	{
	    $cityOptionHtml .= '<option value="'.$city['city_id'].'">'.$city['city_name'].'</option>';
	}
	echo  json_encode($cityOptionHtml);
    }
    
    /**
    * Purpose : get states for a country
    * Params  :	countryId (post)
    * Author  : SRB
    */
    public function getStatesByCountry()
    {
	$countryId = $this->input->post('countryId');
	$states = $this->abroadCommonLib->_getStatesByCountry($countryId);
	$stateOptionHtml = "";
	foreach($states as $state)
	{
	    $stateOptionHtml .= '<option value="'.$state['state_id'].'">'.$state['state_name'].'</option>';
	}
	echo  json_encode($stateOptionHtml);
    }
    
    /**
    * Purpose : get cities for a state
    * Params  :	stateId (post)
    * Author  : SRB
    */
    public function getCitiesByState()
    {
	$stateId = $this->input->post('stateId');
	$cities = $this->abroadCommonLib->_getCitiesByState($stateId);
	$cityOptionHtml = "";
	foreach($cities as $city)
	{
	    $cityOptionHtml .= '<option value="'.$city['city_id'].'">'.$city['city_name'].'</option>';
	}
	echo  json_encode($cityOptionHtml);
    }
    
    /**
    * Purpose : check if University exists by the same name 
    * Params  :	(univName)
    * Author  : SRB
    */
    function doesUniversityExists($univName,$univCountryId)
    {
	$univName = $this->input->post('univName');
	$univCountryId = $this->input->post('univCountry');
	$univId = $this->input->post('univId');
        echo json_encode($this->abroadCommonLib->doesUniversityExist($univName,$univCountryId,$univId ));
    }
    
    /**
    * Purpose : save University Form Data
    * Params  :	(post)
    * Author  : SRB
    */
    public function saveUniversityFormData()
    {
	// user data
	$userDetails = $this->cmsAbroadUserValidation();
	// app id for uploads kept 1 by default
	$appId = 1;
	
	$ListingClientObj = new Listing_client();
	$data = array();
	//get all data from form
	$data = $this->postDataForUniversity();
		
	//$data['editedBy'] = $userDetails['userid']; edit mode
	$data['createdBy'] = $userDetails['userid'];
	$data['group_to_be_checked'] = $userDetails['usergroup'];
	
	// perform university logo , images , youtube video link
	// let the upload happen even in case of edit mode(if no file was choosen, the upload wont take place anyways)
	$logoAndPhotosResp = $this->univLogoPhotoUpload('university','univLogo','univPictures');//instiLogoAndPanelUpload();
	// perform brochure validation
	if($data['univBrochureSavedLink']==""){ //this field wil be available when we save a form in edit mode, & brochure link is not changed
	    $requestBrochureResp = $this->listingBrochureUpload('university','univBrochureLink');
	    if(array_key_exists('Fail', $requestBrochureResp)) {
		    echo json_encode($requestBrochureResp);
		    exit;
	    }
	    $data['institute_request_brochure_link'] = $requestBrochureResp;
	}
	else{ // previously saved brochure link saved again.
	    $data['institute_request_brochure_link'] = $data['univBrochureSavedLink'];
	}
	
	$exitFlag = false;
	$logoPhotoRespArray = array();
	// if logo was not changed in edit mode, we will use the same logo url
	if($data['univLogoMediaUrl']!=""){
	    $data['logoArr']['url']= $data['univLogoMediaUrl'];
	}
	else{ //other wise the uploaded file will be saved
	    $data['logoArr'] = $logoAndPhotosResp['logoArr'];
	    if(isset($logoAndPhotosResp['logoArr']['error'])) {
		    $logoPhotoRespArray ["Fail"]['logo'] = 'Only '. $logoAndPhotosResp['logoArr']['error'];
		    $exitFlag = true;
	    }
	    if ((isset($logoAndPhotosResp['logoArr'])) && (count($logoAndPhotosResp['logoArr']) > 0)) {
    
		    $logoRespWidth = (int)$logoAndPhotosResp['logoArr']['width'];
		    $logoRespHeight = (int)$logoAndPhotosResp['logoArr']['height'];
    
		    if($logoAndPhotosResp['logoArr']['error'] != "")
		    {
			$logoPhotoRespArray["Fail"]['logo'] = $logoAndPhotosResp['logoArr']['error'];
			$exitFlag = true;
		    }
	    }
	}
	
	// incase of pictures since even one can be removed & new can be added
	$data['pictureArr'] = $logoAndPhotosResp['pictureArr'];
	
	
	if(isset($logoAndPhotosResp['pictureArr']['sizecheckerror'])){
		$logoPhotoRespArray ["Fail"]['photo'] = $logoAndPhotosResp['pictureArr']['sizecheckerror'];
		$exitFlag = true;
	}else if(isset($logoAndPhotosResp['pictureArr']['error'])) {
		$logoPhotoRespArray ["Fail"]['photo'] = 'Only '. $logoAndPhotosResp['pictureArr']['error'];
		$exitFlag = true;
	}
	//keep the media ids for old images as well in ($data['univPicturesMediaId])
	if($exitFlag) {
		echo json_encode($logoPhotoRespArray);
		exit;
	}
	// we have recreated original links from the saved ones hence , reuploading shouldn't be a problem
	$data['videoArr'] = $this->uploadVideoLinkSA("form_".$data["univActionType"],"videos",$data['univVideoLink']);
	//_p($data['videoArr']);
	$highLowFieldValues 	= $this->abroadCommonLib->getUniversityHighAndLowFields($data);
	$percentage_completion 	= $this->abroadCommonLib->calculatePercentageCompletion($highLowFieldValues['high_field_values'], $highLowFieldValues['low_field_values']);
	$data['profile_percentage_completion'] = $percentage_completion;
	$result = $this->abroadPostingLib->addEditUniversityData($data);
	echo $result ;
	
    }
    
    /*
     * function to upload media.. brochure,images,youtube videos..
     */
    function uploadVideoLinkSA($formId,$mediaType,$univVidLinks) {
	    $this->init();
	    $appId = 1;
	    $this->load->library('listing_client');
	    $ListingClientObj = new Listing_client();
	    // caption for file name
	    //$fileCaption= $this->input->post('fileNameCaption');
	    
	    //institute location id
	    //$institute_location_id = $this->input->post('institute_location_id');
	    $fileName = split("[/\\.]",$_FILES['univVideoLink']['name'][0]);
	    $fileExtension = $fileName[count($fileName) - 1];
	    $fileCaption .= $fileExtension == '' ? '' : '.'. $fileExtension;
	    $listingId = $this->input->post('listingId');
	    $listingType = $this->input->post('listingType');
	    $this->load->library('upload_client');
	    $uploadClient = new Upload_client();
	    $this->load->library('Listing_media_client');
	    $ListingMediaClientObj= new Listing_media_client();
	    error_log(print_r($_POST,true));
	    error_log(print_r($_FILES,true));
		

	    $mediaDataType = 'ytvideo';
	    $listingMediaType = 'videos';
	    $FILES = $univVidLinks;//$_POST['univVideoLink'];


	    $upload_forms = $uploadClient->uploadFile($appId,$mediaDataType,$FILES,array($fileCaption),-1, 'university','univVideoLink[]');
					   // uploadFile($appId,'image',$_FILES,$inst_logo,"-1","institute",'i_insti_logo');
	    $displayData =array();
	    if(is_array($upload_forms)) {
		    $updateListingMedia = null;
		    if($upload_forms['status'] == 1){
			    for($k = 0;$k < $upload_forms['max'] ; $k++){
				    //It will always be 1 :-). Added for future cases if multiple uploads will be asked in one go.
				    $reqArr = array();
				    $reqArr['mediaId']=$upload_forms[$k]['mediaid'];
				    $reqArr['mediaUrl']=$upload_forms[$k]['imageurl'];
				    $reqArr['mediaName']=$upload_forms[$k]['title'];
				    $reqArr['mediaThumbUrl']=$upload_forms[$k]['thumburl'];
				    $reqArr['institute_location_id'] = $institute_location_id;
				    $updateListingMedia = $ListingMediaClientObj->mapMediaContentWithListing($appId,$listingId,$listingType,$listingMediaType,base64_encode(json_encode($reqArr)));
				    $displayData[$upload_forms[$k]['mediaid']] = array(
										'fileId' => $reqArr['mediaId'],
										'fileName' => $fileCaption,
										'mediaType' => $mediaType,
										'fileUrl' => $reqArr['mediaUrl'],
										'fileThumbUrl' => $reqArr['mediaThumbUrl']
										);
			    }
		    }
	    } else {
		    $displayData['error'] = $upload_forms;
	    }
	    //error_log("displayData::::".print_r($displayData,true));
	    return ($displayData);
    }
    
    private function postDataForUniversity()
    {
	//receive form data
	$univFormData["oldSubmitDate"			] = $this->input->post("oldSubmitDate");
	$univFormData["oldUnivId"			] = $this->input->post("oldUnivId");
	$univFormData["oldUnivLocationId"		] = $this->input->post("oldUnivLocationId");
	$univFormData["univName"			] = $this->input->post("univName");
	$univFormData["univCountry"			] = $this->input->post("univCountry");
	$univFormData["univLogo"			] = $this->input->post("univLogo");
	$univFormData["univLogoMediaUrl"		] = $this->input->post("univLogoMediaUrl");
	$univFormData["univEstablishedYear"		] = $this->input->post("univEstablishedYear");
	$univFormData["univAcronym"			] = $this->input->post("univAcronym"); 
	$univFormData["univUSP"				] = str_replace("&lt;iframe","<iframe",str_replace("&gt;&lt;/iframe","></iframe",$this->input->post("univUSP")));
	$univFormData["instituteType1"			] = $this->input->post("instituteType1");
	$univFormData["instituteType2"			] = $this->input->post("instituteType2");
	$univFormData["univAffiliation"			] = $this->input->post("univAffiliation");
	$univFormData["univAccreditation"		] = $this->input->post("univAccreditation");
	$univFormData["univContactEmail"		] = $this->input->post("univContactEmail");
	$univFormData["univContactPhone"		] = $this->input->post("univContactPhone");
	$univFormData["univContactAddress"		] = $this->input->post("univContactAddress");
	$univFormData["univContactWebsite"		] = $this->input->post("univContactWebsite");
	$univFormData["univPictures"			] = $this->input->post("univPictures");
	$univFormData["univPicturesMediaId"		] = $this->input->post("univPicturesMediaId");
	$univFormData["univPicturesMediaUrl"		] = $this->input->post("univPicturesMediaUrl");
	$univFormData["univPicturesMediaThumbUrl"	] = $this->input->post("univPicturesMediaThumbUrl");
	$univFormData["univVideoLink"			] = array_values(array_filter($this->input->post("univVideoLink"),"trim")); 
	$univFormData["univFBPage"			] = $this->input->post("univFBPage");
	$univFormData["univWebLink"			] = $this->input->post("univWebLink");
	$univFormData["univState"			] = $this->input->post("univState");
	$univFormData["univCity"			] = $this->input->post("univCity");
	$univFormData["univAdmissionContact"		] = $this->input->post("univAdmissionContact");
	$univFormData["univDeptName"			] = $this->input->post("univDeptName");
	$univFormData["univDeptWebsite"			] = $this->input->post("univDeptWebsite");
	$univFormData["univAccomodationDetail"		] = str_replace("&lt;iframe","<iframe",str_replace("&gt;&lt;/iframe","></iframe",$this->input->post("univAccomodationDetail")));//html_entity_decode($this->input->post("univAccomodationDetail"));
	$univFormData["univAccomodationLink"		] = $this->input->post("univAccomodationLink");
	$univFormData["univLivingExpense"		] = $this->input->post("univLivingExpense"); 
	$univFormData["univCurrency"			] = $this->input->post("univCurrency");
	$univFormData["univLivingExpenseDescription"	] = $this->input->post("univLivingExpenseDescription");
	$univFormData["univLivingExpenseLink"		] = $this->input->post("univLivingExpenseLink");
	$univFormData["univBrochureLink"		] = $this->input->post("univBrochureLink");
	$univFormData["univBrochureSavedLink"		] = $this->input->post("univBrochureSavedLink"); 
	$univFormData["univCampusName"			] = $this->input->post("univCampusName");
	$univFormData["univCampusWebsite"		] = $this->input->post("univCampusWebsite");
	$univFormData["univCampusAddress"		] = $this->input->post("univCampusAddress");
	$univFormData["univIndianConsultant"		] = $this->input->post("univIndianConsultant");
	$univFormData["univInternationalStudentsLink"	] = $this->input->post("univInternationalStudentsLink");
	$univFormData["univUserComments"		] = $this->input->post("univUserComments");
	$univFormData["univSaveMode"			] = $this->input->post("univSaveMode");
	$univFormData["oldUnivSaveMode"			] = $this->input->post("oldUnivSaveMode");
	$univFormData["univActionType"			] = $this->input->post("univActionType");
	$univFormData["listings_main_id"		] = $this->input->post("listings_main_id");
	
	//_p($univFormData);
	return $univFormData;
    }
    
    /*
     * listingBrochureUpload
     * Function For uploading university e brochure
     * @access  private
     * @param   array $_POST
     * @param   array $_FILES
     * @param   $listing_type,$fieldName
     * @return  array
     * @ToDo
     */
    private function listingBrochureUpload($listing_type,$fieldName)
    { 
	// check if institute brochure has been uploaded
	if(array_key_exists($fieldName, $_FILES) && !empty($_FILES[$fieldName]['tmp_name'][0])) {
		$return_response_array = array();
		// load client library
		$this->load->library('upload_client');
		$uploadClient = new Upload_client();
		// get file data and type check
		$type_doc = $_FILES[$fieldName]['type']['0'];
		$type_doc = explode("/", $type_doc);
		$type_doc = $type_doc['0'];
		$type = explode(".",$_FILES[$fieldName]['name'][0]);
		$type = strtolower($type[count($type)-1]);
		// display error if type doesn't match with the required file types(University : pdf only)
		if(!in_array($type, array('pdf'))) {//,'jpeg','doc','jpg
			$return_response_array['Fail'][$fieldName] = "Only document of type .pdf allowed";//,.doc and .jpeg 
			return $return_response_array;
		}
		// all well, upload now
		if($type_doc == 'image') {
			$upload_array = $uploadClient->uploadFile($appId,'image',$_FILES,array(),"-1",$listing_type,$fieldName);
		} else {
			$upload_array = $uploadClient->uploadFile($appId,'pdf',$_FILES,array(),"-1",$listing_type,$fieldName);
		}
		// check the response from upload library
		if(is_array($upload_array) && $upload_array['status'] == 1) {
			$return_response_array = $upload_array[0]['imageurl'];
		} else {
			if($upload_array == 'Size limit of 50 Mb exceeded') {
				$upload_array = "Please upload a brochure less than 50 MB in size";	
			}
			$return_response_array['Fail'][$fieldName] = $upload_array;
		}
		return $return_response_array;
	} else {
		return "";
	}
   }
    
    /**
     * univLogoPhotoUpload
     * Function For Upload university Logo
     * @access  public
     * @param   array $_FILE, $logoFieldName, $pictureFieldName
     * @return  array univ Logo Array with 'removal' action information
     * @ToDo
     */
    function univLogoPhotoUpload($listing_type,$logoFieldName,$pictureFieldName){
	    $appId =1;
	    $logoArr = array(); //for logo
	    $photoArr = array();// for pictures
	    
	    $this->load->library('upload_client');
	    $uploadClient = new Upload_client();
	    
	    /******************************** Block to Upload univ Logo ***************************************/ 
	    $arrCaption = array( $this->input->post('univName'));
	    $univ_logo= array();
	    for($i=0;$i<count($_FILES[$logoFieldName]['name']);$i++){
		    $univ_logo[$i] = ($arrCaption[$i]!="")?mysql_escape_string($arrCaption[$i]):$_FILES[$logoFieldName]['name'][$i];
	    }
	    if(!(isset($_FILES[$logoFieldName]['tmp_name'][0]) && ($_FILES[$logoFieldName]['tmp_name'][0] != '')) ) //&& ($this->input->post('logoRemoved')==1))
	    {
		    $logoArr['thumburl'] = "";
	    }else if(isset($_FILES[$logoFieldName]['tmp_name'][0]) && ($_FILES[$logoFieldName]['tmp_name'][0] != ''))
	    {
		//before we upload, check for dimensions on the image file
		$imageDimension = getimagesize($_FILES[$logoFieldName]['tmp_name'][0]);
		if(!empty($imageDimension) && ($imageDimension[0]!=290 || $imageDimension[1]!=90))
		{
		        $logoArr['error'] = "Only 90 pixels of height and 290 pixels of width allowed for logo";
			$logoArr['thumburl'] = "";
		}
		else
		{
		    $i_upload_logo = $uploadClient->uploadFile($appId,'image',$_FILES,$univ_logo,"-1",$listing_type,$logoFieldName);
		    if($i_upload_logo['status'] == 1)
		    {
			    for($k = 0;$k < $i_upload_logo['max'] ; $k++)
			    {

				    $tmpSize = getimagesize($i_upload_logo[$k]['imageurl']);
				    list($width, $height, $type, $attr) = $tmpSize;
				    $logoArr['width']=$width;
				    $logoArr['height']=$height;
				    $logoArr['type']=$type;
				    $logoArr['mediaid']=$i_upload_logo[$k]['mediaid'];
				    $logoArr['url']=$i_upload_logo[$k]['imageurl'];
				    $logoArr['title']=$i_upload_logo[$k]['title'];
				    $logoArr['thumburl']=$i_upload_logo[$k]['imageurl'];
			    }
		    } else{
			    $logoArr['error'] = $i_upload_logo;
			    $logoArr['thumburl'] = "";
		    }
		}
	    }
	    
	    /************************************ Block to Upload univ pictures ***************************************/ 
	    $arrCaption .= "_image_";
	    $univ_pictures= array();
	    $pictureArr = array();
	    // remove blank file inputs
	    $_FILES[$pictureFieldName]['name'] 		= array_values(array_filter($_FILES[$pictureFieldName]['name'] 	,"trim"));
	    $_FILES[$pictureFieldName]['type'] 		= array_values(array_filter($_FILES[$pictureFieldName]['type'] 	,"trim"));
	    $_FILES[$pictureFieldName]['tmp_name'] 	= array_values(array_filter($_FILES[$pictureFieldName]['tmp_name'] ,"trim"));
	    $_FILES[$pictureFieldName]['error'] 	= array_values(array_filter($_FILES[$pictureFieldName]['error'] 	,"trim"));
	    $_FILES[$pictureFieldName]['size']		= array_values(array_filter($_FILES[$pictureFieldName]['size']	,"trim"));
			
			// error_log("file ".print_r($_FILES,true),3,'/home/naukri/Desktop/log.txt');
		$error_found = false;
		for($i = 0; $i < count ( $_FILES [$pictureFieldName] ['name'] ); $i ++) {
			$type = $_FILES [$pictureFieldName] ['type'] [$i];
			if (! ($type == "image/gif" || $type == "image/jpeg" || $type == "image/jpg" || $type == "image/png")) {
				$errorData [$i] = "Only Images of type jpeg,gif,png are allowed.";
				$error_found = true;
			} else {
				$sizeImage = $_FILES [$pictureFieldName] ['size'] [$i];
				$tmpDimensions = getimagesize ( $_FILES [$pictureFieldName] ['tmp_name'] [$i] );
				list ( $width, $height ) = $tmpDimensions;
				if ($width < 300 || $height < 200) {
					$errorData [$i] = "Image size should be greater then or equal to 300pxX200px.";
					$error_found = true;
				} elseif ($width / $height != 1.5) {
					
					$errorData [$i] = "Image should be in 3:2 ratio.";
					$error_found = true;
				} else if (intval ( $_FILES [$pictureFieldName] ['size'] [$i] ) > 5242880) {
					$errorData [$i] = "Image size should be less then 5MB.";
					$error_found = true;
				} else {
					$errorData [$i] = "no error";
				}
			}
		}
		
		if ($error_found && ! empty ( $errorData )) {
			$pictureArr ['sizecheckerror'] = $errorData;
		}
	    				    
	    
	    //		error_log("file ".print_r($_FILES,true),3,'/home/naukri/Desktop/log.txt');
	    for($i=0;$i<count($_FILES[$pictureFieldName]['name']);$i++){
		    $univ_pictures[$i] = ($arrCaption!="")?$arrCaption.($i+1):$_FILES[$pictureFieldName]['name'][$i];
	    }
	    if(!(isset($_FILES[$pictureFieldName]['tmp_name'][0])) && ($_FILES[$pictureFieldName]['tmp_name'][0] != '')){
		    $photoArr['thumburl'] = "";
	    }
	    else if(!isset($pictureArr['sizecheckerror']) && isset($_FILES[$pictureFieldName]['tmp_name'][0]) && ($_FILES[$pictureFieldName]['tmp_name'][0] != ''))
	    {
		    $i_upload_logo = $uploadClient->uploadFile($appId,'image',$_FILES,$univ_pictures,"-1",$listing_type,$pictureFieldName);
		    //			error_log("logo array ".print_r($i_upload_logo,true),3,'/home/naukri/Desktop/log.txt');
		    if($i_upload_logo['status'] == 1)
		    {
			    for($k = 0;$k < $i_upload_logo['max'] ; $k++)
			    {
				    $tmpSize = getimagesize($i_upload_logo[$k]['imageurl']);
				    list($width, $height, $type, $attr) = $tmpSize;
				    $photoArr['width']=$width;
				    $photoArr['height']=$height;
				    $photoArr['type']=$type;
				    $photoArr['mediaid']=$i_upload_logo[$k]['mediaid'];
				    $photoArr['url']=$i_upload_logo[$k]['imageurl'];
				    $photoArr['title']=$i_upload_logo[$k]['title'];
				    $photoArr['thumburl']=$i_upload_logo[$k]['thumburl_m'];
				    $pictureArr[] = $photoArr;
			    }
		    }else{
			    $pictureArr['error'] = $i_upload_logo;
			    $pictureArr['thumburl'] = "";
		    }
	    }
	    
	    $response['logoArr'] = $logoArr;
	    $response['pictureArr'] = $pictureArr;
	    error_log("SRB:::::".print_r($response,true));
	    return $response;
    }

      /**
     * Purpose : Method to delete study abroad course
     * Params  :	
     * Author  : Vinay
     */
   public function deleteDepartment()
    {
    	$this->usergroupAllowed = array('saAdmin');
    	$departmentId = $this->input->post("parms");
    	if(empty($departmentId))
    	{
    		echo "Invalid Department Id.";
    		exit(0);
    	}
    	// get the user data
    	$userData = $this->cmsAbroadUserValidation();
    	// delete the course
        try {
    	$status = $this->abroadPostingLib->deleteDepartment(array($departmentId), $userData['userid']);
        } catch(Exception $e) {
        	$status =0;
        }
       echo $status;
    }

    /**
    * Purpose : Method to delete study abroad course(ajax call)
    * Params  :	Course Id(Post)
    * Author  : Romil Goel
    */
    public function deleteCourseListing()
    {
	$this->usergroupAllowed = array('saAdmin');
	$courseId = $this->input->post("parms");
	if(empty($courseId))
	{
	    echo "Invalid Course Id.";
	    return 0;
	}
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();
	// delete the course
	$status = $this->abroadPostingLib->deleteCourse(array($courseId), $userData['userid']);

	echo 1;
	
	//if( $status )
	//{
	//    echo "<script> alert(\"Successfully Deleted !!!\"); location.assign('".ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_COURSE."'); </script>";
	//}
	//else
	//{
	//    echo "<script> alert(\"Something went wrong !!!\"); location.assign('".ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_COURSE."'); </script>";
	//}
    }

    /**
    * Purpose : Method to delete study abroad university(ajax call)
    * Params  :	university Id(Post)
    * Author  : Romil Goel
    */
    public function deleteUniversity()
    {
	$this->usergroupAllowed = array('saAdmin');
	$universiyId = $this->input->post("parms");
	if(empty($universiyId))
	{
	    echo "Invalid University Id.";
	    return 0;
	}
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();
	// delete the course
	$status = $this->abroadPostingLib->deleteUniversity(array($universiyId), $userData['userid']);

	echo 1;
    }	
    public function deleteSnapshotCourse($snapShotCourseId){
	$this->usergroupAllowed = array('saAdmin');
	if(empty($snapShotCourseId)){
	    echo "Invalid SnapShot Course Id.";
	    exit(0);
	}
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();

	// delete the course
	$status = $this->abroadPostingLib->deleteSnapshotCourse(array($snapShotCourseId), $userData['userid']);
	
	
	
	if( $status )
	{
	    echo "<script> alert(\"Successfully Deleted !!!\"); location.assign('".ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_SNAPSHOT_COURSE."'); </script>";
	}
	else
	{
	    echo "<script> alert(\"Something went wrong !!!\"); location.assign('".ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_SNAPSHOT_COURSE."'); </script>";
	}
    }
    
     /**
     * Purpose : Method to display table of content
     * Params  :	Status
     * Author  : vinay
     */

    public function viewContentListing($displayDataStatus = 'all')
    {
    	
    	// get the user data
    	$displayData = $this->cmsAbroadUserValidation();
    	
    	// get post parameters
    	$searchContentName = $this->input->get("q");
    	$resultPerPage  = $this->input->get("resultPerPage");
    	$searchType = $this->input->get("searchTyp");
      	$searchType = empty($searchType) || $searchType == "" || !in_array(strtoupper($searchType),array("BOTH","GUIDE","ARTICLE")) ? 'BOTH' : strtoupper($searchType);
    	
    	// data massaging
    	$searchContentName = ($searchContentName == "Search Content") ? "" : $searchContentName;
    	$resultPerPage  = ($resultPerPage) ? $resultPerPage : "";
    	
    	// prepare the query parameters coming
    	$queryParams    ='1';
    	$queryParams	.= ($searchType ? "&searchTyp=".$searchType : "");
    	$queryParams   .= ($searchContentName ? "&q=".$searchContentName : "");
    	$queryParams   .= ($resultPerPage  ? "&resultPerPage=".$resultPerPage : "");
    	$queryParams    = $queryParams 	   ? "?".$queryParams : "";
    	
	
    	
    	// prepare the URL for view as well as for paginator
    	$URL 		= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_CONTENT."/".$displayDataStatus;
    	$URLPagination 	= ENT_SA_CMS_PATH.ENT_SA_VIEW_LISTING_CONTENT."/".$displayDataStatus.($queryParams ? $queryParams : "");
    	
    	// initialize the paginator instance
    	$this->load->library('listingPosting/Paginator');
    	$displayData['paginator']  	  = new Paginator($URLPagination);
    	
    	// fetch the content data
    	$result = $this->abroadPostingLib->getContentTableData($searchType,$displayDataStatus, $displayData['paginator'], $searchContentName);
    	$displayData['paginator']->setTotalRowCount($result['totalCount']);
       	if(count($result['data'])>0){
    		$parentCategoryIds = array();
    		foreach ($result['data'] as $resultData) {
    		if(!empty($resultData['parentCatgoryIds']))
    		{		
    		$iDs =	explode(',',$resultData['parentCatgoryIds']);
    		
    		 if(count($iDs)>0){
    		 	
    		 	$parentCategoryIds  = array_merge($parentCategoryIds,$iDs);
    		 }
    		
    		}
    		}
    	
    	array_unique($parentCategoryIds);
    	 if(count($parentCategoryIds) > 0)
    	 {
    	//Loading CategoryBuilder for getting CategoryRepository
    	$this->load->builder('CategoryBuilder','categoryList');
    	$categoryBuilder = new CategoryBuilder;
    	$categoryRepository = $categoryBuilder->getCategoryRepository();
    	 
    	//fetch multiple objects for sub-category Ids
    	 $categoryIds = $categoryRepository->findMultiple($parentCategoryIds);
    	 }
    	//get LDB Course Mapping Data
    	 $ldbCourseMapping = $this->abroadCommonLib->getAbroadMainLDBCourses();
        	if(!empty($result['data'])){
    		foreach ($result['data'] as $key => $resultData) {
    			$result['data'][$key]['courseType'] = array();
    			if(!empty($resultData['parentCatgoryIds']))
    			{
    				$parentCatIDs =	explode(',',$resultData['parentCatgoryIds']);
    				foreach($parentCatIDs as $id)
    				{
    				  $result['data'][$key]['courseType'][] = $categoryIds[$id]->getName();
    				}
    				
    			}
    			if(!empty($resultData['ldbCourseIds']))
    			{
    				$ldbCourseIds =	explode(',',$resultData['ldbCourseIds']);
    			   foreach($ldbCourseIds as $id)
    				{
    				  foreach($ldbCourseMapping as $ldbCourse){
    						if($ldbCourse['SpecializationId'] == $id){
    							$result['data'][$key]['courseType'][] = $ldbCourse['CourseName'];
    							break;
    						}
    					}
    					
    					
    				}
    				
    			}
    		}
    	
    	}
    	}
    	
    // prepare the display date here
    $displayData['displayDataStatus'] = $displayDataStatus;
    $displayData['searchTerm'] 	  =     $searchContentName;
    $displayData['queryParams'] 	  = $queryParams;
    $displayData['totalResultCount']  = $result['dataCount'];
    $displayData['URL'] 	  	  = $URL;
    $displayData["reportData"] 	  = $result['data'];
    $displayData["searchTypeOptions"] =  array('Both','Article','Guide');
    $displayData["searchType"] =  $searchType;
  	$displayData['formName'] 	= ENT_SA_VIEW_LISTING_CONTENT;
	$displayData['selectLeftNav']   = "CONTENT";
	
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
   public function addRankingForm()
   {
   	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	// get post data here for first request then  make a ranking id and return it.
	
	// prepare the display date here
	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
	$displayData['formName'] 	= ENT_SA_FORM_ADD_RANKING;
	$displayData['selectLeftNav']   = "RANKING";
	$displayData['abroadMainLDBCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
	$displayData['couresTypes'] = $this->abroadCommonLib->getAbroadCourseLevels();
	$this->_populateAbroadCountries($displayData);
	// call the view
	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
   }


   public function postFirstSectionOfRankingPage()
   {
	// get the user data
	$displayData = $this->cmsAbroadUserValidation();
	
	$formData 				= $this->gatherRankingPageData();
	$formData['rankingLastModifiedBy'] 	= $displayData["userid"];
	
	$ranking_id = $this->abroadPostingLib->postRankingPage($formData);
   	
	if($formData['rankingActionType'] == ENT_SA_FORM_ADD_RANKING)
	    header('location:'.ENT_SA_FORM_EDIT_RANKING.'/'.$ranking_id."?state=add");
	else
	    header('location:'.ENT_SA_VIEW_LISTING_RANKING);
	    
   	exit();
   }
   
   public function editRankingForm($rankPageId)
    {   $displayData = $this->cmsAbroadUserValidation();
    	//fetch data from Ranking page table and fill in form.
    	//Model Call to fetch Data;
	$displayData['formData'] = $this->abroadPostingLib->getRankingDataForEditMode($rankPageId);
       if(empty($displayData['formData']['id'])) {
       	show_404();
       }
    	$displayData['rankingId'] = $rankPageId;
    	$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
    	$displayData['formName'] 	= ENT_SA_FORM_EDIT_RANKING;
    	$displayData['selectLeftNav']   = "RANKING";
    	$displayData['abroadMainLDBCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
    	$displayData['couresTypes'] = $this->abroadCommonLib->getAbroadCourseLevels();
    	$this->_populateAbroadCountries($displayData);
    	// call the view
    	$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    
    }
   
    public function gatherRankingPageData()
    {
	$formData['rankingId'] 		= $this->input->post('rankingId');
   	$formData['rankingName'] 	= $this->input->post('rankingName');
   	$formData['rankingType'] 	= $this->input->post('rankingType');
   	$formData['countryId'] 		= $this->input->post('countryId');
   	$formData['parentCategory'] 	= $this->input->post('parentCategory');
   	$formData['childCategory'] 	= $this->input->post('childCategory');
   	$formData['desiredCourse'] 	= $this->input->post('desiredCourse');
   	$formData['couresType'] 	= $this->input->post('couresType');
	$formData['rankingActionType'] 	= $this->input->post('rankingActionType');
	
	$formData['rankingSeoTitle'] 	= $this->input->post('rankingSeoTitle');
	$formData['rankingDesc'] 	= $this->input->post('rankingDesc');
	$formData['rankingKeywords'] 	= $this->input->post('rankingKeywords');
	$formData['submit_date'] 	= $this->input->post('submit_date');
	$formData['rankingStatus'] 	= $this->input->post('rankingStatus');
	$formData['listingIds'] 	= $this->input->post('listingIds');
	$formData['rankingUserComments']= $this->input->post('rankingUserComments');
	
	$formData['rankingCreatedBy'] 	= $this->input->post('rankingCreatedBy');
	
	return $formData;
    }
	

    public function addContentListing()
    {
		// get the user data
		$displayData = $this->cmsAbroadUserValidation();
		
		$displayData['action'] = 'add';
		
		// prepare the display date here
		$displayData['formName'] 	= ENT_SA_FORM_ADD_CONTENT;
		$displayData['selectLeftNav']   = "CONTENT";
		
		$this->_populateAbroadCountries($displayData);
		$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
		$displayData['abroadExamsMasterList'] = $this->abroadCommonLib->getAbroadExamsMasterList();
		$displayData['courseType'] = $this->abroadCommonLib->getAbroadCourseLevels();
		$displayData['tags'] = $this->abroadCommonLib->getTags();
		$displayData['desiredCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
		
		// call the view
		$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }
    
    public function editContentListing($contentId)
    {
		// get the user data
		$displayData = $this->cmsAbroadUserValidation();
		
		$displayData['action'] = 'edit';
		//Get Content Data
		$contentData = $this->abroadPostingLib->getContentData($contentId);
		if($contentData === null){
		    show_404();
		}
		$displayData['content']	= $contentData[$contentId];
		//_p($displayData['content']);
		
		$userModel = $this->load->model('user/usermodel');
		$userData = $userModel->getUserById($contentData[$contentId]['basic_info']['last_modified_by']);
		$displayData['lastModifiedBy'] = $userData->getDisplayName();
		$displayData['lastModified'] =  $contentData[$contentId]['basic_info']['last_modified'];
		
		
		$this->_populateAbroadCountries($displayData);
		$displayData['abroadCategories'] = $this->abroadCommonLib->getAbroadCategories();
		$displayData['abroadExamsMasterList'] = $this->abroadCommonLib->getAbroadExamsMasterList();
		$displayData['courseType'] = $this->abroadCommonLib->getAbroadCourseLevels();
		$displayData['tags'] = $this->abroadCommonLib->getTags();
		$displayData['desiredCourses'] = $this->abroadCommonLib->getAbroadMainLDBCourses();
		
		foreach($displayData['content']['ldbCourse_info'] as $key=>$desiredCourses) {
			$displayData['selectedDesiredCourses'][$key] = $desiredCourses['ldb_course_id'];
		}
		// prepare the display date here
		$displayData['formName'] 	= ENT_SA_FORM_EDIT_CONTENT;
		$displayData['selectLeftNav']   = "CONTENT";
		
		// call the view
		$this->load->view('listingPosting/abroad/abroadCMSOverview',$displayData);
    }

	 /*
     *Function to delete Ranking
     */
    function deleteRankingListing()
    {
	$this->usergroupAllowed = array('saAdmin');
	$rankId = $this->input->post("parms");
	if(empty($rankId))
	{
	    echo "Invalid Rank Id.";
	    return 0;
	}
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();
	// delete the course
	$status = $this->abroadPostingLib->deleteRank(array($rankId), $userData['userid']);

	echo 1;
    }

    /**
    * Purpose : Method to get the name of the listing(ajax call)
    * Params  :	Course/University Id, listing type, country id(Post)
    * Author  : Romil Goel
    */
    public function getListingsName()
    {
	$listing_id 	= $this->input->post("listing_id");
	$listing_type 	= $this->input->post("listing_type");
	$country_id	= $this->input->post("country_id");
	$desiredCourse	= $this->input->post("desiredCourse");
	$couresType	= $this->input->post("couresType");
	$parentCategory	= $this->input->post("parentCategory");
	$childCategory	= $this->input->post("childCategory");

	$courseTypeDetails = array("desiredCourse" => $desiredCourse,
				   "couresType"	   => $couresType,
				   "parentCategory"=> $parentCategory,
				   "childCategory" => $childCategory);

	if(empty($desiredCourse) && empty($couresType) && empty($parentCategory) && empty($childCategory))
	{
	    $courseTypeDetails = array();
	}
	
	// initialize local vars
	$draft_flag 	= 0;
	$name 		= "";
	
	// get the data
	$listings_name = $this->abroadCommonLib->getListingsName($listing_id, $listing_type, $country_id, $courseTypeDetails);

	$courseProperlyMappedFlag = 0;
	if(empty($listings_name['courseProperlyMappedFlag']))
	    $courseProperlyMappedFlag = 0;
	else
	    $courseProperlyMappedFlag = $listings_name['courseProperlyMappedFlag'];
	    
	if(empty($listings_name[0]['name']))
	    $resultArr = array("errorFlag" => 1, "draftedListing" => 0, "courseProperlyMappedFlag" => $courseProperlyMappedFlag);
	else
	{
	    if(((count($listings_name) == 2 || $listing_type == 'Course') || (count($listings_name) == 1 || $listing_type == 'University')) && $listings_name[0]['status'] == 'draft')
		$draft_flag = 1;
	    
	    $tempName = "";
	    foreach($listings_name as $val)
	    {
		if($val['name'])
		    $tempName = $val['name'];
		    
		if($val['status'] == ENT_SA_PRE_LIVE_STATUS)
		{
		    $name = $val['name'];
		}
	    }
	    if(!$name)
		$name = $tempName;
	    
	    $resultArr = array("errorFlag" => 0, "draftedListing" => $draft_flag,"name" =>htmlspecialchars($name), "courseProperlyMappedFlag" => $courseProperlyMappedFlag);
	}
	echo json_encode($resultArr);
    }

    public function checkForDuplicateRankingPage()
    {
	$rankingType	 	= $this->input->post("rankingType");
	$desiredCourse		= $this->input->post("desiredCourse");
	$courseType 		= $this->input->post("courseType");
	$parentCategoryId 	= $this->input->post("parentCategoryId");
	$subCategory 		= $this->input->post("subCategory");
	$countryId 		= $this->input->post("countryId");
	$rankingId 		= $this->input->post("rankingId");
	
	$desiredCourse 	= empty($desiredCourse) ? 0 : $desiredCourse;
        $subCategory 	= empty($subCategory) 	? 0 : $subCategory;
        $countryId  	= empty($countryId) 	? 0 : $countryId;
	
	$val = $this->abroadCommonLib->checkForDuplicateRankingPage($rankingType, $desiredCourse, $courseType, $parentCategoryId, $subCategory, $countryId, $rankingId);
	
	echo json_encode($val);
    }

	public function saveContentListing(){
	//Get User Data
	$userData = $this->cmsAbroadUserValidation(true);
	if(!empty($userData['error']) && !empty($userData['error_type'])) {
		echo json_encode($userData);
		return;
	}
	
	$contentData = $this->getContentRequestData();
	$contentData['userId'] =$userData['userid'];
	
	//Model Call 
	$this->abroadPostingLib->addContent($contentData);
	return 1;
    }
    
    public function getContentRequestData(){
		$contentData = array();
		
		$contentData['content_type'] =  $this->input->post('contentType');
		if($contentData['content_type'] == ''){
		    $arr["error"] = array("Fail"=>array("file_size_exceeded" => ""));
		    echo json_encode($arr);
		    exit;
		}
		$contentData['content_country'] =  $this->input->post('country');
		$contentData['content_institute'] =  $this->input->post('university');
		$contentData['content_desiredCourse'] =  $this->input->post('desiredCourse');
		$contentData['formAction'] = $this->input->post('actionType');
		$contentData['content_contentId'] = $this->input->post('contentTypeId');
		
		$content_hidden =  $this->input->post('hidden');
		//error_log("content_hidden: ".print_r($content_hidden, true));
		foreach($content_hidden as $value) {
			if($this->input->post('r_'.$value) != "none") {
				$contentData['content_courseType'][] = $this->input->post('r_'.$value);
			}
		}
		//error_log("check if here courses: ".print_r($contentData['content_courseType'], true));
		$contentData['content_parentCategory'] =  $this->input->post('parentCat');
		$contentData['content_subCategory'] =  $this->input->post('subCat');
		$contentData['content_title'] =  $this->input->post('title');
		$contentData['content_stripTitle'] = html_entity_decode(strip_tags($this->input->post('title')));
		$contentData['content_stripTitle'] = html_entity_decode($contentData['content_stripTitle'], ENT_NOQUOTES, 'UTF-8');
        $contentData['content_stripTitle'] = trim(preg_replace('/[^A-Za-z0-9!@#$%^&*()<>,?;{}.\'\":\/|]/',' ',$contentData['content_stripTitle']));
		
		if($contentData['content_type'] == 'article'){
		    $contentData['content_details'] =  $this->input->post('articleDetails');
		    $contentData['content_isDownloadable'] =  "no";
		    $contentData['content_guide'] =  "";
			$arr["error"] = 0;
			echo json_encode($arr);
		}
		elseif($contentData['content_type'] == 'guide') {
		    $contentData['content_heading'] =  $this->input->post('guide-heading');
		    $contentData['content_details'] =  $this->input->post('guide-detail');
		    $contentData['content_isDownloadable'] =  ($this->input->post('checkDownload')=='on')?"yes":"no";
		   
		    if($contentData['formAction'] == 'edit') {
				$contentData['content_guideURL'] = $this->input->post('uploadFileText');
			} else {
				$contentData['content_guideURL'] = "";
			}
			
			if($contentData['content_guideURL'] == ""){
				$contentData['content_guide'] = $this->listingBrochureUpload('content','uploadFile');
			} else {
				$contentData['content_guide'] = "";
			}
			
			if(array_key_exists('Fail', $contentData['content_guide'])) {
				$arr["error"] = $contentData['content_guide'];
				echo json_encode($arr);
				exit;
			}elseif($contentData['content_isDownloadable'] == "yes" && $contentData['content_guide'] == ""){
				$arr["error"] = array("Fail"=>array("file_size_exceeded" => ""));
				echo json_encode($arr);
				exit;
			}
			else {
				$arr["error"] = 0;
				echo json_encode($arr);
			}
		}
		
		$contentData['content_summary'] =  $this->input->post('summary');
		$contentData['content_tags'] =  $this->input->post('tag');
		$contentData['content_exam'] =  $this->input->post('exam');
		$contentData['content_seoTitle'] =  $this->input->post('SEOtitle');
		$contentData['content_seoKeywords'] =  $this->input->post('SEOkeywords');
		$contentData['content_seoDescription'] =  $this->input->post('SEOdescription');
		$contentData['status'] =  $this->input->post('status');
		if($contentData['status'] == "live"){
			$contentData['status'] = ENT_SA_PRE_LIVE_STATUS;
		}
		
		//error_log("check if here: ".print_r($contentData, true));
		return $contentData;
    }
    
	//Function To Check If Content
    public function isContentExist(){
		$searchTag = html_entity_decode(strip_tags($this->input->post("title")),ENT_NOQUOTES, 'UTF-8');
		//$searchTag = htmlentities(trim(utf8_decode($searchTag)));
		//$searchTag = trim(str_replace("&nbsp;", " ", ($searchTag)));
		$searchTag = trim($searchTag);
		$searchTag = trim(preg_replace('/[^A-Za-z0-9!@#$%^&*()<>,?;{}.\'\":\/|]/',' ',$searchTag));
		
		$searchTagType = $this->input->post("type");
		$searchTagID = $this->input->post("contentId");
		if($searchTag != '' && $searchTagType !=''){
			$arr['exists'] = $this->abroadCommonLib->isContentExist($searchTagType, $searchTag, $searchTagID);
			//error_log("check if here: ".print_r($arr, true));
			echo json_encode($arr);
		}else{
			$arr['exists'] = 0;
			//error_log("check if here: ".print_r($arr, true));
			echo json_encode($arr);
		}
    }

    /**
    * Purpose : Method to delete study abroad Guide/Article(ajax call)
    * Params  :	Content Id(Post)
    * Author  : Romil Goel
    */
    public function deleteContentListing()
    {
	$this->usergroupAllowed = array('saAdmin');
	$guideArticleId 	= $this->input->post("parms");
	if(empty($guideArticleId))
	{
	    echo "Invalid Content Id.";
	    return 0;
	}
	
	// get the user data
	$userData = $this->cmsAbroadUserValidation();
	// delete the course
	$status = $this->abroadCmsModelObj->deleteGuideArticle(array($guideArticleId), $userData['userid']);

	echo 1;
    }
    
}
