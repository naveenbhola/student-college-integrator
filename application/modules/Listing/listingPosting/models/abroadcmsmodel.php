<?php
class abroadcmsmodel extends MY_Model {
    private $dbHandle = '';
    private $dbHandleMode = '';
    private $departmentsToDelete = array();
    private $coursesToDelete = array();
    private $snapshotCoursesToDelete = array();
    private $dataCollectorForLogging = array();

    function __construct() {
        parent::__construct('Listing');
    }

    private function initiateModel($mode = "write"){
        if($this->dbHandle && $this->dbHandleMode == 'write')
            return;

        $this->dbHandleMode = $mode;
        $this->dbHandle = NULL;
        if($mode == 'read') {
            $this->dbHandle = $this->getReadHandle();
        } else {
            $this->dbHandle = $this->getWriteHandle();
        }
    }
    public function getUpdatedDataForCourses($coursesExpiredSuccessfully){
        if(count($coursesExpiredSuccessfully)==0){
            return array();
        }
        $this->initiateModel('write');
        $this->dbHandle->select('listing_type_id as courseId,subscriptionId,expiry_date,pack_type');
        $this->dbHandle->from('listings_main');
        $this->dbHandle->where_in('listing_type_id',$coursesExpiredSuccessfully);
        $this->dbHandle->where('status',"live");
        $this->dbHandle->where('listing_type',"course");
        return $this->dbHandle->get()->result_array();
    }
    private function _getNewAutogeneratedId($type = 'snapshot_course') {
        return Modules::run('common/IDGenerator/generateId',$type);
    }

    /**
     * Purpose : Method to get snapshot Courses Details
     * Params  :	none
     * Author  : Abhinav
     */
    public function getSnapshotCourse($snapshotCourse='',$lowerlimit=0,$totalrow=20){
        die;
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');

        //Query for fetching SnapShot Course Details
        $sql =	"select SQL_CALC_FOUND_ROWS sc.course_id,sc.course_name,sc.course_type,sc.category_id,sc.last_modified date,un.name university_name,cta.city_name,ct.name country_name ".
            "from snapshot_courses sc inner join university un on(sc.university_id=un.university_id) ".
            "inner join university_location_table ult on(un.university_id=ult.university_id) ".
            "inner join ".ENT_SA_COUNTRY_CITY_TABLE_NAME." cta on(ult.city_id=cta.city_id) ".
            "inner join ".ENT_SA_COUNTRY_TABLE_NAME." ct on(ult.country_id=ct.countryId) ".
            "where sc.status='live' and un.status='".ENT_SA_PRE_LIVE_STATUS."' and ult.status='".ENT_SA_PRE_LIVE_STATUS."' ";

        if($snapshotCourse != ''){
            $sql .= "and sc.course_name like '%?%' ";
        }
        $sql .= "order by date desc ";
        $sql .=	"limit ?,?";
        $result = $this->dbHandle->query($sql,array($snapshotCourse,$lowerlimit,$totalrow))->result_array();

        //Query For Total Rows
        $sql	=" select found_rows() totalRows";
        $result = array_merge((array)$result,(array)$this->dbHandle->query($sql)->result_array());

        foreach ($result as $key => $value) {
            if(!empty($value['course_id'])){
                $res = $this->checkIfSnapshotCourseExistInMappings($value['course_id'], '', 'draft');
                if(count($res)== 1)
                {
                    $result[$key]['snapshot_in_draft'] = "true";
                } else {
                    $result[$key]['snapshot_in_draft'] = "false";
                }
            }
        }
        return $result;
    }

    /**
     * Purpose : Method to get snapshot Course Data of particular course for edit
     * Params  :	none
     * Author  : Nikita
     */
    public function getSnapshotCourseDataForEdit($courseId)
    {
        $this->initiateModel('read');
        $queryCmd = "select * from snapshot_courses where course_id = ? and status = 'live'";
        $query = $this->dbHandle->query($queryCmd,array($courseId));
        //error_log("check if here get snapshot data: ".print_r($query->row_array(), true));
        $result = $query->row_array();
        if(count($result)) {
            return $result;
        }
    }

    function getUniversityDetails($universityId, $status = ENT_SA_PRE_LIVE_STATUS)
    {
        $this->initiateModel('read');
        $query = "SELECT *
		  FROM university
		  WHERE university_id = ? and status = ?";

        $result = $this->dbHandle->query($query,array($universityId,$status))->row_array();
        return $result;
    }
    /**
     * Purpose : Method to get all abroad states
     * Params  :	none
     * Author  : Romil Goel
     */
    public function getAllAbroadStates()
    {
        $this->initiateModel();

        $query = "SELECT state_id, state_name, countryId
		  FROM ".ENT_SA_STATE_TABLE_NAME."
		  WHERE countryId NOT IN ( 2 ) 
		  ORDER BY countryId desc";

        $rs = $this->dbHandle->query($query)->result_array();

        // fetch all data from result set and prepare another array
        foreach($rs as $key=>$value)
        {
            $stateArr[$key]['state_id'] 	= $value['state_id'];
            $stateArr[$key]['state_name'] 	= $value['state_name'];
            $stateArr[$key]['countryId'] 	= $value['countryId'];
        }
        return $stateArr;
    }

    /**
     * Purpose : Method to get similar cities for same country
     * Params  :	City name , country id
     * Author  : Romil Goel
     */
    public function getSimilarCities($cityName, $countryId)
    {
        $this->initiateModel();

        $sql =  "SELECT city_name, countryId, state_id ".
            "FROM ".ENT_SA_COUNTRY_CITY_TABLE_NAME." ".
            "WHERE city_name = ?
			AND countryId = ?";

        $result = $this->dbHandle->query($sql,array($cityName,$countryId))->result_array();

        return $result;
    }

    /**
     * Purpose : Method to add city to DB
     * Params  :	Country id, state-id, City name, user's id, city's tier
     * Author  : Romil Goel
     */
    function addCity($countryId, $stateId, $cityName, $userId, $tier, $additionalCityFields)
    {
	// get the write DB handle
	$this->initiateModel("write");
	
	$this->dbHandle->trans_start();
	
	$data = array(
		'city_name' => $cityName,
		'countryId' => $countryId,
		'creationDate' => date('Y-m-d H:i:s'),
        'modificationDate' => date('Y-m-d H:i:s'),
		'enabled' => 0,
		'state_id' => $stateId,
		'tier' => $tier,
		'addedBy' => $userId
	);
	
	// insert the city data in countryCityTable
	$this->dbHandle->insert(ENT_SA_COUNTRY_CITY_TABLE_NAME, $data);
	
	// get the primary key of the inserted row
	$cityId = $this->dbHandle->insert_id();
	
	// insert the city data in virtualCityMapping
	$data = array(
		'virtualCityId' => $cityId,
		'city_id' => $cityId
		);
	
	$this->dbHandle->insert('virtualCityMapping', $data);
    $this->_addCityIdToCityFieldsBatches($additionalCityFields, $cityId);
    $this->_addCityAttributes($additionalCityFields);
	
	$this->dbHandle->trans_complete();
		
	if ($this->dbHandle->trans_status() === FALSE) {
		throw new Exception('Transaction Failed');
	}
	return $cityId;
    }

    private function _addCityAttributes($cityAttr){
    	//$this->initiateModel("write");
    	if(is_array($cityAttr['primaryAttr']) && count($cityAttr['primaryAttr']) > 0){
                $this->dbHandle->insert_batch('SACityPrimaryAttributes', $cityAttr['primaryAttr']);
    	}
    	if(is_array($cityAttr['videos']) && count($cityAttr['videos']) > 0){
	    	$this->dbHandle->insert_batch('SACityVideos', $cityAttr['videos']);
    	}
    	if(is_array($cityAttr['otherAttr']) && count($cityAttr['otherAttr']) > 0){
    		$this->dbHandle->insert('SACityOtherAttributes', $cityAttr['otherAttr']);
    	}
    }

    function updateCity($newInfo, $userId, $updateCountryCityTable)
    {
        // get the write DB handle
        $this->initiateModel("write");

        $this->dbHandle->trans_start();

        if($updateCountryCityTable) {
            $data = array(
                'city_name' => $newInfo['cityName'],
                'countryId' => $newInfo['countryId'],
                'modificationDate' => date('Y-m-d H:i:s'),
                'state_id' => $newInfo['stateId'],
                'tier' => $newInfo['tier'],
                'modifiedBy' => $userId
            );
            $this->dbHandle->where("city_id",$newInfo['cityId']);
            $this->dbHandle->update(ENT_SA_COUNTRY_CITY_TABLE_NAME, $data);
        }
        else{
            $data = array(
                'modificationDate' => date('Y-m-d H:i:s'),
                'modifiedBy' => $userId
            );
            $this->dbHandle->where("city_id",$newInfo['cityId']);
            $this->dbHandle->update(ENT_SA_COUNTRY_CITY_TABLE_NAME, $data);
        }
        $this->_addCityIdToCityFieldsBatches($newInfo['additionalCityFields'], $newInfo['cityId']);
        $oldStatus = ENT_SA_PRE_LIVE_STATUS;
        $newStatus = ENT_SA_HISTORY_STATUS;
        $this->updateOldCityAttributes($newInfo['cityId'], $oldStatus, $newStatus);
        $this->_addCityAttributes($newInfo['additionalCityFields']);
        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        return $newInfo['cityId'];
    }
    private function updateOldCityAttributes($cityId, $oldStatus, $newStatus){

        $data = array(
            'status' => $newStatus,
            'modificationDate' => date('Y-m-d H:i:s')
        );
        $this->dbHandle->where("cityId", $cityId);
        $this->dbHandle->where("status", $oldStatus);
        $this->dbHandle->update('SACityPrimaryAttributes', $data);

        $this->dbHandle->where("cityId", $cityId);
        $this->dbHandle->where("status", $oldStatus);
        $this->dbHandle->update('SACityVideos', $data);

        $this->dbHandle->where("cityId", $cityId);
        $this->dbHandle->where("status", $oldStatus);
        $this->dbHandle->update('SACityOtherAttributes', $data);
    }
    private function _addCityIdToCityFieldsBatches(&$additionalCityFields, $cityId){
        if(isset($additionalCityFields['otherAttr'])){
            $additionalCityFields['otherAttr']['cityId'] = $cityId;
        }
        $batches = array('primaryAttr', 'videos');
        foreach ($batches as $batch) {
            if(isset($additionalCityFields[$batch])){
                foreach ($additionalCityFields[$batch] as &$value) {
                    $value['cityId'] = $cityId;
                }
            }
        }
    }

    /*
     * 	Gets all Universities for the Country
     * 	$countryId - A valid Country id, integer value > 0
     * 	$excludeCollege - if 1, universities of college type will be excluded, included otherwise
     */
    public function getUniversitiesForCountry($countryId, $excludeCollege = 0)
    {
        if(empty($countryId)) {
            return array();
        }

        $this->initiateModel();

        $query = "SELECT u.university_id, u.name FROM university u, university_location_table ult WHERE ".
            " u.university_id = ult.university_id AND u.status = '".ENT_SA_PRE_LIVE_STATUS."' AND ult.status = '".ENT_SA_PRE_LIVE_STATUS."' AND ult.country_id IN (?)";
        if($excludeCollege == 1)
        {
            $query .= " and u.type_of_institute2 != 'college' ";
        }
        $rs = $this->dbHandle->query($query, array($countryId))->result_array();

        foreach($rs as $key=>$value)
        {
            $universityArr[$key]['university_id'] 		= $value['university_id'];
            $universityArr[$key]['university_name'] 	= $value['name'];
        }

        return $universityArr;
    }

    /*
    * 	Gets all Departments for the University
    * 	$universityId - A valid University id, integer value > 0
    */
    public function getDepartmentsForUniversity($universityId)
    {
        if($universityId == "") {
            return array();
        }

        $this->initiateModel();

        $query = "SELECT ium.institute_id,  i.institute_name, if(i.institute_type = 'Department',0,1) as is_dummy FROM `institute_university_mapping` ium,  institute i  ".
            " WHERE ium.`institute_id` = i.institute_id AND i.status = '".ENT_SA_PRE_LIVE_STATUS."' and ium.status = '".ENT_SA_PRE_LIVE_STATUS."' ".
            " and ium.`university_id` = ?";

        $rs = $this->dbHandle->query($query,array($universityId))->result_array();

        foreach($rs as $key=>$value)
        {
            $dataArr[$key]['institute_id'] 	= $value['institute_id'];
            $dataArr[$key]['institute_name'] 	= $value['institute_name'];
            $dataArr[$key]['is_dummy'] 	= $value['is_dummy'];
        }

        return $dataArr;
    }

    function checkAvailabilitySnapshotCourse($checkData)
    {
        return false;
        $courseName = $checkData['courseName'];
        $universityId = $checkData['universityId'];
        $countryId = $checkData['countryId'];
        $courseId = $checkData['courseId'];
        $courseType = $checkData['courseType'];
        if($courseId != "") {
            $extendedQuery = " AND course_id != '$courseId'";
        }

        $this->initiateModel('read');
        $queryCmd = "select * from snapshot_courses where country_id = "."'".addslashes($countryId)."' and university_id = "."'".addslashes($universityId)."' and course_type = "."'".addslashes($courseType)."' and course_name = "."'".addslashes($courseName)."' and status = 'live'".$extendedQuery;
        error_log("QUERY checkAvailabilitySnapshotCourse: ".$queryCmd);
        $query = $this->dbHandle->query($queryCmd);
        if(count($query->result_array()) > 0)
            return true;
        else
            return false;
    }

    function getAllSnapshotCoursesOfAUniversity($snapshotRelatedData)
    {
        die;
        $universityId = $snapshotRelatedData['universityId'];
        $countryId = $snapshotRelatedData['countryId'];
        $this->initiateModel('read');

        $queryCmd = "select TRIM(UPPER(course_name)) as course_name,UPPER(course_type) as course_type from snapshot_courses where status IN ('live','draft') AND country_id = "."'".addslashes($countryId)."' and university_id = "."'".addslashes($universityId)."'";

        $result = $this->dbHandle->query($queryCmd)->result_array();

        return $result;

    }

    function addComments($dbHandle = FALSE, $userId, $listingId, $tabUpdated, $comments)
    {
        if(!empty($dbHandle)){
            $this->dbHandle = $dbHandle;
        } else {
            $this->initiateModel('write');
        }
        $commentData['userId'] = $userId;
        $commentData['listingId'] = $listingId;
        $commentData['tabUpdated'] = $tabUpdated;
        $commentData['comments'] = $comments;
        $commentData['updatedAt'] = date('Y-m-d H:i:s');
        $this->dbHandle->insert('listingCMSUserTracking', $commentData);
    }

    function addBulkSnapshotCourses($snapshotCourseDataToInsertInDB,$comments){
        die;
        $insertSnapshotSQLPrefix = "INSERT INTO `snapshot_courses` (`course_id`, `course_name`, `course_type`, `university_id`, `country_id`, `category_id`, `website_link`, `status`, `created`, `last_modified`, `createdBy`, `lastModifiedBy`, `listing_seo_url`) VALUES ";
        $insertSnapshot;
        $this->initiateModel("write");
        $this->dbHandle->trans_start();
        foreach ($snapshotCourseDataToInsertInDB as $snapshotData)
        {
            $courseId= $this->_getNewAutogeneratedId('snapshot_course');
            $countryName  = $this->getCountryById($snapshotData['country_id']);
            $universityName = $this->getUniversityName($snapshotData['university_id']);
            $abroadPostingLib 	= $this->load->library('listingPosting/AbroadPostingLib');
            $listing_seo_url = $abroadPostingLib->getSnapshotCourseUrl($courseId, $snapshotData['course_name'], $universityName[0]['name'], $countryName[0]['country_name']);


            $insertSnapshotSQLData ="('".$courseId."', '".mysql_escape_string($snapshotData['course_name'])."'".
                ", '".$snapshotData['course_type']."', '".$snapshotData['university_id'].
                "', '".$snapshotData['country_id'].
                "', '".$snapshotData['category_id']."', '".mysql_escape_string($snapshotData['website_link'])."'".
                ", '".$snapshotData['status']."', '".$snapshotData['created']."'".
                ", '".$snapshotData['last_modified']."', '".$snapshotData['createdBy'].
                "', '".$snapshotData['lastModifiedBy'].
                "', '".$listing_seo_url."' )";
            $insertSnapshot = empty($insertSnapshot) ? $insertSnapshotSQLData : $insertSnapshot." , ".$insertSnapshotSQLData;
            $this->addComments($this->dbHandle, $snapshotData['createdBy'], $courseId, 'course', mysql_escape_string($comments));
        }
        $sql = $insertSnapshotSQLPrefix.$insertSnapshot;


        $this->dbHandle->query($sql);
        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
    }


    function addbulkSnapshotAdditionTrackingEntry($useID,$courseCount,$comments){
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        $trackData['userId'] = $useID;
        $trackData['coursesAdded'] = $courseCount;
        $trackData['comments'] = $comments;

        $this->dbHandle->insert('snapshotBulkAdditionTracking', $trackData);
        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
    }

    function getbulkSnapshotAdditionTrackingEntry(){
        $this->initiateModel('read');
        $sql = "SELECT userId, updatedAt
     	FROM `snapshotBulkAdditionTracking`
     	ORDER BY `snapshotBulkAdditionTracking`.`updatedAt` DESC
     	LIMIT 1";

        return $this->dbHandle->query($sql)->row_array();
    }



    function addEditSnapshotCourse($snapshotData)
    {
        die;
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        $snapshotData['status'] = 'live';
        $returnFlag = true;

        if($snapshotData['action'] == 'add') {
            $snapshotData['course_id'] = $this->_getNewAutogeneratedId('snapshot_course');
            $snapshotData['created'] = date('Y-m-d H:i:s');

            $this->addComments($this->dbHandle, $snapshotData['createdBy'], $snapshotData['course_id'], 'course', $snapshotData['comments']);
            unset($snapshotData['action']);
            unset($snapshotData['comments']);
            $countryName  = $this->getCountryById($snapshotData['country_id']);
            $universityName = $this->getUniversityName($snapshotData['university_id']);
            $abroadPostingLib 	= $this->load->library('listingPosting/AbroadPostingLib');
            $snapshotData['listing_seo_url']	= $abroadPostingLib->getSnapshotCourseUrl($snapshotData['course_id'], $snapshotData['course_name'], $universityName[0]['name'], $countryName[0]['country_name']);
            $this->dbHandle->insert('snapshot_courses', $snapshotData);
            $this->updateCacheAfterPosting('university',array($snapshotData['university_id']));
        }
        elseif($snapshotData['action'] == 'edit'){
            //get seo data so that it can be reinserted along with other data
            $seoData = $this->getSnapshotCourseDataForEdit($snapshotData['course_id']);
            $query = "UPDATE snapshot_courses
				  SET   status = 'history'
				  WHERE course_id = ".$snapshotData['course_id']."
					and status = 'live'";
            $this->dbHandle->query($query);
            $this->addComments($this->dbHandle, $snapshotData['createdBy'], $snapshotData['course_id'], 'course', $snapshotData['comments']);
            unset($snapshotData['action']);
            unset($snapshotData['comments']);

            $snapshotData['listing_seo_url'] 		= $seoData['listing_seo_url'];
            $this->dbHandle->insert('snapshot_courses', $snapshotData);
            $this->updateCacheAfterPosting('university',array($snapshotData['university_id']));
            $this->updateCacheAfterPosting('snapshotcourse',array($snapshotData['course_id']));
        }
        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            $returnFlag = false;
            throw new Exception('Transaction Failed');
        }
        return $returnFlag;
    }

    function addCourse($modelParams = array(), $flagParams = array()) {
        $this->initiateModel('write');
        $returnFlag = true;
        $courseId = $modelParams['course_details']['course_id'];
        // error_log("courseId = ".$courseId.", Data = ".print_r($flagParams, true),3,'/home/amitkuksal/Desktop/log.txt'); die;
        $this->dbHandle->trans_start();
        $transactionStartedFlag = true;
        $addToIndexLog = false;
        if($flagParams['flow'] == "edit") {
            if($flagParams['status'] == ENT_SA_PRE_LIVE_STATUS){
                $this->updateStatusInSnapshotCourseMappings($courseId,$modelParams['listingCMSUserTracking']['userId'],"draft",ENT_SA_PRE_LIVE_STATUS,$transactionStartedFlag);
                $this->updateCourseEntriesStatus($courseId, ENT_SA_PRE_LIVE_STATUS, 'history', $transactionStartedFlag);
                $this->updateCourseEntriesStatus($courseId, 'draft', 'history', $transactionStartedFlag);
                $addToIndexLog = true;
            } else if($flagParams['status'] == 'draft'){
                $this->updateCourseEntriesStatus($courseId, 'draft', 'history', $transactionStartedFlag);
            }
        }else if($flagParams['flow'] == "add" && $flagParams['status'] == ENT_SA_PRE_LIVE_STATUS){
            $addToIndexLog = true;
        }

        foreach($modelParams as $tableName => $tableData) {
            if(in_array($tableName, array('course_attributes', 'clientCourseToLDBCourseMapping', 'company_logo_mapping', 'course_start_date_info', 'listingExamAbroad', 'listing_attributes_table', 'listing_external_links', 'abroadCategoryPageData','abroad_course_custom_values_mapping','abroad_course_scholarship_mapping'))) {
                foreach($tableData as $individualRow){
                    $this->dbHandle->insert($tableName, $individualRow);
                }
            } else if($tableName == 'listingCMSUserTracking'){
                $this->addComments($this->dbHandle, $tableData['userId'], $tableData['listingId'], $tableData['tabUpdated'], $tableData['comments']);
            } else {
                $this->dbHandle->insert($tableName, $tableData);
            }
        }
        if($addToIndexLog){
            //check and add course to index log (desktop & mobile search)
            $this->checkAndAddCourseToIndexLog('course',$courseId,'index',true);
        }

        if($flagParams['status'] == ENT_SA_PRE_LIVE_STATUS) {
            $this->updateDeptCategories($this->dbHandle, $modelParams['course_details']['institute_id']);
        }

        $this->dbHandle->trans_complete();
        if($this->dbHandle->trans_status() === FALSE) {
            $returnFlag = false;
            throw new Exception('Transaction Failed');
        }

        if($courseId > 0 && $flagParams['status'] == ENT_SA_PRE_LIVE_STATUS)
        {
            //$this->updateCacheAfterPosting('course', array($courseId));
            //Now we will refresh just the parent tree of this course as well, hence we are adding this segment.
            global $forceListingWriteHandle; // used in ListingModelAbstract to acquire a write handle
            $forceListingWriteHandle = true;
            
            $this->load->builder('ListingBuilder','listing');
            $listingBuilder 				= new ListingBuilder;
            $abroadCourseRepository 		= $listingBuilder->getAbroadCourseRepository();
            $abroadInstituteRepository 		= $listingBuilder->getAbroadInstituteRepository();
            $abroadUniversityRepository 	= $listingBuilder->getUniversityRepository();
            $this->deleteCacheIfListingDeleted('course', $courseId);
            $abroadCourseRepository->disableCaching();
            $abroadInstituteRepository->disableCaching();
            $abroadUniversityRepository->disableCaching();
            $courseObj 						= $abroadCourseRepository->find($courseId);
            $abroadInstituteRepository->find($courseObj->getInstId());
            $abroadUniversityRepository->find($courseObj->getUniversityId());
        }


        return $returnFlag;
    }

    function updateDeptCategories($dbHandle, $listingId) {
        $queryCmd = "update listing_category_table lct set lct.status = 'history'
		    where listing_type = 'institute' and listing_type_id = ? and lct.status = '".ENT_SA_PRE_LIVE_STATUS."'";
        $dbHandle->query($queryCmd,array($listingId));

        $queryCmd = "INSERT INTO `listing_category_table` ( ".
            "`listing_category_id` ,`listing_type` ,`listing_type_id` ,`category_id` ,`status`) ".
            "SELECT DISTINCT NULL , 'institute', cpd.institute_id, cpd.sub_category_id, i.status ".
            "FROM abroadCategoryPageData cpd ".
            "JOIN institute i ON ( i.institute_id = cpd.institute_id AND i.status = '".ENT_SA_PRE_LIVE_STATUS."') ".
            "WHERE cpd.status = '".ENT_SA_PRE_LIVE_STATUS."' AND cpd.category_id > 0 AND cpd.institute_id = ?";
        $dbHandle->query($queryCmd,array($listingId));
        // error_log("AMITK ".$queryCmd);
    }



    /**
     *
     * @param type $courseId
     * @param type $userId
     * @param type $oldStatus
     * @param type $newStatus
     * @param type $isTransactionActive
     * @throws Exception
     * This function updates the status in the snapshot_course_mappings table and then
     * deletes the snapshot from the snapshot_course table.
     * This function is called in the workflow when converting the snapshot course to a detailed
     * course
     */
    function updateStatusInSnapshotCourseMappings($courseId,$userId, $oldStatus, $newStatus,$isTransactionActive){

        $this->initiateModel('write');

        $result= $this->checkIfSnapshotCourseExistInMappings('', $courseId, $oldStatus);
        if(count($result)==1){
            if(!$isTransactionActive){
                $this->dbHandle->trans_start();
            }

            $this->dbHandle->query("UPDATE snapshot_course_mapping SET status = ? WHERE newcourse_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            //mark snapshot course as deleted
            $this->deleteSnapshotCourse(array($result[0]['snapshotcourse_id']),$userId, 1);
            if(!$transactionStartedFlag) {
                $this->dbHandle->trans_complete();
                if($this->dbHandle->trans_status() === FALSE) {
                    $returnFlag = false;
                    throw new Exception('Transaction Failed');
                }
            }

        }

    }

    /**
     *
     * @param type $snapshotcourseId
     * @param type $courseId
     * @param type $status
     * @return type
     * function to check whether the snapshot course exists in the snapshot_course_mapping table.
     * It will be true if the snapshot course is already converted to a detaile course - status 'live'
     * It will also be true if the snapshot course to detailed course conversion started but not
     * published - status 'draft'
     */
    function checkIfSnapshotCourseExistInMappings($snapshotcourseId, $courseId, $status)
    {
        // get the read DB handle
        $this->initiateModel("read");
        $params = array();
        if(!empty($snapshotcourseId)){
            $params = array($status,$snapshotcourseId);
            $sql = "select * from snapshot_course_mapping where status = ? and snapshotcourse_id = ?";
        }
        if(!empty($courseId)){
            $params = array($status, $courseId);
            $sql = "select * from snapshot_course_mapping where status = ? and newcourse_id = ?";
        }

        $result = $this->dbHandle->query($sql,$params)->result_array();

        return $result;

    }

    function updateCourseEntriesStatus($courseId = NULL, $oldStatus = NULL, $newStatus = NULL, $transactionStartedFlag=false) {
        $this->initiateModel('write');
        $returnFlag = false;
        if(!empty($oldStatus) && !empty($newStatus) && !empty($courseId)) {
            $returnFlag = true;
            if(!$transactionStartedFlag) {
                $this->dbHandle->trans_start();
            }

            $this->dbHandle->query("UPDATE course_details SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            // for deleted restore only
            if($oldStatus == ENT_SA_DELETED_STATUS) {
                $this->dbHandle->query("UPDATE listings_main SET status = ?, pack_type = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,0,$courseId,$oldStatus));
            } else {
                $this->dbHandle->query("UPDATE listings_main SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            }
            $this->dbHandle->query("UPDATE course_attributes SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_contact_details SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE course_location_attribute SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE listingExamAbroad SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_attributes_table SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_category_table SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE clientCourseToLDBCourseMapping SET status = ? WHERE clientCourseID = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE company_logo_mapping SET status = ? WHERE listing_type = 'course' AND listing_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_external_links SET status = ? WHERE listing_type = 'course' AND listing_type_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE course_class_profile SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE course_job_profile SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE course_start_date_info SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE abroad_course_custom_values_mapping SET status = ? WHERE course_id = ? AND status = ?", array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE abroad_course_scholarship_mapping SET status = ? WHERE course_id = ? AND status = ?", array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE courseApplicationDetails SET status = ? WHERE courseId = ? AND status = ?", array($newStatus,$courseId,$oldStatus));
            $this->dbHandle->query("UPDATE abroadCourseApplicationEligibiltyDetails SET status = ? WHERE courseId = ? AND status = ?", array($newStatus,$courseId,$oldStatus));
            if($oldStatus == ENT_SA_PRE_LIVE_STATUS)
            {
                $this->dbHandle->query("UPDATE abroadCategoryPageData SET status = ? WHERE course_id = ? AND status = ?",array($newStatus,$courseId,$oldStatus));
            }

            if(!$transactionStartedFlag) {
                $this->dbHandle->trans_complete();
                if($this->dbHandle->trans_status() === FALSE) {
                    $returnFlag = false;
                    throw new Exception('Transaction Failed');
                }
            }
        }
        return $returnFlag;
    }



    function addDepartment($modelParams = array(), $flagParams = array()) {

        if(!empty($flagParams['dbHandle'])){
            $this->dbHandle = $flagParams['dbHandle'];
        }
        else{
            $this->initiateModel('write');
            error_log("new dbhandle");
        }

        $returnFlag = true;
        if(!$flagParams['isTransactionActive']){
            $this->dbHandle->trans_start();
        }

        $departmentId = $modelParams['institute']['institute_id'];
        if($flagParams['status'] == 'live'){
            $this->updateDepartmentEntriesStatus($this->dbHandle, $departmentId, ENT_SA_PRE_LIVE_STATUS, 'history');
            $this->updateDepartmentEntriesStatus($this->dbHandle, $departmentId, 'draft', 'history');
        } else if($flagParams['status'] == 'draft'){
            $this->updateDepartmentEntriesStatus($this->dbHandle, $departmentId, 'draft', 'history');
        }

        foreach($modelParams as $tableName => $tableData) {
            if(in_array($tableName, array('listing_attributes_table', 'listing_external_links'))) {
                foreach($tableData as $individualRow){
                    $this->dbHandle->insert($tableName, $individualRow);
                }
            } else if($tableName == 'listingCMSUserTracking'){
                $this->addComments($this->dbHandle, $tableData['userId'], $tableData['listingId'], $tableData['tabUpdated'], $tableData['comments']);
            } else {
                $this->dbHandle->insert($tableName, $tableData);
            }
        }

        if($flagParams['status'] == 'live') {
            $this->updateDepartmentEntriesStatus($this->dbHandle, $departmentId, 'draft', ENT_SA_PRE_LIVE_STATUS);
        }

        if(!$flagParams['isTransactionActive']){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
        if($departmentId > 0 && $flagParams['status'] == 'live')
        {
            $this->dataCollectorForLogging['calledVia'] = "addDepartment";
            $this->updateCacheAfterPosting('institute',array($departmentId));
            //Now we will refresh just the parent tree of this course as well, hence we are adding this segment.
            $this->load->builder('ListingBuilder','listing');
            $listingBuilder 				= new ListingBuilder;
            $abroadInstituteRepository 		= $listingBuilder->getAbroadInstituteRepository();
            $abroadUniversityRepository 	= $listingBuilder->getUniversityRepository();
            $abroadInstituteRepository->disableCaching();
            $abroadUniversityRepository->disableCaching();
            $departmentObj					= $abroadInstituteRepository->find($departmentId);
            $abroadUniversityRepository->find($departmentObj->getUniversityId());
        }

        if($departmentId > 0 && $flagParams['status'] == 'live'){
            $this->dbHandle->select("distinct(course_id) as courseId",false);
            $this->dbHandle->from("abroadCategoryPageData");
            $this->dbHandle->where("institute_id",$departmentId);
            $this->dbHandle->where("status","live");
            $res = $this->dbHandle->get()->result_array();
            if(!empty($res)){
                //$insertData = array_map(function($ele){return array('operation'=>'index','courseId'=>reset($ele));}, $res);
                //$this->dbHandle->insert_batch('abroadIndexLog',$insertData);
                $courseIds = array_map(function($ele){return $ele['courseId'];}, $res);
                $this->checkAndAddCourseToIndexLog('course',$courseIds,'index',true);
            }
        }


        return $returnFlag;
    }

    function updateDepartmentEntriesStatus($dbHandle = NULL, $departmentId = NULL, $oldStatus = NULL, $newStatus = NULL) {
        if(!empty($dbHandle)){
            $this->dbHandle = $dbHandle;
        } else {
            $this->initiateModel('write');
        }
        if(!empty($oldStatus) && !empty($newStatus) && !empty($departmentId)) {
            $this->dbHandle->query("UPDATE institute SET status = ? WHERE institute_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE listings_main SET status = ? WHERE listing_type = 'institute' AND listing_type_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE institute_location_table SET status = ? WHERE institute_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_contact_details SET status = ? WHERE listing_type = 'institute' AND listing_type_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_attributes_table SET status = ? WHERE listing_type = 'institute' AND listing_type_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE listing_external_links SET status = ? WHERE listing_type = 'institute' AND listing_type_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
            $this->dbHandle->query("UPDATE institute_university_mapping SET status = ? WHERE institute_id = ? AND status = ?",array($newStatus,$departmentId,$oldStatus));
        }
    }

    function getDepartmentEditInformation($departmentId = NULL) {
        if(empty($departmentId)){
            return array();
        }
        $this->initiateModel('read');

        /*
		 * Table: Listings_main
		 */
        $listingsMainSql = 	" SELECT lm.listing_type, lm.listing_type_id as institute_id, lm.status, lm.listing_title as department_name, lm.submit_date, lm.editedBy as last_modified_by_id, t.displayname as last_modified_by_name,t.firstname as last_modified_by_firstname,t.lastname as last_modified_by_lastname, lm.last_modify_date, lm.listing_seo_url, lm.listing_seo_title, lm.listing_seo_description, lm.listing_seo_keywords " .
            " FROM listings_main lm LEFT JOIN tuser t ON lm.editedBy = t.userid ".
            " WHERE lm.editedBy = t.userid AND lm.listing_type = 'institute' AND lm.listing_type_id = ? AND lm.status = ? LIMIT 1";
        $query = $this->dbHandle->query($listingsMainSql, array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($listingsMainSql,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $listingsMainResults = $query->row_array();
        if(!empty($listingsMainResults['listing_seo_url'])){
            $listingsMainResults['listing_seo_url'] = SHIKSHA_STUDYABROAD_HOME.$listingsMainResults['listing_seo_url'];
        }
        /*
		 * Table: institute
		 */
        $instituteSql 	= 	" SELECT i.abbreviation, i.profile_percentage_completion " .
            " FROM institute i ".
            " WHERE i.institute_id = ? AND i.status = ? AND i.institute_type != 'Department_Virtual' LIMIT 1";
        $query = $this->dbHandle->query($instituteSql, array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($instituteSql,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $instituteResults = $query->row_array();

        if(count($instituteResults )==0){
            show_404();
        }

        /*
		 * Table: institute_university_mapping
		 */
        $instituteUniversityMappingSql 	= 	" SELECT ium.university_id " .
            " FROM institute_university_mapping ium ".
            " WHERE ium.institute_id = ? AND ium.status = ? LIMIT 1";
        $query = $this->dbHandle->query($instituteUniversityMappingSql, array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($instituteUniversityMappingSql,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $instituteUniversityMappingResults = $query->row_array();

        /*
		 * Table: listing_attributes_table
		 */
        $listingAttributeSql 			= 	" SELECT lat.attributeValue, lat.caption " .
            " FROM listing_attributes_table lat ".
            " WHERE lat.listing_type = 'institute' AND lat.listing_type_id = ? AND lat.status = ?";
        $query = $this->dbHandle->query($listingAttributeSql, array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($listingAttributeSql,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $tempResults = $query->result_array();
        $listingAttributeResults = array();
        foreach($tempResults as $d){
            $listingAttributeResults[$d['caption']] = $d['attributeValue'];
        }

        /*
		 * Table: listing_external_links
		 */
        $listingExternalLinksSql 		= 	" SELECT lel.link_type, lel.link " .
            " FROM listing_external_links lel ".
            " WHERE lel.listing_type = 'institute' AND lel.listing_type_id = ? AND lel.status = ?";
        $query = $this->dbHandle->query($listingExternalLinksSql, array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($listingExternalLinksSql,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $tempResults = $query->result_array();
        $listingExternalLinksResults = array();
        foreach($tempResults as $d){
            $listingExternalLinksResults[$d['link_type']] = $d['link'];
        }

        /*
		 * Table: institute_location_table
		 */
        $instituteLocationTableSql 		= 	" SELECT ilt.institute_location_id, ilt.city_id, ilt.country_id, ilt.city_name, ilt.address_1 as address" .
            " FROM institute_location_table ilt ".
            " WHERE ilt.institute_id = ? AND ilt.status = ? LIMIT 1";
        $query = $this->dbHandle->query($instituteLocationTableSql , array($departmentId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($instituteLocationTableSql ,array($departmentId, ENT_SA_PRE_LIVE_STATUS));
        }
        $instituteLocationTableResults = $query->row_array();

        /*
		 * Table: listing_contact_details
		 */
        $instituteLocationId = $instituteLocationTableResults['institute_location_id'];
        $listingContactDetailsSql 		= 	" SELECT lct.contact_email, lct.contact_person, lct.contact_main_phone, lct.website " .
            " FROM listing_contact_details lct ".
            " WHERE lct.institute_location_id = ? AND lct.status = ? AND listing_type = 'institute' LIMIT 1";
        $query = $this->dbHandle->query($listingContactDetailsSql , array($instituteLocationId, 'draft'));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($listingContactDetailsSql ,array($instituteLocationId, ENT_SA_PRE_LIVE_STATUS));
        }
        $listingContactDetailsResults = $query->row_array();

        /*
		 * Table: study abroady country table
		 */
        $countryId = $instituteLocationTableResults['country_id'];
        $abroadCountrySql = " SELECT ct.name as country_name " .
            " FROM ".ENT_SA_COUNTRY_TABLE_NAME." ct ".
            " WHERE ct.countryId = ? LIMIT 1";
        $query = $this->dbHandle->query($abroadCountrySql , array($countryId));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($abroadCountrySql ,array($countryId));
        }
        $abroadCountryData = $query->row_array();

        /*
		 * Table: university table
		 */
        $universityId = $instituteUniversityMappingResults['university_id'];
        $universitySql 					= 	" SELECT u.name as university_name " .
            " FROM university u ".
            " WHERE u.university_id = ? order by id desc LIMIT 1";
        $query = $this->dbHandle->query($universitySql , array($universityId));
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($universitySql ,array($universityId));
        }
        $universityData = $query->row_array();

        $finalResult = array();
        $finalResult = array_merge($listingsMainResults,
            $instituteResults,
            $instituteUniversityMappingResults,
            $instituteLocationTableResults,
            $listingContactDetailsResults,
            $abroadCountryData,
            $universityData,
            $listingAttributeResults,
            $listingExternalLinksResults
        );
        return $finalResult;
    }

    function getUniversityLocationInfo($universityId = NULL,$status = "") {
        if(empty($universityId)){
            return array();
        }
        $this->initiateModel('read');
        $sql = "SELECT *
				FROM university_location_table
				WHERE university_id  = ? AND
				status = ?
				LIMIT 1";
        if($status !=""){
            $query = $this->dbHandle->query($sql,array($universityId,$status));
        }
        else{
            $query = $this->dbHandle->query($sql,array($universityId,'draft'));
            if($query->num_rows() <= 0) {
                $query = $this->dbHandle->query($sql,array($universityId, ENT_SA_PRE_LIVE_STATUS));
            }
        }
        $row = $query->row_array();
        return $row;
    }

    public function checkDepartmentNameForUniquenessInUniversity($departmentName = NULL, $universityId = NULL, $status = array('draft', 'live'), $departmentId = NULL) {
        $this->initiateModel('read');
        if(empty($departmentName) || empty($universityId)) {
            return array();
        }
        $queryParams = array();

        $query = "SELECT ium.institute_id,  i.institute_name FROM `institute_university_mapping` ium,  institute i  ".
            " WHERE ium.`institute_id` = i.institute_id AND i.institute_name = ? AND i.status IN (?) and ium.status IN (?) ".
            " AND ium.`university_id` = ? ";

        $queryParams[] = $departmentName;
        $queryParams[] = $status;
        $queryParams[] = $status;       //intentionally second time
        $queryParams[] = $universityId;

        if(!empty($departmentId)){
            $query .= " AND ium.institute_id != ?";
            $queryParams[] = $departmentId;
        }

        $query .= " LIMIT 1 ";
        $result = $this->dbHandle->query($query, $queryParams)->row_array();
        return $result;
    }

    function getSnapshotLastAddedOnDate()
    {
        $this->initiateModel('read');
        $queryCmd = "SELECT created FROM snapshot_courses ORDER BY id DESC LIMIT 1";
        $query = $this->dbHandle->query($queryCmd);
        $result = $query->row_array();
        //error_log("result: ".print_r($result['created'], true));
        return $result['created'];
    }

    function  getAllCityList($searchCityString,$LimitOffset,$LimitRowCount)
    {
        $this->initiateModel();

        $queryParams = array();

        $sql = "SELECT SQL_CALC_FOUND_ROWS city_name,
                name as country_name, cct.city_id as city_id,
                cct.countryId as country_id,
				st.state_name as state_name,
				cct.creationDate, cct.modificationDate
				FROM ".ENT_SA_COUNTRY_CITY_TABLE_NAME." cct LEFT JOIN ".ENT_SA_COUNTRY_TABLE_NAME." ct
				ON  ct.countryId=cct.countryId  
				LEFT JOIN ".ENT_SA_STATE_TABLE_NAME." st 
				ON st.state_id = cct.state_id 
				WHERE ";

        if(!empty($searchCityString) && $searchCityString !=" ") {
            $sql .= "cct.city_name LIKE ? AND ";
            $searchCityString = '%'.$searchCityString.'%';
            $queryParams[] = $searchCityString;
        }

        $sql .= " cct.countryId NOT IN ( 2,-1 ) 
				ORDER BY cct.modificationDate DESC LIMIT ?,? ";

        $queryParams[] = $LimitOffset;
        $queryParams[] = $LimitRowCount;

        $result['data'] = $this->dbHandle->query($sql, $queryParams)->result_array();

        $sql = "SELECT FOUND_ROWS() as TotalCount";
        $row = $this->dbHandle->query($sql)->row_array();
        $result['totalCount'] = $row['TotalCount'];
        return $result;
    }

    /**
     * Purpose : fetch list of all currencies from currency table
     * Params  :	none
     * Author  : SRB
     */
    function getCurrencyData()
    {
        // Get the Read DB handle
        $this->initiateModel("read");

        $queryCmd = "select * from currency";
        return $this->dbHandle->query($queryCmd)->result_array();
    }

    function getCurrencyNameById($currencyIds = array())
    {
        if(empty($currencyIds) || count($currencyIds) == 0) {
            return false;
        }
        $this->initiateModel("read");
        $this->dbHandle->select('id, currency_name');
        $this->dbHandle->where_in('id', $currencyIds);
        $this->dbHandle->from('currency');
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }

    function getAbroadMainLDBCourses() {
        // Get the Read DB handle
        $this->initiateModel("read");
        $queryCmd = "select * from tCourseSpecializationMapping where CategoryId = 1 AND ParentId = 1 AND scope = 'abroad' AND isEnabled = 1";
        return $this->dbHandle->query($queryCmd)->result_array();
    }


    /**
     * Purpose : save data from add university form into respective tables
     * Params  :	$formData
     * Author  : SRB
     */
    function addEditUniversityData($univFormData,$postingLib)
    {
        // get the write DB handle
        $this->initiateModel("write");
        $this->dbHandle->trans_start();
        $addToIndexLog = false;
        if($univFormData['univActionType'] == 'addUniversityForm') {
            $univFormData['universityId']     = $this->_getNewAutogeneratedId('university');
            $univFormData['universityLocationId'] = $this->_getNewAutogeneratedId('university_location');

            $univFormData["submit_date"] = date('Y-m-d H:i:s');
            $univFormData["last_modify_date"] = date('Y-m-d H:i:s');

            //if univ being added first time its client/owner is same as the user creating the university
            $univFormData["client_id"] = $univFormData["createdBy"];

            // default value of viewCount
            $univFormData['viewCount'] = 1;

            // create seo url only when univ is added
            $countryArr = $this->getAbroadCountries(array($univFormData['univCountry']));
            $countryName = $countryArr[$univFormData['univCountry']]['name'];
            $abroadPostingLib = $this->load->library('listingPosting/AbroadPostingLib');
            $univFormData["univSeoUrl"] = $abroadPostingLib->getUniversityUrl($univFormData['universityId'], $univFormData["univName"], $countryName);

            //check if university published already
            $isPublished = $this->checkIfUniversityPublished($univFormData['universityId']);
        }
        else{
            $univFormData['universityId'] = $univFormData['oldUnivId'];
            $univFormData['universityLocationId'] = $univFormData['oldUnivLocationId'];

            //check if university published already
            $isPublished = $this->checkIfUniversityPublished($univFormData['universityId']);

            //get last client id/ username of the university
            $listings_main_data = $this->getListingMainData('university',$univFormData['universityId']);
            $univFormData['client_id'] = $listings_main_data[0]['username'];

            // last value of viewCount
            $univFormData['viewCount'] = $listings_main_data[0]['viewCount'];

            // update previous entries in all tables as history/live/draft
            $this->updateUniversityDataOnEdit($univFormData,true);
            $univFormData["submit_date"] = $univFormData['oldSubmitDate'];

            // get the last entry's submit date
            $univFormData["last_modify_date"] = date('Y-m-d H:i:s');
            $addToIndexLog = true;
        }
        $univFormData["listing_type"] = "university";


        /********************************** insertion in "listings_main" ******************************/
        $data = array(
            'listing_type_id'       => $univFormData['universityId'],
            'listing_title'         => $univFormData["univName"],
            'status'            => $univFormData["univSaveMode"],
            'listing_type'          => $univFormData["listing_type"],
            'submit_date'           => $univFormData["submit_date"],
            'last_modify_date'      => $univFormData["last_modify_date"],
            'username'          => $univFormData["client_id"],
            'editedBy'          => $univFormData["createdBy"],
            'viewCount'         => $univFormData["viewCount"],
            'listing_seo_url'       => $univFormData["univSeoUrl"],
            'listing_seo_title'     => $univFormData["univSeoTitle"],
            'listing_seo_keywords'      => $univFormData["univSeoKeywords"],
            'listing_seo_description'   => $univFormData["univSeoDescription"]
        );
        //insert row in "listings_main"
        $this->dbHandle->insert('listings_main', $data);

        // get the primary key of the inserted row
        $listings_main_Id = $this->dbHandle->insert_id();

        /********************************** insertion in "university" *********************************/
        $data = array(
            'university_id'     => $univFormData['universityId'],
            'name'          => $univFormData["univName"],
            'expert_id'     => $univFormData["univExpert"],
            'acronym'       => $univFormData["univAcronym"],
            'establish_year'    => ($univFormData["univEstablishedYear"]==""?NULL:$univFormData["univEstablishedYear"]),
            'logo_link'     => $univFormData['logoArr']['url'],
            'type_of_institute' => $univFormData["instituteType1"],
            'type_of_institute2'    => $univFormData["instituteType2"],
            'affiliation'       => $univFormData["univAffiliation"],
            'accreditation'     => $univFormData["univAccreditation"],
            'brochure_link'     => str_replace(MEDIAHOSTURL, '', $univFormData["institute_request_brochure_link"]),
            'conditionalOffer'      => $univFormData["conditionalOffer"],
            'conditionalOfferDescription'       => $univFormData["conditionalOfferDescription"],
            'conditionalOfferLink'      => $univFormData["conditionalOfferLink"],
            'status'        => $univFormData["univSaveMode"],
            'percentage_profile_completion' => $univFormData["profile_percentage_completion"]
        );
        // insert  data in "university"
        $this->dbHandle->insert('university', $data);

        /***************************** insertion in "listing_attributes_table" ***********************/
        if(count($univFormData['listingAttributes'])>0){
            // add university id to all attributes
            for($i=0;$i<count($univFormData['listingAttributes']);$i++)
            {
                $univFormData['listingAttributes'][$i]['listing_type_id'] = $univFormData['universityId'];
            }
            $this->dbHandle->insert_batch('listing_attributes_table', $univFormData['listingAttributes']);
        }
        /***************************** insertion in "universityScoreReporting" ***********************/
        if(count($univFormData['scoreReporting'])>0){
            // add university id to all attributes
            for($i=0;$i<count($univFormData['scoreReporting']);$i++)
            {
                $univFormData['scoreReporting'][$i]['universityId'] = $univFormData['universityId'];
            }
            $this->dbHandle->insert_batch('universityScoreReporting', $univFormData['scoreReporting']);
            //echo "LAS". $this->dbHandle->last_query();
        }
        /***************************** insertion in "university_location_table" ***********************/
        $data = array(
            'university_location_id'=> $univFormData['universityLocationId'],
            'university_id'=>      $univFormData['universityId'],
            'city_id'=>        $univFormData['univCity'],
            'country_id'=>         $univFormData['univCountry'],
            'address'=>        $univFormData['univContactAddress'],
            'status'=>         $univFormData['univSaveMode']
        );
        $this->dbHandle->insert('university_location_table', $data);

        /***************************** insertion in "listing_contact_details" ***********************/
        if(!empty($univFormData['univContactEmail']) || !empty($univFormData['univContactPhone']) || !empty($univFormData['univContactWebsite']))
        {
            $data = array(
                'contact_email' =>    $univFormData['univContactEmail'],
                'contact_main_phone' =>   $univFormData['univContactPhone'],
                'website' =>      $univFormData['univContactWebsite'],
                'listing_type' =>     $univFormData['listing_type'],
                'listing_type_id' =>  $univFormData['universityId'],
                'institute_location_id' =>$univFormData['universityLocationId'],
                'status'=>        $univFormData['univSaveMode']
            );
            $this->dbHandle->insert('listing_contact_details', $data);
        }

        /***************************** insertion in "institute_uploaded_media" ***********************/
        //insertion in "institute_uploaded_media" will take place in case of university pictures;
        $uploadData = array();
        $uploadDataForMediaTable = array();
	$captionCount = 0;
        foreach($univFormData['pictureArr'] as $key => $pictureData) {
            if($pictureData['forListingMediaTableOnly']!=1){
                $uploadData[$key] = array( // for pictures
                    'listing_type'=>        $univFormData['listing_type'],
                    'listing_type_id'=>     $univFormData['universityId'],
                    'institute_location_id'=>   $univFormData['universityLocationId'],
                    'media_id'=>            $pictureData['mediaid'],
                    'media_type'=>          'photo',
                    'url'=>             $pictureData['url'],
                    'uploadeddate'=>        date('Y-m-d'),
                    'thumburl'=>            $pictureData['thumburl'],
                    'status'=>          ENT_SA_PRE_LIVE_STATUS//$univFormData['univSaveMode']
                );
		if($univFormData['univPictureCaption'][$captionCount]!=''){
			$uploadData[$key]['name'] =	$univFormData['univPictureCaption'][$captionCount];
		}else{
			$uploadData[$key]['name'] =	strip_tags($univFormData["univName"]).' picture';
		}
            }
	    $captionCount++;
            // insertion in LISTING_MEDIA_TABLE for pictures ..
            $uploadDataForMediaTable[$key] = array(
                'type'=>        $univFormData['listing_type'],
                'type_id'=>     $univFormData['universityId'],
                'media_id'=>        $pictureData['mediaid'],
                'media_type'=>      'photo',
                'associationdate'=> date('Y-m-d'),
                'status'=>      $univFormData['univSaveMode']
            );

        }
        // insert all pictures in listing_uploaded_media
        foreach($uploadData as $uploadedPicture){
            $this->dbHandle->insert('institute_uploaded_media', $uploadedPicture);
        }
        // insert all pictures in listing_media_table
        foreach($uploadDataForMediaTable as $uploadedPictureMediaTable){
            $this->dbHandle->insert('listing_media_table', $uploadedPictureMediaTable);
        }
        // youtube video link addition
        if(!array_key_exists("error",$univFormData['videoArr'])){ //if there was no error
            //loop over each video link & update
            foreach(array_values($univFormData['videoArr']) as $key => $video){
                // an update will be fired in case of a youtube video link since it has already been uploaded


                $queryParams = array();
                $sql = 'update  institute_uploaded_media set listing_type = "university" '.
                    ' , listing_type_id = ? '.
                    ' , institute_location_id = ? '.
                    ' , status = "'.ENT_SA_PRE_LIVE_STATUS.'" '.
                    ' , name = ? '.
                    ' where media_id = ? and media_type = "video" and (status = "notlinked" or status is NULL)' ;

                $queryParams[] = $univFormData['universityId'];
                $queryParams[] = $univFormData['universityLocationId'];
                if($univFormData['univVideoCaption'][$key] != ''){
                    $vidTitle = $univFormData['univVideoCaption'][$key];
                }else{
                    $vidTitle = strip_tags($this->dbHandle->escape_str($univFormData["univName"])).'_video';
                }
                $queryParams[] = $vidTitle;
                $queryParams[] = $video['fileId'];

                $this->dbHandle->query($sql, $queryParams);

                // insert into listing_media_table as well..
                $uploadData = array(
                    'type'=>        $univFormData['listing_type'],
                    'type_id'=>     $univFormData['universityId'],
                    'media_id'=>    $video['fileId'],
                    'media_type'=>  'video',
                    'associationdate'=> date('Y-m-d'),
                    'status'=>      $univFormData['univSaveMode']
                );
                $this->dbHandle->insert('listing_media_table', $uploadData);

            }
        }
        //throw new Exception('Transaction Failed');die;
        /***************************** insertion in "listing_admission_contact_details" ***********************/
        $data = array(
            'listing_type'=>        $univFormData['listing_type'],
            'listing_type_id'=>     $univFormData['universityId'],
            'admission_website_url'=>   $univFormData['univWebLink'],
            'city_id'=>         $univFormData['univCity'],
            'admission_contact_person'=>$univFormData['univAdmissionContact'],
            'status'=>          $univFormData['univSaveMode']
        );
        $this->dbHandle->insert('listing_admission_contact_details', $data);

        /***************************** insertion in "university_departments" ***********************/
        if(count($univFormData['univDeptName'])>0){
            $deptArr = $univFormData['univDeptName'];
        }
        else {
            $deptArr = $univFormData['univDeptWebsite'];
        }
        for($i = 0; $i < count($deptArr);$i++){
            $data = array('university_id'=>     $univFormData['universityId'],
                'department_name'=>   $univFormData['univDeptName'][$i],
                'department_website_url'=>$univFormData['univDeptWebsite'][$i],
                'status'=>        $univFormData['univSaveMode']
            );
            if(!(empty($data['department_name']) && empty($data['department_website_url'])))
            {
                $this->dbHandle->insert('university_departments', $data);
            }
        }
        /***************************** insertion in "university_campus_accommodation" ***********************/
        if($univFormData['univAccomodationDetail']!="" ||
            $univFormData['univAccomodationLink']!="" ||
            $univFormData['univLivingExpense']!="" ||
            $univFormData['univLivingExpenseDescription']!="" ||
            $univFormData['univLivingExpenseLink']!="" ||
            $univFormData['univCurrency'] !=0){
            $data = array(
                'university_id'=>           $univFormData['universityId'],
                'accommodation_details'=>       $univFormData['univAccomodationDetail'],
                'accommodation_website_url'=>   $univFormData['univAccomodationLink'],
                'living_expenses'=>     $univFormData['univLivingExpense'],
                'currency'=>            $univFormData['univCurrency'],
                'living_expense_details'=>  $univFormData['univLivingExpenseDescription'],
                'living_expense_website_url'=>  $univFormData['univLivingExpenseLink'],
                'status'=>          $univFormData['univSaveMode']
            );
            $this->dbHandle->insert('university_campus_accommodation', $data);
        }

        /***************************** insertion in "university_campuses" ***********************/
        if(count($univFormData['univCampusName'])>0){
            $campusArr = $univFormData['univCampusName'];
        }
        else if(count($univFormData['univCampusWebsite'])>0){
            $campusArr = $univFormData['univCampusWebsite'];
        }
        else{
            $campusArr = $univFormData['univCampusAddress'];
        }
        for($i = 0; $i < count($campusArr); $i++){
            if($univFormData['univCampusName'][$i]!="" || $univFormData['univCampusWebsite'][$i]!="" || $univFormData['univCampusAddress'][$i]!=""){
                $data = array(
                    'university_id'     =>  $univFormData['universityId'],
                    'campus_name'       =>  $univFormData['univCampusName'][$i],
                    'campus_website_url'=>  $univFormData['univCampusWebsite'][$i],
                    'campus_address'    =>  $univFormData['univCampusAddress'][$i],
                    'status'            =>  $univFormData['univSaveMode']
                );

                $this->dbHandle->insert('university_campuses', $data);
            }
        }

        /***************************** insertion in "listing_external_links" ***********************/
        $links = array(
            'facebook_page'                      =>  $univFormData['univFBPage'],
            'website_link'                       =>  $univFormData['univWebLink'],
            'india_consultants_page_link'        =>  $univFormData['univIndianConsultant'],
            'international_students_page_link'   =>  $univFormData['univInternationalStudentsLink'],
            'asian_students_page_link'           =>  $univFormData['univAsianStudentsLink']
        );
        foreach($links as $key=>$link){
            if($link != ""){
                $data = array(
                    'listing_type'    =>  $univFormData['listing_type'],
                    'listing_type_id' =>  $univFormData['universityId'],
                    'link_type'       =>  $key,
                    'link'            =>  $link,
                    'status'          =>  $univFormData['univSaveMode']
                );
                $this->dbHandle->insert('listing_external_links', $data);
            }
        }

        /***************************** insertion in "university_announcements" ***********************/
        if($univFormData['announcementCheck'] == 'on'){
            $data = array(
                'universityId'              => $univFormData['universityId'],
                'announcementText'          => $univFormData['announcementText'],
                'callToActionText'          => $univFormData['announcementCallToAction'],
                'startDate'                 => $univFormData['announcementStartDate'],
                'endDate'                   => $univFormData['announcementEndDate'],
                'status'                    => $univFormData['univSaveMode']
            );
            $this->dbHandle->insert('university_announcements', $data);
        }

        /**************************** add entries to sa_university_custom_attributes ************************/
        if(count($univFormData['customKbFields']) > 0){
            $dataToInsert = array();
            foreach ($univFormData['customKbFields'] as $key=>$customKbField) {
                $customKbField['university_id'] = $univFormData['universityId'];
                $customKbField['status'] = $univFormData['univSaveMode'];
                array_push($dataToInsert,$customKbField);
            }
//            _p($dataToInsert);die;
            $this->dbHandle->insert_batch('sa_university_custom_attributes',$dataToInsert);
        }

        /***************************** insertion in "listingCMSUserTracking" ***********************/
        if($univFormData['univUserComments']!=""){
            $this->addComments($this->dbHandle, $univFormData['createdBy'], $univFormData['universityId'], $univFormData['listing_type'], $univFormData['univUserComments']);
        }

        /********************insertion in universityApplicationProfiles *****************************/
        if(is_array($univFormData['univApplicationProfileName']) && count($univFormData['univApplicationProfileName'])>0)
        {
            for($i=0;$i<count($univFormData['univApplicationProfileName']);$i++)
            {   // generate university application profile id
                if($univFormData['univActionType'] == 'addUniversityForm'||$univFormData['applicationProfileId'][$i]==""){
                    $univFormData['applicationProfileId'][$i] = $this->_getNewAutogeneratedId('university_application_profiles');
                }// else it would be available already

                $universityApplicationProfilesData = array(
                    'applicationProfileId'      =>  $univFormData['applicationProfileId'][$i],
                    'universityId'              =>  $univFormData['universityId'],
                    'name'                      =>  $univFormData['univApplicationProfileName'][$i],
                    'applicationProcessUrl'     =>  str_replace(MEDIAHOSTURL, '', $univFormData['univApplicationProcess'][$i]),
                    'sopRequired'               =>  $univFormData['univSOPRequired'][$i]=='on'?'1':'0',
                    'lorRequired'               =>  $univFormData['univLORRequired'][$i]=='on'?'1':'0',
                    'essayRequired'             =>  $univFormData['univEssayRequired'][$i]=='on'?'1':'0',
                    'cvRequired'                =>  $univFormData['univCVRequired'][$i]=='on'?'1':'0',
                    'allDocuments'              =>  $univFormData['univAllDocuments'][$i],
                    'admissionType'             =>  $univFormData['univAdmissionType'][$i],
                    'applyNowLink'              =>  $univFormData['univApplyNowLink'][$i],
                    'status'                    =>  $univFormData['univSaveMode'],
                    'addedOn'                   =>  ($univFormData['univApplicationProfileAddedAt'][$i]=='')?date('Y-m-d H:i:s'):$univFormData['univApplicationProfileAddedAt'][$i],
                    'addedBy'                   =>  ($univFormData['univApplicationProfileAddedBy'][$i]=='')?$univFormData["createdBy"]:$univFormData['univApplicationProfileAddedBy'][$i],
                    'modifiedOn'                =>  date('Y-m-d H:i:s'),
                    'modifiedBy'                =>  $univFormData["createdBy"]
                );
                if($univFormData['univSOPComments'][$i]!='' && $univFormData['univSOPRequired'][$i]=='on')
                { $universityApplicationProfilesData['sopComments'] = $univFormData['univSOPComments'][$i]; }
                if($univFormData['univLORComments'][$i]!='' && $univFormData['univLORRequired'][$i]=='on')
                { $universityApplicationProfilesData['lorComments'] = $univFormData['univLORComments'][$i]; }
                if($univFormData['univEssayComments'][$i]!='' && $univFormData['univEssayRequired'][$i]=='on')
                { $universityApplicationProfilesData['essayComments'] = $univFormData['univEssayComments'][$i]; }
                if($univFormData['univCVComments'][$i]!='' && $univFormData['univCVRequired'][$i]=='on')
                { $universityApplicationProfilesData['cvComments'] = $univFormData['univCVComments'][$i]; }
                if($univFormData['univApplicationFAQLink'][$i]!='')
                { $universityApplicationProfilesData['applicationFaqLink'] = $univFormData['univApplicationFAQLink'][$i]; }

                $this->dbHandle->insert('universityApplicationProfiles', $universityApplicationProfilesData);

                for($j=0;$j<count($univFormData['univApplicationSubmissionName'][$i]);$j++)
                {
                    /*******************insertion in applicationSubmissionDates *****************/
                    if($univFormData['lastdate'][$i][$j]!='' && $univFormData['univApplicationSubmissionName'][$i][$j]!=''){
                        $applicationSubmissionDates = array(
                            'applicationProfileId'          => $univFormData['applicationProfileId'][$i],
                            'applicationSubmissionName'     => $univFormData['univApplicationSubmissionName'][$i][$j],
                            'applicationSubmissionLastDate' => date_format(date_create_from_format('d/m/Y',$univFormData['lastdate'][$i][$j]),'Y-m-d'),
                            'status'                        => $univFormData['univSaveMode'],
                            'intakeSeason'                  => ($univFormData['intakeSeason'][$i][$j]!=''?$univFormData['intakeSeason'][$i][$j]:NULL),
                            'intakeYear'                    => ($univFormData['intakeYear'][$i][$j]!=''?$univFormData['intakeYear'][$i][$j]:NULL),
                            'intakeMonth'                   => ($univFormData['intakeMonth'][$i][$j]!=''?$univFormData['intakeMonth'][$i][$j]:NULL),
                            'intakeRound'                   => ($univFormData['intakeRound'][$i][$j]!=''?$univFormData['intakeRound'][$i][$j]:NULL)
                        );
                        $this->dbHandle->insert('applicationSubmissionDates', $applicationSubmissionDates);
                        //echo "LAST:: ".$this->dbHandle->last_query();
                    }
                }
            }
        }
        /******************** add a dummy department when university is PUBLISHED first time *****************/
        if($univFormData['univSaveMode']==ENT_SA_PRE_LIVE_STATUS && $univFormData["instituteType2"] == "college"){
            // get city data for selected cityid
            $city = $this->getCityById($univFormData['univCity']) ;
            //prepare array with relevant university data
            $univDetails = array('univId'   =>$univFormData['universityId'],
                'name'     =>$univFormData['univName'],
                'city_id'  =>$univFormData['univCity'],
                'city'     =>$city,
                'country_id'   =>$univFormData['univCountry'],
                'address'      =>$univFormData['univContactAddress'],
                'createdBy'    =>$univFormData['createdBy']
            );
            $this->callToAddDummyDept($univDetails, $isPublished );
        }

        /********************** Add entries to abroadIndexLog if required ***********************/
        if($addToIndexLog && $univFormData['univSaveMode']=='live'){
            $this->dbHandle->select("distinct(course_id) as courseId",false);
            $this->dbHandle->from("abroadCategoryPageData");
            $this->dbHandle->where("university_id",$univFormData['universityId']);
            $this->dbHandle->where("status","live");
            $res = $this->dbHandle->get()->result_array();
            if(!empty($res)){
                //$insertData = array_map(function($ele){return array('operation'=>'index','courseId'=>reset($ele));}, $res);
                //$this->dbHandle->insert_batch('abroadIndexLog',$insertData);
                $courseIds = array_map(function($ele){return $ele['courseId'];}, $res);
                $this->checkAndAddCourseToIndexLog('course',$courseIds,'index',true);
            }
        }

        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');

        }
        if(!empty($univFormData['universityId']) && $univFormData["univSaveMode"] == ENT_SA_PRE_LIVE_STATUS)
        {
            $this->dataCollectorForLogging['calledVia'] = "addUniv";
            $this->updateCacheAfterPosting('university', array( $univFormData['universityId'] ));
        }


    }
    /**
     * Purpose : to identify if the university is being published for the first time and call the function to add dummy dept
     * Params  :	form data
     * Author  : SRB
     */
    function callToAddDummyDept($univDetails, $isPublished)
    {
        //$this->initiateModel('write');
        //$this->dbHandle->trans_start();
        //check if the university has been published before
        if(!$isPublished)
        { error_log("adding Dummy dept");
            // now add dummy dept for this university
            $abroadPostingLib = $this->load->library('listingPosting/AbroadPostingLib');
            $abroadPostingLib->addDummyDepartmentForUniversity($this->dbHandle, $univDetails);
        }
        //$this->dbHandle->trans_complete();
        //if($this->dbHandle->trans_status() === FALSE) {
        //	$returnFlag = false;
        //	throw new Exception('Transaction Failed');
        //}
    }

    /**
     * Purpose : Method to update old rows of university data tables , whil saving in edit mode
     * Params  :	form data
     * Author  : SRB
     */
    private function updateUniversityDataOnEdit(&$univFormData, $transactionActive)
    {
        $this->initiateModel('write');
        if(!$transactionActive )
        {
            $this->dbHandle->trans_start();
        }
        $newStatus = "history";
        $oldStatus = $univFormData['oldUnivSaveMode'];
        // if we are publishing then we need to set both draft & live versions to history
        if($univFormData['univSaveMode'] == ENT_SA_PRE_LIVE_STATUS) {
            $oldStatus = array(ENT_SA_PRE_LIVE_STATUS, 'draft');
        }
        else{ //in case of saving as draft , only previous draft must be made history
            $oldStatus = array('draft');
        }

        $univId = $univFormData['oldUnivId'];
        $univLocationId = $univFormData['oldUnivLocationId'];
        $mediaids = array();
        //we need to get media details(mediaId & url) from institute_uploaded_media for images that were not removed/changed.
        if(count($univFormData['univPicturesMediaId'])>0){
            foreach ($univFormData['univPicturesMediaId']  as $key => $picture){
                if($picture > 0){
			$sql = 'select url,thumburl from institute_uploaded_media where status = "'.ENT_SA_PRE_LIVE_STATUS.'" and listing_type = "university" and listing_type_id = ? and media_id = ?';
			$res = $this->dbHandle->query($sql,array($univId,$picture))->result_array();
			$picData = array('mediaid'=>$picture,
				'url'	=>$res[0]['url'],
				'thumburl'=>$res[0]['thumburl'],
				'forListingMediaTableOnly'=> 1);
			$univFormData['pictureArr'][] = $picData; 
			$title=($univFormData['univPictureCaptionSet'][$key]!=''?$univFormData['univPictureCaptionSet'][$key]:$univFormData["univName"].' picture');
			$this->dbHandle->query('UPDATE institute_uploaded_media SET name = ? where status = "'.ENT_SA_PRE_LIVE_STATUS.'" and listing_type = "university" and listing_type_id = ? and media_id = ?',array($title,$univId,$picture));			
		}
            }
        }

        //make history :)
        $this->dbHandle->query("UPDATE listings_main SET status = ? WHERE listing_type = 'university' AND listing_type_id = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE university SET status = ? WHERE university_id = ? AND status in (?)",array($newStatus,$univId,$oldStatus));
        $this->dbHandle->query("UPDATE university_location_table SET status = ? WHERE university_id = ? AND university_location_id = ? AND status in (?)",array($newStatus,$univId,$univLocationId, $oldStatus));
        $this->dbHandle->query("UPDATE university_campuses SET status = ? WHERE university_id = ? AND status in (?)",array($newStatus,$univId,$oldStatus));
        $this->dbHandle->query("UPDATE university_departments SET status = ? WHERE university_id = ? AND status in (?)",array($newStatus,$univId,$oldStatus));
        $this->dbHandle->query("UPDATE university_campus_accommodation SET status = ? WHERE university_id = ? AND status in (?)",array($newStatus,$univId,$oldStatus));
        $this->dbHandle->query("UPDATE listing_contact_details SET status = ? WHERE listing_type = 'university' AND listing_type_id = ? AND status in (?)",array($newStatus,$univId,$oldStatus));
        $this->dbHandle->query("UPDATE listing_attributes_table SET status = ? WHERE listing_type = 'university' AND listing_type_id = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE listing_external_links SET status = ? WHERE listing_type = 'university' AND listing_type_id = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE listing_admission_contact_details SET status = ? WHERE listing_type = 'university' AND listing_type_id = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE university_announcements SET status = ? WHERE universityId = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE universityScoreReporting SET status = ? WHERE universityId = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        $this->dbHandle->query("UPDATE sa_university_custom_attributes SET status = ? WHERE university_id = ? AND status in (?)",array($newStatus,$univId, $oldStatus));


        // update the status of entries in listing_media_table & institute uploaded media...
        $mediaUpdateSql = "update listing_media_table LMT
			    inner join institute_uploaded_media IUM
			    on (LMT.type = IUM.listing_type
				    and LMT.type_id = IUM.listing_type_id
				    and LMT.media_id = IUM.media_id)
			    set LMT.status = 'history'
			    where LMT.type = 'university' and 
				    LMT.type_id = ? and LMT.status in (?) ";
        $this->dbHandle->query($mediaUpdateSql,array($univId, $oldStatus));

        // update universityApplicationProfiles ,applicationSubmissionDates

        $applicationProfileIds = $this->getUnivApplicationProfileIdsForDeletion(array($univId));

        if(is_array($applicationProfileIds) && count($applicationProfileIds)>0){
            $applicationProfileIds = array_filter($applicationProfileIds);
            $this->dbHandle->query("UPDATE applicationSubmissionDates SET status = ? WHERE applicationProfileId in (?) AND status in (?)", array($newStatus,$applicationProfileIds, $oldStatus));
            $this->dbHandle->query("UPDATE universityApplicationProfiles SET status = ? WHERE universityId = ? AND status in (?)",array($newStatus,$univId, $oldStatus));
        }

        // update the city id in institute location table for all its departments
        if($univFormData['univSaveMode'] == ENT_SA_PRE_LIVE_STATUS){
            $this->updateDepartmentCityOnUniversityEdit($univFormData['univCity'], $univId, true);
            $this->updateAbroadCategoryPageDataOnUniversityEdit($univFormData['univCity'], $univFormData['univState'],$univId, true);
        }

        if(!$transactionActive ){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }
    /**
     * Purpose : Method to find if a university exists
     * Params  :	none
     * Author  : Romil Goel
     */
    function findIfUniversityExists($univName,$univCountryId,$univId)
    {

        if (!is_array($univId)) {
            $univId = array($univId);
        }

        // get the write DB handle
        $this->initiateModel("read");

        $queryParams = array();
        $query = "select 
			lm.listing_type_id
		    from
			listings_main lm
			    inner join
			university_location_table ult ON (lm.listing_type_id = ult.university_id and lm.status=ult.status
			    and ult.status in ('".ENT_SA_PRE_LIVE_STATUS."' , 'draft'))
		    where
			 lm.listing_type = 'university'
			and lm.listing_title = ? 
			    and ult.country_id = ?";

        $queryParams[] = $univName;
        $queryParams[] = $univCountryId;

        if($univId > 0){
            $query .= " and lm.listing_type_id not in (?)";
            $queryParams[] = $univId;
        }
        $results = $this->dbHandle->query($query, $queryParams)->result_array();

        return count($results );
    }

    /**
     * Purpose : Method to check if university published already
     * Params  :	univ id
     * Author  : SRB
     */
    function checkIfUniversityPublished($univId)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $sql = "select count(*) as live_count from university where status = '".ENT_SA_PRE_LIVE_STATUS."' and university_id = ?";
        //error_log("adding query ::".$sql);
        $res = $this->dbHandle->query($sql,array($univId))->result_array();
        //error_log("before adding ::::".$res[0]['live_count']);
        if($res[0]['live_count'] == 1)
        { return true; }
        else
        { return false; }
    }
    /**
     * Purpose : Method to get the data for university table data
     * Params  :	none
     * Author  : Romil Goel
     */
    function getUniversityTableData($displayDataStatus, $paginatorObj, $searchUnivName)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $LimitOffset 	= $paginatorObj->getLimitOffset();
        $LimitRowCount 	= $paginatorObj->getLimitRowCount();

        $queryParams0 = array();
        $queryParams = array();

        // determine the status of the data to be fetched
        $status = array("draft",ENT_SA_PRE_LIVE_STATUS);

        if($displayDataStatus == 'draft')
            $status = array("draft");
        else if($displayDataStatus == 'published')
            $status = array(ENT_SA_PRE_LIVE_STATUS);

        // get list of last updated listing Ids
        /*$sql0 = "select SQL_CALC_FOUND_ROWS distinct lm.listing_type_id from listings_main lm inner join university u on lm.listing_type_id = u.university_id and lm.status=u.status
			where lm.status in (?) and lm.listing_type = 'university'";*/
        $sql0 = "select SQL_CALC_FOUND_ROWS distinct listing_type_id from listings_main where status in (?) and listing_type = 'university'";
        $queryParams0[] = $status;

        // prepare the like clause
        $likeClause = "";
        if(!empty($searchUnivName))
        {
            $searchQueryStr = '%'.$searchUnivName.'%';
            $likeClause = " AND listing_title LIKE ?";
            $queryParams0[] = $searchQueryStr;
            $queryParams[] = $searchQueryStr;
        }
        $sql0 .= $likeClause." order by last_modify_date desc limit ?,?";

        $queryParams0[] = $LimitOffset;
        $queryParams0[] = $LimitRowCount;

        $univIds = $this->dbHandle->query($sql0, $queryParams0)->result_array();

        //echo "<br>".$this->dbHandle->last_query();
        $univIds = array_map(function($a){return $a['listing_type_id'];},$univIds);
        // fetch the count of total rows fetched
        $query = "SELECT FOUND_ROWS() as TotalCount";
        $row = $this->dbHandle->query($query)->row_array();
        $result['totalCount'] = $row['TotalCount'];

        $univListingIds = array();

        if(!empty($univIds)){
            $sql1 = "select max(listing_id) as listing_id, listing_type_id from listings_main  where listing_type_id in (?) and listing_type='university' group by listing_type_id";
            $univListingIds = $this->dbHandle->query($sql1, array($univIds))->result_array();
        }

        //echo "<br>".$this->dbHandle->last_query();
        $univListingIds = array_map(function($a){return $a['listing_id'];},$univListingIds);
        //_p($univListingIds);
        // prepare the where clause
        $whereClause = "AND lm.`listing_type` = 'university'
		        AND lm.status in (?)
		        AND lm.`listing_id` in (?)";

        // select query for MIS
        if(!empty($univListingIds)) {
            $query = "SELECT  
		    lm.`listing_id`,
		    lm.`listing_type_id` as universityId,
		    univ.name as universityName,
		    lm.status as status,
		    ult.city_id as cityId,
		    ult.country_id as countryId,
		    cct.city_name as cityName,
		    COALESCE(st.state_name,'') as stateName,
		    ct.name as countryName,
		    lm.last_modify_date as submitDate,
		    COALESCE(univ.percentage_profile_completion,0) as profileCompletion,
		    case when univ.type_of_institute2 = 'college' then 0 else count(DISTINCT ium.institute_id) end as institute_num,
		    count(DISTINCT cd.course_id) as course_num,
		    univ.type_of_institute2 as universityType
		    FROM `listings_main` lm
		    INNER JOIN university univ
		    on(univ.university_id = lm.`listing_type_id` AND univ.status = lm.status)
		    LEFT JOIN university_location_table ult
		    on(ult.university_id = univ.university_id AND ult.status = univ.status)
		    LEFT JOIN ".ENT_SA_COUNTRY_CITY_TABLE_NAME." cct
		    on(ult.city_id = cct.city_id)
		    LEFT JOIN ".ENT_SA_STATE_TABLE_NAME." st
		    on(cct.state_id = st.state_id) 
		    LEFT JOIN ".ENT_SA_COUNTRY_TABLE_NAME." ct
		    on(ct.countryId = ult.country_id)
		    LEFT JOIN institute_university_mapping ium
		    on(ium.university_id = univ.university_id AND ium.status = '".ENT_SA_PRE_LIVE_STATUS."')
		    LEFT JOIN course_details cd
		    on(ium.institute_id = cd.institute_id and cd.status = '".ENT_SA_PRE_LIVE_STATUS."')
		    WHERE 1 "
                .$whereClause
                //.$likeClause
                ." group by lm.`listing_type_id`
		    ORDER BY lm.last_modify_date desc";
            //LIMIT ".$LimitOffset.",".$LimitRowCount;

            // fetch the data
            $result['data'] = $this->dbHandle->query($query, array($status, $univListingIds))->result_array();
        }

        //_p($result['data']);
        //echo $this->dbHandle->last_query();
        // fetch the count of total rows fetched
        /*$query = "SELECT FOUND_ROWS() as TotalCount";
    	$row = $this->dbHandle->query($query)->row_array();
    	$result['totalCount'] = $row['TotalCount'];*/

        // query to fetch the count of rows for each status
        $query = "SELECT
		    sum( case when lm.status = '".ENT_SA_PRE_LIVE_STATUS."' then 1 else 0 end) as published_count,
		    sum( case when lm.status = 'draft' then 1 else 0 end) as draft_count,
		    count(distinct lm.listing_type_id) as all_count
		    FROM `listings_main` lm WHERE 1
		    AND lm.`listing_type` = 'university'
		    AND lm.status in ('".ENT_SA_PRE_LIVE_STATUS."','draft')"
            .$likeClause;

        $result['dataCount'] = $this->dbHandle->query($query, $queryParams)->row_array();
        return $result;
    }

    function getDepartmentTableData($displayDataStatus, $paginatorObj, $searchDeptName)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $LimitOffset 	= $paginatorObj->getLimitOffset();
        $LimitRowCount 	= $paginatorObj->getLimitRowCount();
        $queryParams = array();
        $queryParams1 = array();

        $status = array("draft", ENT_SA_PRE_LIVE_STATUS);
        if($displayDataStatus == 'draft')
            $status = array("draft");
        else if($displayDataStatus == 'published')
            $status = array(ENT_SA_PRE_LIVE_STATUS);


        $whereClause = "AND lm.listing_type = 'institute'
			AND i.institute_type = 'Department'
		        AND lm.status in (?)
			AND lm.listing_id = (select max(lm1.listing_id) from listings_main lm1 where lm1.listing_type_id = lm.listing_type_id AND lm1.listing_type = 'institute' AND lm1.status in (?)) ";

        $queryParams[] = $status;
        $queryParams[] = $status;

        if(!empty($searchDeptName)) {
            $deptSearch = '%'.$searchDeptName.'%';
            $likeClause = "AND lm.listing_title LIKE ? ";
            $queryParams[] = $deptSearch;
            $queryParams1[] = $deptSearch;
        }

        $query = "SELECT SQL_CALC_FOUND_ROWS
			 lm.listing_title as deptName,
			 lm.listing_type_id as deptId,
			 ium.university_id as universityId,
			 u.name as universityName,
			 lm.last_modify_date as date,
			 lm.status as status,
			 i.profile_percentage_completion as profileCompletion,
			 count(DISTINCT cd.course_id) as course_num
		  FROM 	 listings_main lm
		  INNER JOIN institute_university_mapping ium
		    on(lm.listing_type_id = ium.institute_id and lm.status = ium.status)
		  LEFT JOIN institute i
		    on (i.institute_id = lm.listing_type_id and lm.listing_type = 'institute' and lm.status = i.status) 
		  LEFT JOIN university u
		    on(u.university_id = ium.university_id and u.status = '".ENT_SA_PRE_LIVE_STATUS."')
		  LEFT JOIN course_details cd
		    on(lm.listing_type_id = cd.institute_id and (cd.status != 'deleted' and cd.status != 'history'))
		  WHERE 1 "
            .$whereClause
            .$likeClause."
		  GROUP BY lm.listing_type_id
		  ORDER BY date DESC
		  LIMIT ?,?";

        $queryParams[] = $LimitOffset;
        $queryParams[] = $LimitRowCount;

        $result['data'] = $this->dbHandle->query($query, $queryParams)->result_array();

        $query = "SELECT FOUND_ROWS() as totalCount";
        $row = $this->dbHandle->query($query)->row_array();
        $result['totalCount'] = $row['totalCount'];

        $query = "SELECT sum( case when lm.status = '".ENT_SA_PRE_LIVE_STATUS."' then 1 else 0 end) as published_count,
			 sum( case when lm.status = 'draft' then 1 else 0 end) as draft_count,
			 count(distinct lm.listing_type_id) as all_count
		    FROM listings_main lm
		    INNER JOIN institute_university_mapping ium
		      on(lm.listing_type_id = ium.institute_id and lm.status = ium.status)
		    WHERE lm.listing_type = 'institute'
		          AND lm.status in ('".ENT_SA_PRE_LIVE_STATUS."', 'draft') "
            .$likeClause;

        $result['dataCount'] = $this->dbHandle->query($query, $queryParams1)->row_array();
        return $result;
    }

    public function getlocationDetailsByCityId($cityId)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $result = "";
        if($cityId)
        {
            $query = "SELECT ccta.city_id as cityId,
			     ccta.city_name as cityName,
			     ccta.countryId,
			     cta.name as countryName,
			     ccta.state_id as stateId,
			     sta.state_name as stateName
		      FROM ".ENT_SA_COUNTRY_CITY_TABLE_NAME." ccta
		      LEFT JOIN ".ENT_SA_COUNTRY_TABLE_NAME." cta
		      ON (ccta.countryId = cta.countryId)
		      LEFT JOIN ".ENT_SA_STATE_TABLE_NAME." sta
		      ON (ccta.state_id = sta.state_id)
		      WHERE ccta.city_id = ?";

            $result = $this->dbHandle->query($query, array($cityId))->row_array();
        }
        return $result;
    }

    public function getRecruitingCompanies(){
        $this->initiateModel('read');
        $queryCmd = 'select id, company_name, logo_url from company_logos where status = "live" order by company_name ';
        return $this->dbHandle->query($queryCmd)->result_array();
    }

    public function getAbroadExamsMasterList() {
        $this->initiateModel('read');
        $queryCmd = 'select * from abroadListingsExamsMasterTable where status = "live" order by priority ASC ';
        return $this->dbHandle->query($queryCmd)->result_array();
    }


    public function getAbroadCountries($countryIds = array()) {
        $this->initiateModel('read');
        $countryIds = (array)$countryIds;

        $queryParams = array();
        $countryClause = ' 1 ';
        if(!empty($countryIds)) {
            $countryClause = ' countryId IN (?) ';
            $queryParams[] = $countryIds;
        }
        $sql =  " SELECT * ".
            " FROM ".ENT_SA_COUNTRY_TABLE_NAME.
            " WHERE ".$countryClause;

        $result = $this->dbHandle->query($sql, $queryParams)->result_array();

        $data 	= array();
        foreach($result as $d){
            $data[$d['countryId']] = $d;
        }
        return $data;
    }

    // For fetching array of countries id
    public function getAbroadCountriesId(){

        $this->dbHandle = $this->getReadHandle();
        $result = array();
        $sql =  "SELECT GROUP_CONCAT(c.countryId) as countriesId ".
            "FROM ".ENT_SA_COUNTRY_TABLE_NAME." c ";
        $result = $this->dbHandle->query($sql)->row_array();

        return $result;
    }

    function getAllCourseIdsForDepartment($departmentIds)
    {
        if (empty($departmentIds)) {
            return array();
        }

        $this->initiateModel("read");
        $sql = "SELECT COALESCE(GROUP_CONCAT(course_id),0) as course_ids 
				FROM course_details
				WHERE institute_id IN (?)
				AND STATUS IN ('".ENT_SA_PRE_LIVE_STATUS."', 'draft')";

        $rs = $this->dbHandle->query($sql, array($departmentIds))->row_array();
        return $rs['course_ids'];
    }

    /*
    * Get all department ids for a list of universities
    */
    public function getAllDepartmentIdsForUniversity($universityIds)
    {
        if(empty($universityIds))
            return array();

        $this->initiateModel("read");

        $query = "SELECT COALESCE(GROUP_CONCAT( ium.institute_id ),0) as dept_ids FROM `institute_university_mapping` ium,  institute i  ".
            " WHERE ium.`institute_id` = i.institute_id ".
            " and ium.`university_id` IN (?)";

        $rs = $this->dbHandle->query($query, array($universityIds))->row_array();
        return $rs['dept_ids'];
    }

    /*
    * Get all snapshot course ids for a list of universities
    */
    public function getAllSnapshotCourseIdsForUniversity($universityIds)
    {
        die;
        if(empty($universityIds))
            return array();

        $this->initiateModel("read");

        $query = "SELECT
		  COALESCE(GROUP_CONCAT(`course_id`),0) as course_ids
		  FROM `snapshot_courses`
		  WHERE `university_id` IN (".implode(",",$universityIds).")
		  AND status IN ('live','draft');";

        $rs = $this->dbHandle->query($query)->row_array();

        return $rs['course_ids'];
    }


    /**
     * Purpose : Method to delete the course
     * Params  :	1. Array of course ids
     * 		2. flag for already active transaction
     * Author  : Romil Goel
     */
    function deleteCourse($courseIds, $userId, $isTransactionActive = 0)
    {

        if (empty($courseIds)) {
            return;
        }
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the read DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
            /*foreach($courseIds as $courseId) {
                $this->deleteCacheIfListingDeleted('course', $courseId);
            }*/
        }

        // delete university application profiles & dates
        $this->deleteRmcUserCourseRatingMappings($courseIds,1);

        if(!empty($courseIds))
        {
            $sql = "SELECT  distinct `institute_id` FROM `course_details` WHERE `course_id` IN (?) AND `status` = 'live'";
            $instituteIdArray = $this->dbHandle->query($sql, array($courseIds))->result_array();
        }
        // check course for only live entry for indexlog
        $this->dbHandle->select('distinct course_id as courseId',false);
        $this->dbHandle->from('course_details',false);
        $this->dbHandle->where_in('course_id',$courseIds);
        $this->dbHandle->where('status','live');
        $courseIdsForIndexLog = $this->dbHandle->get()->result_array();

        /*
	  prepare mapping of the
	  1. table to be updated for deleting the course
	  2. its respective WHERE clause
	  3. any addition data that need to be updated(if any)
	*/
        $tableToUpdate = array(array("listings_main" 			, "listing_type_id IN %{1}% AND listing_type = 'course'", ",editedBy = ".$this->dbHandle->escape_str($userId).", last_modify_date = now() "),
            array("course_details"			, "course_id IN %{1}% "),
            array("listing_attributes_table"		, "listing_type_id IN %{1}% AND listing_type = 'course'"),
            array("course_attributes"		, "course_id IN %{1}% "),
            array("listing_contact_details"		, "listing_type_id IN %{1}% AND listing_type = 'course'"),
            array("course_class_profile"		, "course_id IN %{1}%"),
            array("course_job_profile"		, "course_id IN %{1}%"),
            array("course_location_attribute"	, "course_id IN %{1}%"),
            array("course_start_date_info"		, "course_id IN %{1}%"),
            array("clientCourseToLDBCourseMapping"	, "clientCourseID IN %{1}%"),
            array("listingExamAbroad"		, "listing_type_id IN %{1}% AND listing_type = 'course'"),
            array("company_logo_mapping"		, "listing_id IN %{1}% AND listing_type = 'course'"),
            array("listing_external_links"		, "listing_type_id IN %{1}% AND listing_type = 'course'"),
            array("listing_category_table"		, "listing_type_id IN %{1}% AND listing_type = 'course'"),
            array("abroadCategoryPageData"		, "course_id IN %{1}% "),
            array("snapshot_course_mapping"		, "newcourse_id IN %{1}%"),
            array("study_abroad_rankings"		, "listing_id IN %{1}% AND ranking_page_id IN (select ranking_page_id from study_abroad_ranking_pages where type='course' AND status='live')"),
            array("abroad_course_custom_values_mapping"," course_id IN %{1}% "),
            array("courseApplicationDetails"," courseId IN %{1}% "),
            array("abroad_course_scholarship_mapping"," course_id IN %{1}% "),
            array("abroadCourseApplicationEligibiltyDetails"," courseId IN %{1}% "));

        // common where clause
        //$commonWhereClause = " AND status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $setString = empty($value[2]) ? "" : $value[2];
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause." AND status ='".ENT_SA_PRE_LIVE_STATUS."'";
            //_p($query);
            // execute the update query
            $updateStatus = $this->dbHandle->query($query, array($courseIds));

            //set status history in case of draft
            $query = "UPDATE ".$value[0]." SET status = 'history' ".$setString." WHERE 1 AND ".$whereClause." AND status = 'draft'";
            //_p($query);
            // execute the update query
            $updateStatus = $this->dbHandle->query($query, array($courseIds));

            //_p("Update status : ".$updateStatus." and Affected Rows : ".$this->dbHandle->affected_rows()."<br><br>");
        }
        $updateShortListTableSQL = "UPDATE userShortlistedCourses SET STATUS = 'removed' WHERE courseId IN (?) AND STATUS = 'live'";
        $updateStatus = $this->dbHandle->query($updateShortListTableSQL, array($courseIds));

        foreach($instituteIdArray as $instituteId)
        {

            $this->updateDeptCategories($this->dbHandle, $instituteId['institute_id']);
        }

        if(!empty($courseIds)){

            $courseIdsForIndexLog = array_map(function($a){return $a['courseId'];},$courseIdsForIndexLog);
            $this->checkAndAddCourseToIndexLog('course',$courseIdsForIndexLog,'delete',true);
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                $this->dataCollectorForLogging['calledVia'] = "deleteCourse";
                $this->updateCacheAfterPosting('course', $courseIds);
                throw new Exception('Transaction Failed');
            }
            sleep(2);
            // delete course cache
            $this->deleteCacheForListings($courseIds, 'course');
        }

        return 1;
    }

    function deleteDepartment($departmentIds, $userId, $isTransactionActive = 0)
    {
        if (empty($departmentIds)) {
            return;
        }

        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
            /*foreach ($departmentIds as $departmentId) {
    	    $this->deleteCacheIfListingDeleted('institute',$departmentId);
    	    }*/
        }

        $courseIdsToDelete = $this->getAllCourseIdsForDepartment($departmentIds);

        if(!empty($courseIdsToDelete))
        {
            $this->coursesToDelete = explode(",",$courseIdsToDelete);
            $this->deleteCourse($this->coursesToDelete, $userId,1);
        }
        /*
    	 prepare mapping of the
    	1. table to be updated for deleting the course
    	2. its respective WHERE clause
    	3. any addition data that need to be updated(if any)
    	*/
        $tableToUpdate = array(array("listings_main" 			, "listing_type_id IN %{1}% AND listing_type = 'institute'", ",editedBy = ".$this->dbHandle->escape_str($userId).", last_modify_date = now() "),
            array("institute"			, "institute_id IN %{1}% "),
            array("institute_location_table"		, "institute_id IN %{1}% "),
            array("listing_attributes_table"		, "listing_type_id IN %{1}% AND listing_type = 'institute'"),
            array("listing_contact_details"		, "listing_type_id IN %{1}% AND listing_type = 'institute'"),
            array("listing_external_links"		, "listing_type_id IN %{1}% AND listing_type = 'institute'"),
            array("institute_university_mapping"		, "institute_id IN %{1}%"),
        );

        // common where clause
        $commonWhereClause = " AND status in ('".ENT_SA_PRE_LIVE_STATUS."','draft','".ENT_SA_DUMMY_DEPT_STATUS."') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array

        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $setString = empty($value[2]) ? "" : $value[2];
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause.$commonWhereClause;
            // execute the update query
            $updateStatus = $this->dbHandle->query($query, array($departmentIds));

            //_p("Update status : ".$updateStatus." and Affected Rows : ".$this->dbHandle->affected_rows()."<br><br>");
        }

        $sqlForDeletingEntryFromListingCategoryTable = " UPDATE listing_category_table set status = 'deleted' WHERE listing_type_id IN (?) AND listing_type = 'institute'";
        $updateStatus = $this->dbHandle->query($sqlForDeletingEntryFromListingCategoryTable, array($departmentIds));

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {

            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {

                //$this->updateCacheAfterPosting('institute', $departmentIds);
                throw new Exception('Transaction Failed');
            }

            /*
            * Delete Cache for individual listings are done here because in current transaction
            * commit will be performed in this method itself. In child deletion function transactions
            * are not committed
            *
            */

            sleep(2);

            // delete department cache
            $this->deleteCacheForListings($departmentIds, 'institute');

            // delete course cache
            $this->deleteCacheForListings($this->coursesToDelete, 'course');
        }

        return 1;

    }


    /**
     * Purpose : Method to delete the University
     * Params  :	1. Array of course ids
     * 		2. flag for already active transaction
     * Author  : Romil Goel
     */
    function deleteUniversity($universityIds, $userId, $isTransactionActive = 0)
    {

        if (empty($universityIds)) {
            return 1;
        }

        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the read DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
            /*foreach ($universityIds as  $universityId) {
				$this->deleteCacheIfListingDeleted('university', $universityId);
			}*/
        }

        // get all department ids of the university(s)
        $departmentIds = $this->getAllDepartmentIdsForUniversity($universityIds);
        // delete all the associated departments
        if(!empty($departmentIds))
        {
            $this->departmentsToDelete = explode(",",$departmentIds);
            $this->deleteDepartment($this->departmentsToDelete, $userId, 1);
        }

        // get all snapshot course ids of the university(s)
        // $snapshotCoursesIds = $this->getAllSnapshotCourseIdsForUniversity($universityIds);

        if(!empty($snapshotCoursesIds))
        {
            $this->snapshotCoursesToDelete = explode(",",$snapshotCoursesIds);
            $this->deleteSnapshotCourse($this->snapshotCoursesToDelete, $userId, 1);
        }
        // delete university application profiles & dates
        $this->deleteUnivApplicationProfiles($universityIds,1);
        //error_log("::::::::::::::shweta::::::::::::::::"."delete rmc counsellor".print_r($universityIds,true));
        // delete rmc university counsellor mapping
        $this->deleteRMCUniversityCounsellorMapping($universityIds,1);
        /*
		  prepare mapping of the
		  1. table to be updated for deleting the university
		  2. its respective WHERE clause
		  3. any addition data that need to be updated(if any)
		*/
        $tableToUpdate = array(	array("listings_main" 			, "listing_type_id IN %{1}% AND listing_type = 'university'", ",editedBy = ".$this->dbHandle->escape_str($userId).", last_modify_date = now() "),
            array("university"			, "university_id IN %{1}% "),
            array("listing_attributes_table"		, "listing_type_id IN %{1}% AND listing_type = 'university'"),
            array("university_location_table"	, "university_id IN %{1}% "),
            array("listing_contact_details"		, "listing_type_id IN %{1}% AND listing_type = 'university'"),
            array("listing_external_links"		, "listing_type_id IN %{1}% AND listing_type = 'university'"),
            array("university_campuses"		, "university_id IN %{1}% "),
            array("university_departments"		, "university_id IN %{1}% "),
            array("university_campus_accommodation"	, "university_id IN %{1}% "),
            array("listing_admission_contact_details", "listing_type_id IN %{1}% AND listing_type = 'university'"),
            array("institute_uploaded_media"		, "listing_type_id IN %{1}% AND listing_type = 'university'"),
            array("listing_media_table"		, "type_id IN %{1}% AND type = 'university'"),
            array("university_announcements"		, "universityId IN %{1}% "),
            array("study_abroad_rankings"	, "listing_id IN %{1}% AND ranking_page_id IN (select ranking_page_id from study_abroad_ranking_pages where type='university' AND status='live')"),
            array("tlistingsubscription","listing_type = 'university' AND listing_type_id IN %{1}%"),
            array("sa_university_custom_attributes", "university_id IN %{1}% ")
        );

        // common where clause
        $commonWhereClause = " AND status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $setString = empty($value[2]) ? "" : $value[2];
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause.$commonWhereClause;
            //_p($query);
            // execute the update query
            $updateStatus = $this->dbHandle->query($query, array($universityIds));
            //_p("Update status : ".$updateStatus." and Affected Rows : ".$this->dbHandle->affected_rows()."<br><br>");
        }

        //empty affiliation of all national courses affiliated to these universities
        $this->emptyAffiliationOfNationalCourses($universityIds);

        $consultantPostingLib = $this->load->library("consultantPosting/ConsultantPostingLib");
        $consultantStatus = $consultantPostingLib->handleUniversityDeletion($universityIds);
        //

        $this->checkAndAddCourseToIndexLog('university',$universityIds,'delete',true);
        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                //$this->updateCacheAfterPosting('university',$universityIds);
                throw new Exception('Transaction Failed');
            }
        }

        /*
         * Delete Cache for individual listings are done here because in current transaction
         * commit will be performed in this method itself. In child deletion function transactions
         * are not committed
         *
         */
        sleep(2);
        // delete university cache
        $this->deleteCacheForListings($universityIds, 'university');

        // delete department cache
        $this->deleteCacheForListings($this->departmentsToDelete, 'institute');

        // delete snapshotcourse cache
        $this->deleteCacheForListings($this->snapshotCoursesToDelete, 'snapshotcourse');

        // delete course cache
        $this->deleteCacheForListings($this->coursesToDelete, 'course');
        $shikshamodel = $this->load->model("common/shikshamodel");
        foreach ($this->coursesToDelete as $id) {
            $arr = array("cache_type" => "htmlpage", "entity_type" => "saClp", "entity_id" => $id, "cache_key_identifier" => "");
            $shikshamodel->insertCachePurgingQueue($arr);
        }
        
        return $consultantStatus;
    }

    function deleteSpecializations($ids)
    {
        $this->initiateModel("write");
        $sql =  "DELETE  tcsm,lcsm ".
            "FROM (`tCourseSpecializationMapping` tcsm)
            INNER JOIN `LDBCoursesToSubcategoryMapping` lcsm ON `lcsm`.`ldbCourseId` = `tcsm`.`SpecializationId` and lcsm.status='live'
            WHERE `tcsm`.`scope` = 'abroad' AND `tcsm`.`isEnabled` = '1' AND `tcsm`.`SpecializationId` IN (?)";
        return $this->dbHandle->query($sql, array($ids));
    }

    function transactionStart()
    {
        $this->initiateModel("write");
        $this->dbHandle->trans_start();
    }

    function transactionEnd()
    {
        $this->dbHandle->trans_complete();
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
    }

    private function emptyAffiliationOfNationalCourses($universityIds){

        if(!empty($universityIds)){

            $sql = "SELECT distinct course_id from shiksha_courses where status = 'live' and affiliated_university_id IN (?) and affiliated_university_scope='abroad'";
            $query = $this->dbHandle->query($sql, array($universityIds));
            $resultArray = $query->result_array();

            $this->dbHandle->where_in('status',array('live','draft'))->where_in('affiliated_university_id',$universityIds);
            $this->dbHandle->update('shiksha_courses',array('affiliated_university_id'=>NULL,'affiliated_university_name'=>NULL,'affiliated_university_scope'=>NULL,'affiliated_university_year'=>NULL));

            if(!empty($resultArray)){
                $indexingData = array();
                foreach ($resultArray as $key => $value) {
                    $temp = array();
                    $temp['operation'] = "index";
                    $temp['listing_type'] = "course";
                    $temp['listing_id'] = $value['course_id'];
                    $temp['section_updated'] = "universityTypeChange";
                    $indexingData[] = $temp;
                }
                if(!empty($indexingData)){
                    $this->dbHandle->insert_batch('indexlog',$indexingData);
                }

            }

        }
    }

    public function getCities($countryId, $include_virtual=False)
    {
        $this->initiateModel("read");
        if($include_virtual) {
            $clause = " (enabled = 0 OR (enabled = 1 AND tier = 1)) ";
        }
        else {
            $clause = " enabled = 0 ";
        }
        $sql =  "SELECT * ".
            "FROM ".ENT_SA_COUNTRY_CITY_TABLE_NAME." ".
            "WHERE ".$clause.(($countryId > 1 || $countryId == '') ? " AND countryId = ". $this->dbHandle->escape_str($countryId) ." " : "")." order by city_name asc";

        return $this->dbHandle->query($sql)->result_array();
    }

    public function getStatesByCountry($countryId)
    {
        $this->initiateModel("read");
        $sql =  "SELECT * ".
            "FROM ".ENT_SA_STATE_TABLE_NAME." ".
            "WHERE countryId = ? ".
            "AND enabled = 0 ".
            "ORDER BY state_name asc";

        return $this->dbHandle->query($sql, array($countryId))->result_array();
    }

    public function getCitiesByState($stateId, $include_virtual=False)
    {
        $this->initiateModel("read");
        $this->dbHandle->select();
        $this->dbHandle->from(ENT_SA_COUNTRY_CITY_TABLE_NAME);
        if($include_virtual) {
            $this->dbHandle->where('enabled = 0 OR (enabled = 1 AND tier = 1)', NULL, FALSE);
        }
        else {
            $this->dbHandle->where('enabled',0);
        }
        if($stateId > 1 || $stateId ==''){
            $this->dbHandle->where('state_id',$stateId);
        }
        $this->dbHandle->order_by('city_name','ASC');
        return $this->dbHandle->get()->result_array();
    }


    public function getDepartmentLocationInfo($deptId) {
        if($deptId == "") {
            return array();
        }

        $this->initiateModel("read");
        $sql =  "SELECT ilt.institute_location_id, ilt.city_id, ilt.country_id, ct.name ".
            "FROM  institute_location_table ilt, ".ENT_SA_COUNTRY_TABLE_NAME." ct ".
            "WHERE ilt.institute_id = ? AND ilt.status= '".ENT_SA_PRE_LIVE_STATUS."'".
            "AND ct.countryId = ilt.country_id";

        return $this->dbHandle->query($sql,array($deptId))->result_array();
    }

    public function getLDBCourseId($mainCatId, $courseType, $courseLevel) {
        if($mainCatId == "" || $courseType == "" || $courseLevel == "") {
            return array();
        }
        $this->initiateModel("read");
        $sql =  "SELECT `SpecializationId` as LDBCourseID FROM `tCourseSpecializationMapping` WHERE ".
            " `Status` = 'live' AND `scope` = 'abroad' AND `isEnabled` = 1 AND ".
            " `CourseName` = ? AND `CourseLevel` = ? AND CategoryId = ?";

        return $this->dbHandle->query($sql,array($courseLevel,$courseType,$mainCatId))->result_array();
    }

    public function getCityById($cityId)
    {
        $this->initiateModel("read");
        $sql =  "SELECT * ".
            "FROM ".ENT_SA_COUNTRY_CITY_TABLE_NAME." ".
            "WHERE city_id = ? ".
            "LIMIT 1";

        return $this->dbHandle->query($sql,array($cityId))->row_array();
    }

    function deleteSnapshotCourse($snapshotCourseIds, $userId, $isTransactionActive = 0)
    {
        return 1;
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the write DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
            $universityIds = array();
            // $universityIds = $this->getUniversitiesOfSnapshotCourses($snapshotCourseIds); //Get the university ids before they're deleted!
        }

        /*
		  prepare mapping of the
		  1. table to be updated for deleting the course
		  2. its respective WHERE clause
		  3. any additional data that need to be updated(if any)
		*/
        $tableToUpdate = array(array("snapshot_courses" 	, "course_id IN %{1}% ", ", last_modified = now(), lastModifiedBy = ".$userId." "),
        );

        // common where clause
        $commonWhereClause = " AND status in ('live') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(".implode(",",$snapshotCourseIds).")", $value[1]);
            $setString = empty($value[2]) ? "" : $value[2];
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause.$commonWhereClause;
            // execute the update query
            $updateStatus = $this->dbHandle->query($query);
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }

            sleep(2);
            // delete university cache
            $this->deleteCacheForListings($universityIds, 'university');

            // delete snapshotcourse cache
            $this->deleteCacheForListings($snapshotCourseIds, 'snapshotcourse');
        }
        /*$this->load->builder('ListingBuilder','listing');
		$listingBuilder = new ListingBuilder;
		$listingCache = $listingBuilder->getListingCache();
		$snapshotCache = $listingBuilder->getSnapshotCourseCache();
		foreach($universityIds as $universityId){
			$listingCache->deleteUniversity($universityId);
		}
		foreach($snapshotCourseIds as $snapCourseId){
			$snapshotCache->deleteSnapshotCourse($snapCourseId);
		}*/

        return 1;
    }

    public function getProfileCompletePercentage($listing_type_id = NULL, $listing_type = NULL) {
        $this->initiateModel("read");
        $tableName 	= false;
        $columnName = false;
        $idName 	= false;
        switch($listing_type){
            case 'institute':
                $tableName  = 'institute';
                $columnName = 'profile_percentage_completion';
                $idName 	= 'institute_id';
                break;
            case 'course':
                $tableName 	= 'course_details';
                $columnName = 'profile_percentage_completion';
                $idName 	= 'course_id';
                break;
        }
        $percentageCompletion = 0.00;
        if(!empty($tableName) && !empty($columnName)){
            $sql 	= "SELECT $columnName from $tableName WHERE $idName = $listing_type_id AND status = ?";
            $query 	= $this->dbHandle->query($sql, array('draft'));
            if($query->num_rows() <= 0) {
                $query 	= $this->dbHandle->query($sql, array('live'));
            }
            $row = $query->row_array();
            $percentageCompletion = $row[$columnName];
        }
        return number_format($percentageCompletion, 2, ',', ' ');
    }

    function checkIfCourseAlreadyExists($courseName, $deptId, $courseId = "") {
        if($courseName == "" || $deptId == "") {
            return true;
        }

        $additionalClause = "";
        if($courseId != "") {
            $additionalClause = " AND course_id != ".$courseId;
        }

        $this->initiateModel("read");

        //$this->setCharSetToLatin1();

        $sql =  "SELECT course_id ".
            "FROM  course_details ".
            "WHERE institute_id = ? AND courseTitle = ? ".
            "AND status in ('".ENT_SA_PRE_LIVE_STATUS."', 'draft')".
            $additionalClause;

        if(count($this->dbHandle->query($sql,array($deptId,$courseName))->result_array())) {
            return true;
        } else {
            return false;
        }
    }

    /*
	 * Function to get Course Details for CourseTable Listing
	 */
    public function getCourseDetails($courseName='',$status='',$lowerLimit=0,$maxRows=20){
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');
        $queryArray = array();
        $sql = "select
				SQL_CALC_FOUND_ROWS
				cd.course_id,
				cd.institute_id,
				cd.status,
				cd.courseTitle,
				cd.course_level_1,
				cd.profile_percentage_completion,
				cd.auto_creation_date date
			from
				course_details cd
			
			where
				";
        if($status != ''){
            $sql .= " cd.status in (?) ";
            if(!(is_array($status))){
                $status = str_replace("'", "", $status);
                $status = explode(',', $status);
            }
            $queryArray[] = $status;
        }else{
            $sql .= " cd.status in ('live','draft') ";
        }
	if($courseName != ''){

            $sql .= "and cd.courseTitle like ? ";
            $queryArray[] = '%'.$courseName."%";
        }
        $sql.="and cd.id = (select max(id) from course_details where course_id = cd.course_id)
			order by cd.id desc limit ?,?";
        $queryArray[] = $lowerLimit;
        $queryArray[] = $maxRows;
        $res = $this->dbHandle->query($sql,$queryArray)->result_array();

        $sql	=" select found_rows() totalRows";
        $result['total_count'] = $this->dbHandle->query($sql)->result_array();

        $courseIds = array_map(function($a){return $a['course_id'];},$res);
        if(!empty($courseIds)){
            $this->dbHandle->select("listing_type_id, category_id");
            $this->dbHandle->where("listing_type","course");
            $this->dbHandle->where("status","live");
            $this->dbHandle->where_in("listing_type_id",$courseIds);
            $catRes = $this->dbHandle->get("listing_category_table")->result_array();
            $fCatRes = array();
            foreach($catRes as $cat){
                $fCatRes[$cat['listing_type_id']] = $cat['category_id'];
            }
            foreach($res as $key=>$row){
                $res[$key]['category_id'] = $fCatRes[$row['course_id']];
            }
            $result['course_data'] = $res;
        }
        $queryArray = array();
        $sql = "select sum(if(status='draft',1,0)) draft_count,sum(if(status='live',1,0)) published_count, "
            ."count( distinct `course_id`) all_count from course_details "
            ."where status in ('live', 'draft') ";
        if($courseName != ''){
            $sql .= "and courseTitle like ?";
            $queryArray[] = '%'.$courseName.'%';
        }

        $result['tabs'] = $this->dbHandle->query($sql,$queryArray)->result_array();
        return $result;
    }


    /*
	 *Function to get Institute/University location details
	 */
    public function getInstituteLocation($instIds = array()){
        $len = count($instIds);
        if(!$len){
            return array();
        }
        $instIds = array_unique($instIds);
        $sql = "select inst.institute_id department_id,ium.university_id,if(inst.institute_type='Department_Virtual','-',inst.institute_name) department_name,un.name university_name,ult.city_id,ult.country_id,cta.city_name,ct.name country_name ";
        $sql .= "from institute inst inner join institute_university_mapping ium on(inst.institute_id=ium.institute_id)";
        $sql .= "inner join university un on(ium.university_id=un.university_id) ";
        $sql .= "inner join university_location_table ult on(un.university_id=ult.university_id) ";
        $sql .= "inner join ".ENT_SA_COUNTRY_CITY_TABLE_NAME." cta on(ult.city_id=cta.city_id) ";
        $sql .= "inner join ".ENT_SA_COUNTRY_TABLE_NAME." ct on(ult.country_id=ct.countryId) ";
        $sql .= "where inst.status = '".ENT_SA_PRE_LIVE_STATUS."' and ium.status='".ENT_SA_PRE_LIVE_STATUS."' and un.status ='".ENT_SA_PRE_LIVE_STATUS."' and ult.status ='".ENT_SA_PRE_LIVE_STATUS."' ";
        $sql .= "and inst.institute_id in (?)";

        //Obtaing Read-Mode on DB
        $this->initiateModel('read');
        //sql calling for result-set
        $resultSetArr = $this->dbHandle->query($sql,array($instIds))->result_array();
        //_p($this->dbHandle->last_query());
        $result = array();
        foreach($resultSetArr as $resultSet){
            $result[$resultSet['department_id']] = array();
            $result[$resultSet['department_id']]['university_id'] = $resultSet['university_id'];
            $result[$resultSet['department_id']]['department_name'] = $resultSet['department_name'];
            $result[$resultSet['department_id']]['university_name'] = $resultSet['university_name'];
            $result[$resultSet['department_id']]['city_id'] = $resultSet['city_id'];
            $result[$resultSet['department_id']]['country_id'] = $resultSet['country_id'];
            $result[$resultSet['department_id']]['city_name'] = $resultSet['city_name'];
            $result[$resultSet['department_id']]['country_name'] = $resultSet['country_name'];
        }

        return $result;
    }
    /*
    *Function to get University details for edit
    */
    public function getUniversityFormDataForEditMode($universityId)
    {
        $this->initiateModel("read");

        //check if draft version is available, if yes open that one
        $sql = 'select * from listings_main where listing_type= "university"
		and listing_type_id=?
		and status = "draft"';
        $query 	= $this->dbHandle->query($sql,array($universityId))->result_array();

        if(count($query)>0)
        {
            $status = "draft";
        }
        else
        {
            $status = ENT_SA_PRE_LIVE_STATUS;
        }
        $univData = array();
        // get data for university from
        $sql = 'select 
			LM.listing_id as listings_main_id,
			LM.listing_type_id as univ_id,
			LM.listing_title as univ_name,
			LM.submit_date as univ_submit_date,
			date_format(LM.last_modify_date,"%d-%m-%Y") as univ_last_modify_date,
			LM.editedBy as univ_modified_by,
			LM.username as client_id,
			LM.listing_seo_url as univ_seo_url,
			LM.listing_seo_title as univ_seo_title,
			LM.listing_seo_keywords as univ_seo_keywords,
			LM.listing_seo_description as univ_seo_description,
			LM.status as univ_status,
		
			U.id as unversity_table_id,
			U.acronym as univ_acronym,
            U.expert_id as univ_expert,
			U.establish_year as univ_established,
			U.logo_link as univ_logo_link,
			U.type_of_institute as univ_type1,
			U.type_of_institute2 as univ_type2,
			U.affiliation as univ_affiliation,
			U.accreditation as univ_accreditation,
			U.brochure_link as univ_brochure_link,
			U.percentage_profile_completion as univ_percentage_completion,
			U.conditionalOffer as univ_conditionalOffer,
			U.conditionalOfferDescription as univ_conditionalOfferDescription,
			U.conditionalOfferLink as univ_conditionalOfferLink,
			'.
			// LAT.listing_attribute_id as univ_listing_attribute_id,
			// LAT.caption as univ_attr_caption,
			// LAT.attributeValue as univ_usp,
			'
			ULT.id as univ_location_table_id,
			ULT.university_location_id as univ_location_id,
			ULT.city_id as univ_city_id,
			CCT.state_id as univ_state_id,
			ULT.country_id as univ_country_id,
			ULT.address as univ_address,
		
			LCD.contact_details_id as contact_details_id,
			LCD.contact_email as univ_contact_email,
			LCD.contact_main_phone as univ_contact_main_phone,
			LCD.contact_person as univ_contact_person,
			LCD.website as univ_contact_website,
			LCD.institute_location_id as contact_institute_location_id,
		
			LACD.id as univ_admission_contact_id,
			LACD.admission_contact_person as univ_admission_contact_person,
			LACD.admission_website_url as univ_admission_website_url,
			LACD.city_id as univ_admission_city_id,
		
			UCA.id as univ_campus_acco_id,
			UCA.accommodation_details as univ_campus_acco_details,
			UCA.accommodation_website_url as univ_campus_acco_url,
			UCA.living_expense_details as univ_living_expense_details,
			UCA.living_expenses as univ_living_expenses,
			UCA.living_expense_website_url as univ_living_expenses_url,
			UCA.currency as univ_currency_id,
			
			UA.announcementText as announcement_text,
			UA.callToActionText as announcement_call_to_action_text,
			UA.startDate		as announcement_start_date,
			UA.endDate			as announcement_end_date
			
		from
		    listings_main LM
		
		inner join university U
		on (LM.listing_type_id = U.university_id
			and U.status in (?))
		'.
		// left join listing_attributes_table LAT
		// on (LM.listing_type_id = LAT.listing_type_id
		// 	and LM.listing_type = LAT.listing_type
		// 	and LAT.status in (?))
		'
		left join university_location_table ULT
		on (ULT.university_id = LM.listing_type_id
			and ULT.status in (?))
		
		left join '.ENT_SA_COUNTRY_CITY_TABLE_NAME.' CCT
		on (CCT.city_id = ULT.city_id
			and CCT.countryId = ULT.country_id)
		
		left join listing_contact_details LCD
		on (LCD.listing_type = LM.listing_type
			and LCD.listing_type_id = LM.listing_type_id
			and LCD.status in (?))
		
		left join listing_admission_contact_details LACD
		on (LACD.listing_type = LM.listing_type
			and LACD.listing_type_id = LM.listing_type_id
			and LACD.status in (?))
		
		left join university_campus_accommodation UCA
		on (UCA.university_id = LM.listing_type_id
			and UCA.status in (?))
		
		left join university_announcements UA
		on (UA.universityId = LM.listing_type_id
			and UA.status in (?))
		
		where
		    LM.listing_type = "university"
			and LM.status in (? , "draft")
			and LM.listing_type_id = ? group by LM.listing_id ';

        //execute
        $query 	= $this->dbHandle->query($sql,array($status,$status,$status,$status,$status,$status,$status,$universityId))->result_array();
        if(count($query)==0){
            show_404();
        }
        $univData['listing_data'] = $query;
        // get data from listing_attributes_table
        $univData['listing_attributes'] = $this->_getUnivListingAttributes($status,$universityId);
        $univData['scoreReporting'] = $this->_getUnivScoreReporting($status,$universityId);
        //to show user name on top as last modified by...
        $UserModel = $this->load->model('user/usermodel');

        $userName = $UserModel->getUserById($univData['listing_data'][0]['univ_modified_by'])->getFirstName()." ".$UserModel->getUserById($univData['listing_data'][0]['univ_modified_by'])->getLastName();

        $univData['listing_data'][0]['univ_modified_by_name'] = $userName;

        // get department data for university (university_departments)
        $sql = 'select 
		    LM.listing_type_id as univ_id,
		    UD.id as univ_dept_id,
		    UD.department_name as univ_dept_name,
		    UD.department_website_url as univ_dept_url
			
		from
		    listings_main LM
		
		inner join university_departments UD
		on (UD.university_id = LM.listing_type_id
			and UD.status in (?))
		where
		    LM.listing_type = "university"
			and LM.status in (? )
			and LM.listing_type_id = ?';

        //execute
        $query 	= $this->dbHandle->query($sql,array($status,$status,$universityId))->result_array();
        $univData['univ_department'] = $query;

        // get campus data for university (university_campuses)
        $sql = 'select 
		    LM.listing_type_id as univ_id,
		    UC.id as univ_campus_id,
		    UC.campus_name as univ_campus_name,
		    UC.campus_address as univ_campus_addr,
		    UC.campus_website_url as univ_campus_url
			    
		from
		    listings_main LM
		
		inner join university_campuses UC
		on (UC.university_id = LM.listing_type_id
			and UC.status in (?))
		where
		    LM.listing_type = "university"
			and LM.status in (? )
			and LM.listing_type_id = ?';

        //execute
        $query 	= $this->dbHandle->query($sql,array($status,$status,$universityId))->result_array();
        $univData['univ_campus'] = $query;

        // get univ external links
        $sql = 'select 
		    LM.listing_type_id as univ_id,
		    LEL.id as univ_link_id,
		    LEL.link as univ_link,
		    LEL.link_type as univ_link_type
			
		from
		    listings_main LM
		inner join listing_external_links LEL
		on (LEL.listing_type_id = LM.listing_type_id
			and LEL.listing_type = LM.listing_type
			and LEL.status in (?))
		where
		    LM.listing_type = "university"
			and LM.status in (?)
			and LM.listing_type_id = ?';

        //execute
        $query 	= $this->dbHandle->query($sql,array($status,$status,$universityId))->result_array();

        foreach($query as $linkResult){
            $univData['univ_links'][$linkResult['univ_link_type']]    = $linkResult;
        }

        // get univ uploaded media
        $sql = 'select 
		    LM.listing_type_id as univ_id,
		    IUM.media_id as univ_media_id,
		    IUM.media_type as univ_media_type,
		    IUM.name as univ_media_name,
		    IUM.url as univ_media_url,
		    IUM.thumburl as univ_media_thumburl,
			LMT.status as status
			
		from
		    listings_main LM
		inner join listing_media_table LMT
		on (LMT.type=LM.listing_type
			and LMT.type_id = LM.listing_type_id
			and LMT.status = LM.status)
		inner join institute_uploaded_media IUM
		on (IUM.listing_type = LM.listing_type
			and IUM.listing_type_id = LM.listing_type_id
			and IUM.media_id = LMT.media_id
			and IUM.status in ("'.ENT_SA_PRE_LIVE_STATUS.'","draft"))

		where
		    LM.listing_type = "university"
			and LM.status in (? )
			and LM.listing_type_id = ?';

        //execute
        $query 	= $this->dbHandle->query($sql,array($status,$universityId))->result_array();
        foreach($query as $mediaResult){
            if(preg_match("/logo$/i", $mediaResult['univ_media_name']))
            {
                $univData['univ_media']['logo']    = $mediaResult;
            }
            else if($mediaResult['univ_media_type']=='video')
            {
                if($mediaResult['status'] == $status){
                    $univData['univ_media']['video'][]    = $mediaResult;
                }
            }
            else if($mediaResult['univ_media_type']=='photo')
            {
                $univData['univ_media']['picture'][]    = $mediaResult;
            }
        }

        $univData['univ_application_profiles'] = $this->getUniversityApplicationProfiles($universityId, $status);
        $univData['univ_custom_attributes'] = $this->_getUniversityCustomAttributes($universityId,$status);

        return $univData;

    }

    /**
     * @param $universityId
     * @param $status
     * @return returns array of custom fields
     */
    private function _getUniversityCustomAttributes($universityId,$status){
        $this->initiateModel("read");
        $this->dbHandle->select('custom_label,custom_value');
        $this->dbHandle->from('sa_university_custom_attributes');
        $this->dbHandle->where('university_id',$universityId);
        $this->dbHandle->where('status',$status);
        $queryRes = $this->dbHandle->get()->result_array();
        return $queryRes;
    }

    /*
     * @returns city_name and state_id
     */
    private function getCityDetailsFromCityId($cityId) {
        $this->initiateModel("read");
        $sql = 'select city_name as cityName,state_id as stateId from countryCityTable    
                    where city_id = ?';
        //execute
        $query 	= $this->dbHandle->query($sql,array($cityId))->result_array();
        if(count($query)==0){
            show_404();
        }
        return $query[0];
    }

    private function getSACityOtherAttributesData($cityId, $status) {
        $this->initiateModel("read");
        $sql = 'select offCampusAccommodationDesc, cityWeatherDetails from SACityOtherAttributes where cityId = ? and status= ?';
        //execute
        $query 	= $this->dbHandle->query($sql,array($cityId,$status))->result_array();
        if(count($query)==0){
           return $query;
        }
        return $query[0];
    }

    private function getSACityPrimaryAttributesData($cityId, $status) {
        $this->initiateModel("read");
        $sql = 'select attributeType, attributeValue from SACityPrimaryAttributes where cityId = ? and status= ?';
        //execute
        $query 	= $this->dbHandle->query($sql,array($cityId,$status))->result_array();
        if(count($query)==0){
            return $query;
        }
        $resultArray = array();
        $resultArray['offCampusAccommodationUrl'] = array();
        foreach($query as $attributeArray){
            switch($attributeArray['attributeType']){
                case 'latitude':
                    $resultArray['latitude'] = $attributeArray['attributeValue'];
                    break;
                case 'latitudeDirection':
                    $resultArray['latitudeDirection'] = $attributeArray['attributeValue'];
                    break;
                case 'longitude':
                    $resultArray['longitude'] = $attributeArray['attributeValue'];
                    break;
                case 'longitudeDirection':
                    $resultArray['longitudeDirection'] = $attributeArray['attributeValue'];
                    break;
                case 'citySize':
                    $resultArray['citySize'] = $attributeArray['attributeValue'];
                    break;
                case 'wikiPageUrl':
                    $resultArray['wikiPageUrl'] = $attributeArray['attributeValue'];
                    break;
                case 'cityPopulation':
                    $resultArray['cityPopulation'] = $attributeArray['attributeValue'];
                    break;
                case 'offCampusAccommodationUrl':
                    array_push($resultArray['offCampusAccommodationUrl'], $attributeArray['attributeValue']);
                    break;
            }
        }
        return $resultArray;

    }

    private function getSACityVideosData($cityId, $status) {
        $this->initiateModel("read");
        $sql = 'select videoTitle, videoUrl from SACityVideos where cityId = ? and status= ?';
        //execute
        $query 	= $this->dbHandle->query($sql,array($cityId,$status))->result_array();
        if(count($query)==0){
            return $query;
        }
        return $query;
    }

    /*
    *Function to get city details for edit
    */
    public function getCityFormDataForEditMode($cityId)
    {
        $cityData = array();
        // get data for city
        $cityData = array_merge($cityData, $this->getCityDetailsFromCityId($cityId));
        $cityData = array_merge($cityData, $this->getSACityOtherAttributesData($cityId, ENT_SA_PRE_LIVE_STATUS));
        $cityData = array_merge($cityData, $this->getSACityPrimaryAttributesData($cityId, ENT_SA_PRE_LIVE_STATUS));
        $cityData['videoData'] = $this->getSACityVideosData($cityId, ENT_SA_PRE_LIVE_STATUS);
        return $cityData;
        
    }
	

    private function _getUnivListingAttributes($status,$universityId)
    {
        $this->initiateModel('read');
        $this->dbHandle->select('caption, attributeValue as attrVal');
        $this->dbHandle->from('listing_attributes_table');
        $this->dbHandle->where('status',$status);
        $this->dbHandle->where('listing_type','university');
        $this->dbHandle->where('listing_type_id',$universityId);
        $result = $this->dbHandle->get()->result_array();
        $returnArr = array();
        foreach($result as $row)
        {
            $returnArr[$row['caption']]= $row;
        }
        return $returnArr;
    }

    private function _getUnivScoreReporting($status,$universityId)
    {
        $this->initiateModel('read');
        $this->dbHandle->select('scoreReportingExam, scoreReportingCode');
        $this->dbHandle->from('universityScoreReporting');
        $this->dbHandle->where('status',$status);
        $this->dbHandle->where('universityId',$universityId);
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }

    public function getCourseInfo($courseId) {
        if(empty($courseId)){
            return array();
        }
        $this->initiateModel('read');

        /*
		 * Table: Listings_main
		 */
        $listingsMainSql = 	" SELECT lm.listing_type, lm.listing_type_id as course_id, lm.status, lm.listing_title as course_name, ".
            " lm.submit_date, lm.username as last_modified_by_id, t.displayname as last_modified_by_name,t.firstname as last_modified_by_firstname,t.lastname as last_modified_by_lastname, ".
            " lm.last_modify_date, lm.listing_seo_title, lm.listing_seo_description, lm.listing_seo_keywords, lm.listing_seo_url " .
            " FROM listings_main lm LEFT JOIN tuser t ON lm.editedBy = t.userid ".
            " WHERE lm.editedBy = t.userid AND lm.listing_type = 'course' AND lm.listing_type_id = ? AND lm.status = ? LIMIT 1";
        $query = $this->dbHandle->query($listingsMainSql, array($courseId, 'draft'));
        $status = 'draft';
        if($query->num_rows() <= 0) {
            $query = $this->dbHandle->query($listingsMainSql,array($courseId, ENT_SA_PRE_LIVE_STATUS));
            $status = ENT_SA_PRE_LIVE_STATUS;
        }
        $data['listings_main'] = $query->row_array();
        if(!empty($data['listings_main']['listing_seo_url'])){
            $data['listings_main']['listing_seo_url'] = SHIKSHA_STUDYABROAD_HOME.$data['listings_main']['listing_seo_url'];
        }

        /*
		 * Table: course_details
		 */
        $courseSql 	= 	" SELECT cd.*, lm.listing_title as deptName FROM course_details cd, listings_main lm ".
            " WHERE cd.course_id = ? AND cd.status = ? AND lm.listing_type_id = cd.institute_id AND ".
            " lm.listing_type = 'institute' AND lm.status IN ('".ENT_SA_PRE_LIVE_STATUS."', '".ENT_SA_DUMMY_DEPT_STATUS."' )";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_details'] = $query->row_array();
        if(!empty($data['course_details']['course_request_brochure_link'])){
            $data['course_details']['course_request_brochure_link'] = MEDIAHOSTURL.$data['course_details']['course_request_brochure_link'];
        }

        /*
		 * Getting University Info for Dept / Institute Id..
		 */
        $courseSql 	= 	" SELECT ium.*, lm.listing_title as universityName FROM institute_university_mapping ium, listings_main lm ".
            " WHERE ium.institute_id  = ? AND ium.status = '".ENT_SA_PRE_LIVE_STATUS."' AND lm.listing_type_id = ium.university_id ".
            "  AND lm.listing_type = 'university' AND lm.status = '".ENT_SA_PRE_LIVE_STATUS."'";
        $query = $this->dbHandle->query($courseSql, array($data['course_details']['institute_id']));
        $data['university_info'] = $query->row_array();

        /*
		 * Table: course_attributes
		 */
        $courseSql 	= 	" SELECT * FROM course_attributes ".
            " WHERE course_id = ? AND status = ?";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_attributes'] = $query->result_array();

        /*
		 * Table: listing_contact_details
		 */
        $courseSql 	= 	" SELECT * FROM listing_contact_details ".
            " WHERE listing_type_id = ? AND listing_type = 'course' AND status = ? LIMIT 1";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['listing_contact_details'] = $query->row_array();

        /*
		 * Table: course_location_attribute
		 */
        $courseSql 	= 	" SELECT cla.*, ilt.city_id, ilt.country_id FROM course_location_attribute cla,  institute_location_table ilt ".
            " WHERE cla.course_id = ? AND cla.status = ? AND ilt.institute_location_id = cla.institute_location_id ".
            " AND ilt.status = '".ENT_SA_PRE_LIVE_STATUS."'";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_location_attribute'] = $query->row_array();

        /*
		 * Table: listingExamAbroad
		 */
        $courseSql 	= 	" SELECT * FROM listingExamAbroad ".
            " WHERE listing_type_id = ? AND listing_type = 'course' AND status = ?";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['listingExamAbroad'] = $query->result_array();

        /*
		 * Table: listing_attributes_table
		 */
        $courseSql 	= 	" SELECT * FROM listing_attributes_table ".
            " WHERE listing_type_id = ? AND listing_type = 'course' AND status = ?";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['listing_attributes_table'] = $query->result_array();

        /*
		 * Table: listing_category_table
		 */
        $courseSql 	= 	" SELECT lct.*, cbt.parentId, cbt.name FROM listing_category_table lct,  categoryBoardTable cbt ".
            " WHERE lct.listing_type_id = ? AND lct.listing_type = 'course' AND lct.status = ? ".
            " AND cbt.boardId = lct.category_id";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['listing_category_table'] = $query->row_array();


        /*
		 * Table: clientCourseToLDBCourseMapping
		 */
        $courseSql 	= 	" SELECT * FROM clientCourseToLDBCourseMapping ".
            " WHERE clientCourseID = ? AND status = ?";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['clientCourseToLDBCourseMapping'] = $query->result_array();

        /*
		 * Table: company_logo_mapping
		 */
        $courseSql 	= 	" SELECT * FROM company_logo_mapping ".
            " WHERE listing_id = ? AND listing_type = 'course' AND status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['company_logo_mapping'] = $query->result_array();


        /*
		 * Table: listing_external_links
		 */
        $courseSql 	= 	" SELECT * FROM listing_external_links ".
            " WHERE listing_type_id = ? AND listing_type = 'course' AND status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['listing_external_links'] = $query->result_array();


        /*
		 * Table:  course_class_profile
		 */
        $courseSql 	= 	" SELECT * FROM  course_class_profile ".
            " WHERE course_id = ? AND status = ? LIMIT 1";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_class_profile'] = $query->row_array();


        /*
		 * Table:  course_job_profile
		 */
        $courseSql 	= 	" SELECT * FROM  course_job_profile ".
            " WHERE course_id = ? AND status = ? LIMIT 1";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_job_profile'] = $query->row_array();


        /*
		 * Table:  course_start_date_info
		 */
        $courseSql 	= 	" SELECT * FROM  course_start_date_info ".
            " WHERE course_id = ? AND status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['course_start_date_info'] = $query->result_array();


        /*
		 * Table: abroad_course_custom_values_mapping
		 */
        $courseSql 	= 	" SELECT * FROM abroad_course_custom_values_mapping ".
            " WHERE course_id = ? AND  status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['abroad_course_custom_values_mapping'] = $query->result_array();

        $courseSql 	= 	" SELECT type_of_institute2 from university uni ".
            " WHERE uni.university_id = ? AND uni.status = '".ENT_SA_PRE_LIVE_STATUS."' ";

        $query = $this->dbHandle->query($courseSql, array($data['university_info']['university_id']));
        $data['university_table_info'] = $query->row_array();

        /*
		 * Table : abroad_course_scholarship_mapping
		 */

        $scholarshipSql = "select * from abroad_course_scholarship_mapping where course_id = ? and status = ?";
        $data['scholarship'] = reset($this->dbHandle->query($scholarshipSql,array($courseId,$status))->result_array());


        /*
		 * Table: courseApplicationDetails
		 */
        $courseSql 	= 	" SELECT * FROM courseApplicationDetails ".
            " WHERE courseId = ? AND  status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['courseApplicationDetails'] = $query->result_array();

        /*
		 * Table: abroadCourseApplicationEligibiltyDetails
		 */
        $courseSql 	= 	" SELECT * FROM abroadCourseApplicationEligibiltyDetails ".
            " WHERE courseId = ? AND  status = ? ";
        $query = $this->dbHandle->query($courseSql, array($courseId, $status));
        $data['abroadCourseApplicationEligibiltyDetails'] = $query->result_array();

        return $data;

    }

    function getCourseBasicInfo($courseId) {
        if($courseId == "") {
            return false;
        }

        $this->initiateModel("read");
        $sql =  "SELECT listing_type_id as course_id, submit_date, username, pack_type, listing_seo_url ".
            "FROM listings_main ".
            "WHERE listing_type_id = ? AND listing_type = 'course' ".
            "AND status in ('".ENT_SA_PRE_LIVE_STATUS."', 'draft') limit 1";
        $query = $this->dbHandle->query($sql,array($courseId));
        return  $query->row_array();
    }

    function getDepartmentBasicInfo($deptId) {
        if($deptId == "") {
            return false;;
        }

        $this->initiateModel("read");
        $sql =  "SELECT lm.listing_type_id as deptId, lm.listing_title, lm.submit_date, lm.username, lm.pack_type, ilt.institute_location_id, ".
            "ilt.city_id, ilt.country_id, ium.university_id, u.name ".
            "FROM listings_main lm, institute_location_table ilt, institute_university_mapping ium, university u ".
            "WHERE lm.listing_type_id = ?  AND lm.listing_type = 'institute' AND lm.listing_type_id = ilt.institute_id ".
            "AND ium.institute_id  = lm.listing_type_id AND u.university_id = ium.university_id AND u.status = '".ENT_SA_PRE_LIVE_STATUS."' ".
            "AND lm.status = '".ENT_SA_PRE_LIVE_STATUS."' AND ilt.status = '".ENT_SA_PRE_LIVE_STATUS."' AND ium.status = '".ENT_SA_PRE_LIVE_STATUS."'";
        $query = $this->dbHandle->query($sql,array($deptId));
        return  $query->row_array();
    }

    /*
	 *Function to Get Ranking Details
	 */
    public function getRankingDetails($rankName='',$status='',$lowerLimit=0,$maxRows=20){
        $queryArray = array();
        $sql = "select SQL_CALC_FOUND_ROWS rp.id,rp.ranking_page_id,rp.name ranking_name,rp.type,rp.subcategory_id,rp.ldb_course_id,rp.country_id,rp.status,rp.last_modified last_date,rp.parentcategory_id ";
        $sql .= "from study_abroad_ranking_pages rp ";
        if($status==''){
            $sql .= "where rp.status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') and rp.id=(select max(id) from study_abroad_ranking_pages where ranking_page_id=rp.ranking_page_id) ";
        }else{
            $sql .= "where rp.status = ? ";
            $queryArray[] = $status;
        }
        if($rankName != ''){
            $sql .= "and rp.name like ? ";
            $queryArray[] = '%'.$rankName.'%';
        }
        //order by date
        $sql .= " order by last_date desc ";

        //set rows limit and count
        $sql .= "limit ?,? ";
        $queryArray[] = $lowerLimit;
        $queryArray[] = $maxRows;

        //Obtaing Read-Mode on DB
        $this->initiateModel('read');

        $result['rank_data'] = $this->dbHandle->query($sql,$queryArray)->result_array();

        //Query For Total Rows
        $sql =" select found_rows() totalRows";
        $result['total_count'] = $this->dbHandle->query($sql)->result_array();

        $queryArray = array();
        $sql = "select sum(if(status='".ENT_SA_PRE_LIVE_STATUS."',1,0)) published_count,sum(if(status='draft',1,0)) draft_count,sum(if(status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') and rp.id=(select max(id) from study_abroad_ranking_pages where ranking_page_id=rp.ranking_page_id),1,0)) all_count ";
        $sql .= "from study_abroad_ranking_pages rp ";
        if($rankName != ''){
            $sql .= "where name like ?";
            $queryArray[] = '%'.$rankName.'%';
        }

        $result['tabs'] = $this->dbHandle->query($sql,$queryArray)->result_array();

        return $result;
    }

    public function deleteRank($rankIds, $userId)
    {
        // get the write mode on DB
        $this->initiateModel("write");
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_start();
        }

        if(!(is_array($rankIds))){
            $rankIds = explode(',', $rankIds);
        }

        if(count($rankIds)==0){
            return 1;
        }

        /*
	      prepare mapping of the
	      1. table to be updated for deleting the rank
	      2. its respective WHERE clause
	      3. any addition data that need to be updated(if any)
	    */
        $tableToUpdate = array(array("study_abroad_ranking_pages" 			, "ranking_page_id IN %{1}% ", ",last_modified_by = ?, last_modified = now() "),
            array("study_abroad_rankings"			, "ranking_page_id IN %{1}% "),
        );

        // common where clause
        $commonWhereClause = " AND status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put rank id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);

            $queryArray = array();
            $setString = "";
            if(!empty($value[2])){
                $setString = $value[2];
                $queryArray[] = $userId;
            }
            $queryArray[] = $rankIds;
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause.$commonWhereClause;
            // execute the update query
            $updateStatus = $this->dbHandle->query($query,$queryArray);
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
        }

        return 1;
    }

    /*
	* Funtion to get the name of the university located in a particular country
	*/
    public function getUniversityName($university_id, $country_id = 0)
    {
        $this->initiateModel("read");
        $queryArray = array();
        $table_stmt = "SELECT 
			   uni.name as name,
			   uni.status as status
			   FROM university uni";

        $where_stmt = " AND uni.status IN ('".ENT_SA_PRE_LIVE_STATUS."' , 'draft')
		            AND uni.university_id = ?";
        $queryArray[] = $university_id;
        if( !empty($country_id))
        {
            $table_stmt .= " INNER JOIN university_location_table ult
				 ON(uni.university_id = ult.university_id AND uni.status = ult.status) ";
            if($country_id != 1){
                $where_stmt .= " AND ult.country_id = ?";
                $queryArray[] = $country_id;
            }
        }

        $query = $table_stmt. " WHERE 1 ".$where_stmt;

        $rs = $this->dbHandle->query($query,$queryArray)->result_array();

        return $rs;
    }

    /*
	* Funtion to get the name of the course located in a particular country
	*/
    public function getCourseName($course_id, $country_id, $courseTypeDetails = array())
    {
        $this->initiateModel("read");
        $queryArray = array();
        $table_stmt = "SELECT 
			   courseTitle as name,
			   cd.status as status
			   FROM `course_details` cd";

        $where_stmt = " AND cd.status IN ('".ENT_SA_PRE_LIVE_STATUS."' , 'draft')
		            AND cd.course_id = ?";
        $queryArray[] = $course_id;
        if( !empty($country_id))
        {
            $table_stmt .= " INNER JOIN course_location_attribute cla
				 ON(cd.course_id = cla.course_id AND cd.status = cla.status)
				 INNER JOIN institute_location_table ilt
				 ON(ilt.institute_location_id = cla.institute_location_id and ilt.status='".ENT_SA_PRE_LIVE_STATUS."') ";
            if($country_id != 1){
                $where_stmt .= " AND cla.attribute_type = 'Head Office'
				     AND ilt.country_id = ?";
                $queryArray[] = $country_id;
            }
        }

        $query = $table_stmt. " WHERE 1 ".$where_stmt;

        $rs = $this->dbHandle->query($query,$queryArray)->result_array();

        $flag = 1;
        if(!empty($courseTypeDetails))
        {
            $flag = 0;
            if(!empty($courseTypeDetails['desiredCourse']))
            {
                $flag = $this->isDesiredCourseExistsInClientCourse($course_id,$courseTypeDetails['desiredCourse']);
            }
            else
            {
                $flag = $this->isClientCourseMappedToCourseType($course_id,$courseTypeDetails['couresType'] );
                if($flag)
                {
                    if($courseTypeDetails['childCategory'] !=''){
                        $flag = $this->isClientCourseMappedToSubCategory($course_id,$courseTypeDetails['childCategory'] );
                    }elseif($courseTypeDetails['parentCategory'] !=''){
                        $flag = $this->isClientCourseMappedToParentCategory($course_id,$courseTypeDetails['parentCategory'] );
                    }
                }
            }
        }

        $rs['courseProperlyMappedFlag'] = $flag;
        return $rs;
    }

    public function isDesiredCourseExistsInClientCourse($clientCourseId, $desiredCourseId)
    {
        $this->initiateModel("read");

        $query = "SELECT count(*) as courseNum FROM `clientCourseToLDBCourseMapping` WHERE 1
		      AND `clientCourseID` = ?
		      AND status = '".ENT_SA_PRE_LIVE_STATUS."'
		      AND `LDBCourseID` = ?";

        $rs = $this->dbHandle->query($query,array($clientCourseId,$desiredCourseId))->row_array();

        if($rs['courseNum'])
            return 1;
        else
            return 0;
    }

    public function isClientCourseMappedToSubCategory($course_id, $subCategory)
    {
        $this->initiateModel("read");

        $query = "SELECT count(*) as courseNum FROM `listing_category_table` WHERE 1
		      AND listing_type = 'course'
		      AND listing_type_id = ?
		      AND category_id = ? 
		      AND status = '".ENT_SA_PRE_LIVE_STATUS."'";

        $rs = $this->dbHandle->query($query,array($course_id,$subCategory))->row_array();

        if($rs['courseNum'])
            return 1;
        else
            return 0;
    }

    public function isClientCourseMappedToParentCategory($course_id, $parentCategory)
    {
        $this->initiateModel("read");

        $query = "SELECT cb.parentId FROM `listing_category_table` lct 
	    left join categoryBoardTable cb on cb.boardId = lct.category_id
	    WHERE 1
		      AND lct.listing_type = 'course'
		      AND lct.listing_type_id = ?
		      AND lct.status = '".ENT_SA_PRE_LIVE_STATUS."'";

        $rs = $this->dbHandle->query($query,array($course_id))->row_array();
        if($rs['parentId'] == $parentCategory)
            return 1;
        else
            return 0;
    }

    public function isClientCourseMappedToCourseType($course_id, $courseType)
    {
        $this->initiateModel("read");
        $query = "SELECT count(*) as courseNum FROM `course_details` WHERE 1
		      AND course_id = ?
		      AND course_level_1 = ?
		      AND status = '".ENT_SA_PRE_LIVE_STATUS."'";

        $rs = $this->dbHandle->query($query,array($course_id,$courseType))->row_array();

        if($rs['courseNum'])
            return 1;
        else
            return 0;
    }

    /*
	* Funtion to save the ranking page
	*/
    public function saveRankingPage($rankingFormData)
    {
        // get the write DB handle
        $this->initiateModel("write");
        // start the transaction
        $this->dbHandle->trans_start();

        if($rankingFormData['rankingActionType'] == ENT_SA_FORM_ADD_RANKING)
        {
            $ranking_id = $this->_getNewAutogeneratedId('study_abroad_ranking');
        }
        else if($rankingFormData['rankingActionType'] == ENT_SA_FORM_EDIT_RANKING)
        {
            $ranking_id = $rankingFormData['rankingId'];
            if($rankingFormData["rankingStatus"] == ENT_SA_PRE_LIVE_STATUS)
            {
                $this->updateRankingDataStatus($ranking_id, array("draft", ENT_SA_PRE_LIVE_STATUS), "history",1);
            }
            else
            {
                $this->updateRankingDataStatus($ranking_id, array("draft"), "history",1);
            }

        }
        else
        {
            return false;
        }

        // ============== Add Ranking Master Details
        $data = array(
            'ranking_page_id' 	=> $ranking_id,
            'name' 		=> $rankingFormData["rankingName"],
            'title' 		=> $rankingFormData["rankingTitle"],
            'type' 		=> strtolower($rankingFormData["rankingType"]),
            'subcategory_id' 	=> $rankingFormData["childCategory"],
            'parentcategory_id' => $rankingFormData["parentCategory"],
            'ldb_course_id' 	=> $rankingFormData["rankingLDBCourseId"],
            'seo_title'		=> $rankingFormData["rankingSeoTitle"],
            'seo_description'	=> $rankingFormData["rankingDesc"],
            'seo_keywords'	=> $rankingFormData["rankingKeywords"],
            'country_id'	=> $rankingFormData["countryId"],
            'created'		=> $rankingFormData["submit_date"],
            'last_modified'	=> date('Y-m-d H:i:s'),
            'status'		=> $rankingFormData["rankingStatus"],
            'last_modified_by'	=> $rankingFormData["rankingLastModifiedBy"],
            'created_by'	=> $rankingFormData["rankingCreatedBy"]
        );

        //insert row in "study_abroad_ranking_pages"
        $this->dbHandle->insert('study_abroad_ranking_pages', $data);

        // ============ Add Rankings Details ================
        if($rankingFormData['rankingActionType'] == ENT_SA_FORM_EDIT_RANKING)
        {
            $arrayToBeInserted = array();
            //_p($rankingFormData['listingIds']);
            foreach($rankingFormData['listingIds'] as $rank=>$listing_id)
            {
                if(empty($listing_id))
                    continue;
                $data = array(
                    'ranking_page_id' 	=> $ranking_id,
                    'listing_id' 	=> $listing_id,
                    'rank' 		=> $rank+1,
                    'status' 		=> $rankingFormData["rankingStatus"]
                );
                $arrayToBeInserted[] = $data;

            }
            if(!empty($arrayToBeInserted))
                $this->dbHandle->insert_batch('study_abroad_rankings', $arrayToBeInserted);

            $this->addComments($this->dbHandle, $rankingFormData["rankingCreatedBy"], $ranking_id, 'abroad_ranking', mysql_escape_string($rankingFormData["rankingUserComments"]));
        }

        // commit the transaction
        $this->dbHandle->trans_complete();
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        // update in cache
        $this->updateRankingPageCache($ranking_id);
        return $ranking_id;
    }

    public function updateRankingDataStatus($rankingId, $fromStatusArr, $toStatusVal, $isTransactionActive = 0)
    {
        if(!$isTransactionActive)
        {
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }

        if(!(is_array($fromStatusArr))){
            $fromStatusArr = explode(',', $fromStatusArr);
        }

        if(count($fromStatusArr)==0){
            return 1;
        }

        $query = "Update study_abroad_ranking_pages SET status = ?
		      WHERE status IN (?)
		      AND ranking_page_id = ?";

        $this->dbHandle->query($query,array($toStatusVal,$fromStatusArr,$rankingId));

        //study_abroad_rankings
        $query = "Update study_abroad_rankings SET status = ?
		      WHERE status IN (?)
		      AND ranking_page_id = ?";

        $this->dbHandle->query($query,array($toStatusVal,$fromStatusArr,$rankingId));

        if(!$isTransactionActive)
        {
            // commit the transaction
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
        }

    }

    public function getAbroadCourseLevels()
    {
        $this->initiateModel("read");

        $query = "SELECT DISTINCT `CourseName` FROM `tCourseSpecializationMapping` WHERE
	    	  scope = 'abroad'
		      AND isEnabled = 1
		      AND parentId > 1";

        return $this->dbHandle->query($query,array())->result_array();
    }
    /*
	 * gets abroad course levels for registration forms where certificate &/|| diploma courses are not shown
	 */
    public function getAbroadCourseLevelsForRegistrationForms()
    {
        $this->initiateModel("read");
        $query = "SELECT DISTINCT CourseName, CourseLevel1
						FROM tCourseSpecializationMapping
						WHERE scope = 'abroad' AND isEnabled = 1
							AND parentId > 1
							AND CourseLevel not in ('Certificate - Diploma' , 'Certification', 'Diploma');
						";
        return $this->dbHandle->query($query,array())->result_array();
    }
    public function fetchAbroadLDBCourse($couresType, $parentCategory)
    {
        $this->initiateModel("read");

        $query = "SELECT SpecializationId FROM `tCourseSpecializationMapping` WHERE 1
		      AND scope = 'abroad'
		      AND isEnabled = 1
		      AND CourseName = ?
		      AND CategoryId = ?
		      AND status = 'live'";

        $rs = $this->dbHandle->query($query,array($couresType,$parentCategory))->result_array();

        if(!empty($rs))
            return $rs[0]['SpecializationId'];
        else
            return 0;
    }

    public function getRankingDataForEditMode($rankingId)
    {
        $this->initiateModel("read");

        $query = "SELECT * FROM `study_abroad_ranking_pages` WHERE 1
		      AND ranking_page_id = ?
		      AND status = ?
		      LIMIT 1";

        $rs = $this->dbHandle->query($query, array($rankingId, 'draft'));
        $status = 'draft';
        if($rs->num_rows() <= 0) {
            $rs = $this->dbHandle->query($query,array($rankingId, ENT_SA_PRE_LIVE_STATUS));
            $status = ENT_SA_PRE_LIVE_STATUS;
        }
        $data['study_abroad_ranking_pages'] = $rs->row_array();

        if($data['study_abroad_ranking_pages'])
        {
            $rankingType = $data['study_abroad_ranking_pages']['type'];

            $ldbCourseId = $data['study_abroad_ranking_pages']['ldb_course_id'];

            if(!empty($ldbCourseId) && $ldbCourseId > 0)
            {
                $query = "SELECT * from tCourseSpecializationMapping where 1
			      AND scope = 'abroad' AND isEnabled = 1 AND SpecializationId = ".$ldbCourseId;
                $rs = $this->dbHandle->query($query)->row_array();

                $data['study_abroad_ranking_pages']['desiredCourse'] 	= 0;
                $data['study_abroad_ranking_pages']['couresType'] 		= "";
                $data['study_abroad_ranking_pages']['parentCategory'] 	= 0;

                if($rs)
                {
                    if($rs['CategoryId'] == 1 && $rs['ParentId'] == 1)
                    {
                        $data['study_abroad_ranking_pages']['desiredCourse'] = $ldbCourseId;
                    }
                    else
                    {
                        $data['study_abroad_ranking_pages']['couresType'] 	  = $rs['CourseName'];
                        $data['study_abroad_ranking_pages']['parentCategory'] = $rs['CategoryId'];
                    }
                }
            }
            $data = $data['study_abroad_ranking_pages'];

            // get the rankings data here
            if($data['type'] == 'university')
            {
                $query = "SELECT 
			       sar.*,
			       uni.name as name
			       FROM 
			       study_abroad_rankings sar
			       LEFT JOIN
			       university uni
			       ON(sar.listing_id = uni.university_id AND uni.status='".ENT_SA_PRE_LIVE_STATUS."') 
			       WHERE 1
			       AND ranking_page_id = ?
			       AND sar.status = ?
			       GROUP BY sar.id order by sar.rank asc ";
            }
            else
            {
                $query = "SELECT 
			       sar.*,
			       cd.courseTitle as name
			       FROM 
			       study_abroad_rankings sar
			       LEFT JOIN
			       course_details cd
			       ON(sar.listing_id = cd.course_id AND cd.status = '".ENT_SA_PRE_LIVE_STATUS."') 
			       WHERE 1
			       AND ranking_page_id = ?
			       AND sar.status = ?
			       Group by sar.id
			       order by sar.rank asc";
            }

            $rs = $this->dbHandle->query($query,array($rankingId,$status))->result_array();

            $data['study_abroad_rankings'] = $rs;

            //to show user name on top as last modified by...
            if($data['last_modified_by'])
            {
                $UserModel = $this->load->model('user/usermodel');
                $userName = $UserModel->getUserById($data['last_modified_by'])->getFirstName()." ".$UserModel->getUserById($data['last_modified_by'])->getLastName();
                $data['username'] = $userName;
            }
        }

        return $data;
    }

    public function checkForDuplicateRankingPage($rankingType, $ldbCourseId, $subCategory, $countryId, $rankingId)
    {
        $this->initiateModel("read");

        $query = "SELECT DISTINCT status as status from study_abroad_ranking_pages
		      WHERE 1
		      AND type = ?
		      AND ldb_course_id = ?
		      AND subcategory_id = ?
		      AND country_id = ?
		      AND status IN ('".ENT_SA_PRE_LIVE_STATUS."')";

        if($rankingId)
        {
            $query .= " AND ranking_page_id != ?";
        }

        $rs = $this->dbHandle->query($query,array($rankingType,$ldbCourseId,$subCategory,$countryId,$rankingId))->result_array();

        if(empty($rs))
            return 0;
        else
        {
            $status = array();
            foreach($rs as $key=>$value)
                $status[] = $value['status'];
            return $status;
        }
    }
    /*
	 * to update city id in institute location table when city of university is changed.
	 */
    public function updateDepartmentCityOnUniversityEdit($city_id, $university_id, $transactionActive = false)
    {
        $this->initiateModel("write");
        if(!$transactionActive )
        {
            $this->dbHandle->trans_start();
        }
        $sql = "select city_name from ".ENT_SA_COUNTRY_CITY_TABLE_NAME." where city_id = ?";
        $city = $this->dbHandle->query($sql,array($city_id))->result_array();

        $query = "update institute_location_table ILT
		      inner join institute_university_mapping IUM
		      on(ILT.institute_id = IUM.institute_id and ILT.status in('draft', '".ENT_SA_PRE_LIVE_STATUS."'))
		      set ILT.city_id = ? ,
		      ILT.city_name = ?
		      where IUM.university_id = ?
		      and ILT.status in('draft', '".ENT_SA_PRE_LIVE_STATUS."')";
        //error_log("adding update".$city_id.$query);
        $this->dbHandle->query($query,array($city_id,$city[0]['city_name'],$university_id));

        if(!$transactionActive){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }

    /*
	 * Add Content(Article/Guide)
	 */
    public function addContent($contentData){
        // get the write DB handle
        $this->initiateModel("write");

        // Transaction Start
        $this->dbHandle->trans_start();

        if($contentData['formAction'] == 'add')
        {
            $contentData['content_contentId'] 	  = $this->_getNewAutogeneratedId('content');
            $contentData['content_created_by'] 	  = $contentData['userId'];
            $contentData['content_createdDate']   = date('Y-m-d H:i:s');

            if($contentData['content_type'] == "examPage")
            {
                $abroadPostingLib 	= $this->load->library('listingPosting/AbroadPostingLib');
                $abroadExamsMasterList = $this->getAbroadExamsMasterList();
                $i=0;
                foreach($abroadExamsMasterList as $examList)
                {
                    if($examList['examId'] == $contentData['content_exam_type'] )
                        break;
                    else
                        $i++;
                }
                $examName = $abroadExamsMasterList[$i]['exam'];
                $contentData['content_contentURL'] = $abroadPostingLib->getExamUrl($examName , $contentData['content_contentId'] );
            }
            if($contentData['content_type'] == "examContent" && $contentData['redirectSEOUrl']!=''){
                $table_data = array();
                $table_data['content_id'] 		= $contentData['content_contentId'];
                $table_data['old_content_url'] 	= $contentData['redirectSEOUrl'];
                $table_data['status'] 			= 'live';
                $table_data['created_by'] 	 	= $contentData['userId'];
                $table_data['created_on']   		= date('Y-m-d H:i:s');
                $this->dbHandle->insert('sa_content_redirection_mapping', $table_data);

            }

        }
        elseif($contentData['formAction'] == 'edit')
        {

            $contentData['content_contentId'] = $contentData['content_contentId'];
            $sql = "select old_article_id as oldArticleId ";
            $sql .= "from sa_content_mapping_articleid ";
            $sql .= "where content_id= ? and status ='live'";
            $sql .= " order by id asc limit 1 ";
            $resultSet = $this->dbHandle->query($sql,array($contentData['content_contentId']))->result_array();
            $contentData['content_oldArticleId'] = $resultSet[0]['oldArticleId'];

            $sql = "select view_count as viewCount, comment_count as commentCount, published_on as contentUpdatedAt, popularity_count as popularityCount ";
            $sql .= " from sa_content ";
            $sql .= " where content_id=? and status ='live'";
            $resultSet = $this->dbHandle->query($sql,array($contentData['content_contentId']))->result_array();

            if(empty($resultSet))
            {
                $contentData['content_viewCount'] = 0;
                $contentData['content_commentCount'] = 0;
                $contentData['contentUpdatedAt'] = date('Y-m-d H:i:s');
                $contentData['popularityCount'] = 0;
            }
            else
            {
                $contentData['content_viewCount'] = $resultSet[0]['viewCount'];
                $contentData['content_commentCount'] = $resultSet[0]['commentCount'];
                if(!isset($contentData['contentUpdatedAt']))
                {
                    $contentData['contentUpdatedAt'] = $resultSet[0]['contentUpdatedAt'];
                }
                $contentData['popularityCount'] = $resultSet[0]['popularityCount'];

            }
            //$contentData['contentImageURL'] = $resultSet[0]['contentImageURL'];

            $this->updateContentData($contentData);
            $sql = "select created_on as created,created_by ";
            $sql .= "from sa_content ";
            $sql .= "where content_id= ? ";
            $sql .= "order by id asc limit 1 ";
            $resultSet = $this->dbHandle->query($sql,array($contentData['content_contentId']))->result_array();
            if(empty($resultSet))
            {
                $contentData['content_createdDate'] = date('Y-m-d H:i:s');
            }
            else
            {
                $contentData['content_createdDate'] = $resultSet[0]['created'];
            }
            $contentData['content_created_by'] = $resultSet[0]['created_by'];
            $contentData['content_contentURL'] = str_replace(SHIKSHA_STUDYABROAD_HOME, '', $contentData['content_contentURL']);
        }
        // in case of apply content prepare url
        if($contentData['content_type'] == "applyContent")
        {
            $abroadPostingLib 					= $this->load->library('listingPosting/AbroadPostingLib');
            $contentData['content_contentURL'] 	= $abroadPostingLib->getApplyContentSeoUrl($contentData);
        }
        /******** Add Content in sa_content table Code Block ********/
        $table_data = array();
        if(!($contentData['content_type'] == '')){
            $lastModified = date('Y-m-d H:i:s');
            $table_data = array("content_id" => $contentData['content_contentId'],
                "type" => $contentData['content_type'],
                "expert_id"=>$contentData['content_expert'],
                "title" => $contentData['content_title'],
                //"strip_title" => $contentData['content_stripTitle'],
                "summary" => $contentData['content_summary'],
                "comment_count" => $contentData['content_commentCount'],
                "view_count" => $contentData['content_viewCount'],
                "seo_title" => $contentData['content_seoTitle'],
                "seo_description" => $contentData['content_seoDescription'],
                "seo_keywords" => $contentData['content_seoKeywords'],
                "is_downloadable" => $contentData['content_isDownloadable'],
                "content_image_url" => str_replace(MEDIAHOSTURL, '', $contentData['contentImageURL']),
                "content_url" => rtrim(str_replace(SHIKSHA_STUDYABROAD_HOME,'',$contentData['content_contentURL']),'/'),
                "download_link" => str_replace(MEDIAHOSTURL, '', $contentData['content_guide']),
                "created_on" => $contentData['content_createdDate'],
                "updated_on" => $lastModified,
                "status" => $contentData['status'],
                "created_by" => $contentData['content_created_by'],
                "published_on" => $contentData['contentUpdatedAt'],
                "updated_by" => $contentData['userId'],
                "popularity_count" => $contentData['popularityCount'],
                //"is_homepage"=>$contentData['isHomepage'],
                "apply_content_type_id"=>$contentData['applyContentType']
            );

	    if(is_null($contentData['isHomepage']) || $contentData['isHomepage'] == "") {
                $table_data['is_homepage'] = "no";
	    }else{
		$table_data['is_homepage'] = $contentData['isHomepage'];
	    }
            if($contentData['content_guideURL'] != "") {
                $table_data['download_link'] = $contentData['content_guideURL'];
            }
            
            if($contentData['content_type'] == "examContent") {
                $table_data['exam_id'] = $contentData['content_exam_type'];
            }
            // prepare table data array for lifecycle tags
            $table_data_lifecycle_tags =  array();
            for($i = 0 ; $i < count($contentData['level']); $i++){
                $table_data_lifecycle_tags[] = array(
                    "contentId" => $contentData['content_contentId'],
                    "level" 	=> $contentData['level'][$i],
                    "value" 	=> $contentData['value'][$i],
                    "status" 	=> $contentData['status']
                );
            }
            //insert query
            $this->dbHandle->insert('sa_content', $table_data);

            $id = $this->dbHandle->insert_id();

            $contentSql = "select content_id from sa_content where id = ?";
            $query = $this->dbHandle->query($contentSql,array($id));
            $queryResults = $query->result();
            $contentId = $queryResults[0]->content_id;

            error_log(print_r($contentId,true));

            //insert query for study_abroad_content_lifecycle_tags
            foreach($table_data_lifecycle_tags as $table_data_lifecycle_tag)
            {
                $this->dbHandle->insert('study_abroad_content_lifecycle_tags', $table_data_lifecycle_tag);
            }

            if(!($contentData['content_type'] == 'examPage' || $contentData['content_type'] == 'applyContent' || $contentData['content_type'] == 'examContent')){
                $this->updateUrl($contentId,$table_data['type'] , html_entity_decode(strip_tags($contentData['content_title']),ENT_NOQUOTES, 'UTF-8'));
            }

        }

        /******** Add Mapping in sa_content_mapping_articleid table Code Block ********/
        if(!($contentData['content_seoMappingContentId'] == '')){
            $table_data = array("content_id" => $contentData['content_contentId'],
                "old_article_id" => $contentData['content_seoMappingContentId'],
                "user_id" => $contentData['userId'],
                "status" => $contentData['status']
            );
            //insert query
            $this->dbHandle->insert('sa_content_mapping_articleid', $table_data);
        }

        /******** Update Related Date in sa_content table Code Block ********/
        if($contentData['relatedDate'] != '' && $contentData['relatedDate'] != 'YYYY-MM-DD' && $contentData['relatedDate'] != '0000-00-00'){
            $sql = "update sa_content set related_date = ? where content_id = ? AND status =? ";
            $this->dbHandle->query($sql,array($contentData['relatedDate'],$contentData['content_contentId'],$contentData['status']));
        }

        /******** Add Content in sa_content_attribute_mapping for country table Code Block ********/
        $table_data = array();
        if(!empty($contentData['content_country'])) {
            foreach($contentData['content_country'] as $value){
                if($value != ''){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "attribute_id" => $value,
                        "attribute_mapping" => "country",
                        "status" => $contentData['status']
                    ));
                }
            }
            if(count($table_data)>0){
                //insert query
                $this->dbHandle->insert_batch('sa_content_attribute_mapping', $table_data);
            }
        }

        /******** Add Content in sa_content_attribute_mapping for ldbcourse table Code Block ********/
        $table_data = array();
        if(!empty($contentData['content_desiredCourse'])) {
            foreach($contentData['content_desiredCourse'] as $value){
                if($value != ''){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "attribute_id" => $value,
                        "attribute_mapping" => "ldbcourse",
                        "status" => $contentData['status']
                    ));
                }
            }
            if(count($table_data)>0){
                //insert query
                $this->dbHandle->insert_batch('sa_content_attribute_mapping', $table_data);
            }
        }

        /******** Add Content in sa_content_tags_mapping table Code Block ********/
        $table_data = array();
        if(!empty($contentData['content_tags'])) {
            foreach($contentData['content_tags'] as $value){
                if($value != ''){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "tag_id" => $value,
                        "status" => $contentData['status']
                    ));
                }
            }
            if(count($table_data)>0){
                //insert query
                $this->dbHandle->insert_batch('sa_content_tags_mapping', $table_data);
            }
        }

        /******** Add Content in sa_content_attribute_mapping (exam) table Code Block ********/
        $table_data = array();
        if(!empty($contentData['content_exam'])) {
            foreach($contentData['content_exam'] as $value){
                if($value != ''){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "attribute_id" => $value,
                        "attribute_mapping" => "exam",
                        "status" => $contentData['status']
                    ));
                }
            }
            if(count($table_data)>0){
                //insert query
                $this->dbHandle->insert_batch('sa_content_attribute_mapping', $table_data);
            }
        }

        /******** Add Content in sa_content_attribute_mapping (university) table Code Block ********/
        $table_data = array();
        if(!empty($contentData['content_institute'])) {
            foreach($contentData['content_institute'] as $value){
                if($value != ''){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "attribute_id" => $value,
                        "attribute_mapping" => "university",
                        "status" => $contentData['status']
                    ));
                }
            }
            if(count($table_data)>0){
                //insert query
                $this->dbHandle->insert_batch('sa_content_attribute_mapping', $table_data);
            }
        }

        /******** Add Content in sa_content_sections table Code Block ********/
        if(!empty($contentData['content_details'])) {
            $rowCount = count($contentData['content_details']);
            $table_data = array();
            if($rowCount){
                for($i=0;$i<$rowCount;$i++){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "heading" => $contentData['content_heading'][$i],
                        "details" => $contentData['content_details'][$i],
                        "status" => $contentData['status']
                    ));
                }
                //insert query
                $this->dbHandle->insert_batch('sa_content_sections', $table_data);
            }
        }

        /******** Add Content in sa_content_course_mapping table Code Block ********/
        if($contentData['content_courseType']){
            $rowCount = count($contentData['content_parentCategory']);
            if($rowCount){
                $table_data = array();
                for($i=0;$i<$rowCount;$i++){
                    array_push($table_data,array("content_id" => $contentData['content_contentId'],
                        "course_type" => $contentData['content_courseType'][$i],
                        "parent_category_id" => $contentData['content_parentCategory'][$i],
                        "subcategory_id" => $contentData['content_subCategory'][$i],
                        "status" => $contentData['status']
                    ));
                }

                //insert query
                $this->dbHandle->insert_batch('sa_content_course_mapping', $table_data);
            }
        }

        foreach ($contentData['contentImages'] as $index => $data){
            $imageDetails = explode('#', $data);
            $mediaId = $imageDetails[0];
            $mediaUrl = str_replace(MEDIAHOSTURL, '', $imageDetails[1]);
            $table_data = array();
            $table_data['content_id'] = $contentData['content_contentId'];
            $table_data['media_id'] = $mediaId;
            $table_data['image_url'] = $mediaUrl;
            $table_data['updated_on'] =  date('Y-m-d h:i:s');
            $table_data['status'] = $contentData['status'];
            if(!empty($mediaUrl))
                $this->dbHandle->insert('sa_content_images', $table_data);
        }

        /******** Add another row in sa_content_sections if type is apply content********/
        if($contentData['content_type'] == "applyContent")
        {
            $table_data = array();
            $table_data['content_id'] = $contentData['content_contentId'];
            $table_data['details'] = $contentData['content_details2'];
            $table_data['status'] = $contentData['status'];
            //insert query
            $this->dbHandle->insert('sa_content_sections', $table_data);
        }

        /******** Add row in examContent if type is exam content********/
        if($contentData['content_type'] == "examContent")
        {
            $table_data = array();
            $table_data['content_id'] = $contentData['content_contentId'];
            $table_data['details'] = $contentData['content_details2'];
            $table_data['status'] = $contentData['status'];
            //insert query
            $this->dbHandle->insert('sa_content_sections', $table_data);
        }

        if($contentData['formAction'] == 'add'){
            if($contentData['redirectContentId'] >0 && $contentData['content_contentId']>0){
                $this->moveOldCommentToNewContent($contentData['redirectContentId'],$contentData['content_contentId'],$contentData['redirectSectionId'],true);
                $this->deleteGuideArticle(array($contentData['redirectContentId']), $contentData['userId'],true);
            }
        }

        //Transaction Complete
        $this->dbHandle->trans_complete();

        //Check Transaction Status
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }

        return "1";
    }

    public function updateContentData($contentData){
        $newStatus = "history";
        $content_id = $contentData['content_contentId'];
        if($contentData['status'] == 'live'){
            $oldStatus = "'live','draft'";
        }else{
            $oldStatus = "'draft'";
        }
        $oldStatus = $oldStatus;

        // get the write DB handle
        $this->initiateModel("write");

        // Transaction Start
        $this->dbHandle->trans_start();
        $this->dbHandle->query("update sa_content set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        // update status as history in attrubutes mapping table where we keep country, ldbcourse, exam & university mapping
        $this->dbHandle->query("update sa_content_attribute_mapping set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        // tags mapping
        $this->dbHandle->query("update sa_content_tags_mapping set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        // content sections, apply content sections, exam content sections
        $this->dbHandle->query("update sa_content_sections set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        // course mapping
        $this->dbHandle->query("update sa_content_course_mapping set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        // content images
        $this->dbHandle->query("update sa_content_images set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        
        $this->dbHandle->query("update sa_content_mapping_articleid set status = ? where content_id = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));
        
        $this->dbHandle->query("update study_abroad_content_lifecycle_tags set status = ? where contentId = ? and status in(".$oldStatus.") ",array($newStatus,$content_id));

        if($contentData['relatedDate']!='YYYY-MM-DD' && $contentData['relatedDate']!='0000-00-00'){
            $this->dbHandle->query("update sa_content set related_date = ? where content_id = ? and status in(".$oldStatus.") ",array($contentData['relatedDate'],$content_id));
        }
        
        //Transaction Complete
        $this->dbHandle->trans_complete();

        //Check Transaction Status
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }

        return "1";

    }

    // Function to Get Tags From DB
    public function getTags(){
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');

        $sql = "select id,tag_title ";
        $sql .= "from sa_content_tags ";
        $sql .= "where status = ? ";

        return $this->dbHandle->query($sql,array(ENT_SA_PRE_LIVE_STATUS))->result_array();
    }

    //Function to check if Title already exists in Content Table
    public function isContentExist($content_type,$tag_stripTitle,$searchTagID, $additionalData){
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');
        //check for title
        $queryArray = array();
        $sql = "select count(1) tag ";
        $sql .= "from sa_content ";
        $sql .= "where type=? and title=? and (status ='".ENT_SA_PRE_LIVE_STATUS."' or status = 'draft') ";

        $queryArray[] = $content_type;
        $queryArray[] = $tag_stripTitle;

        if($searchTagID != ''){
            $sql .= "and content_id <> ? ";
            $queryArray[] = $searchTagID;
        }
        $result = $this->dbHandle->query($sql,$queryArray)->result_array();
        $returnData = array();
        $returnData['title_exists'] = $result[0]['tag'];

        //check for content url
        $searchContentURL = $additionalData['searchContenturl'];
        $examTypeId = $additionalData['examTypeId'];

        if(!empty($searchContentURL)) {
            $sql = "select content_url as contentURL from sa_content where type = ? and (status = 'live' or status = 'draft') and content_url like ? ";
            $data[] = $content_type;
            $data[] = '%'.$searchContentURL.'%';

            if(!empty($examTypeId)) {
                $sql .= "and exam_id = ? ";
                $data[] = $examTypeId;
            }
            if(!empty($searchTagID)){
                $sql .= "and content_id <> ? ";
                $data[] = $searchTagID;
            }

            $result = $this->dbHandle->query($sql,$data)->result_array();

            $count = 0;
            //exact match fix
            foreach($result as $value) {
                if($content_type=="applyContent") {
                    //contentURL pattern: /germany-student-visa-guide-applycontent5777
                    $contentURL = substr($value['contentURL'], 1);
                    $urlArr = explode("-applycontent", $contentURL);
                    $urlFound = $urlArr[0];
                } else if($content_type=="examContent") {
                    //contentURL pattern: /exams/sat/prep-tips-writing-section
                    $contentURL = substr($value['contentURL'], 1);
                    $urlArr = explode("/", $contentURL);
                    $urlFound = $urlArr[2];
                }
                if($urlFound==$searchContentURL) {
                    $count++;
                }
            }

            $returnData['content_url_exists'] = $count;
        }
        //_p($this->dbHandle->last_query());

        return $returnData;
    }


    /**
     * Purpose : Method to delete the Guide/Article
     * Params  :	1. Array of Guide/Articles ids
     * 		2. flag for already active transaction
     * Author  : Romil Goel
     */
    function deleteGuideArticle($articleIds, $userId, $isTransactionActive = 0)
    {
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the read DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }

        if(!(is_array($articleIds))){
            $articleIds = explode(',', $articleIds);
        }

        if(count($articleIds)==0){
            return 1;
        }

        /*
	  prepare mapping of the
	  1. table to be updated for deleting the course
	  2. its respective WHERE clause
	  3. any addition data that need to be updated(if any)
	*/
        $tableToUpdate = array(
            array("sa_content" 			, "content_id IN %{1}% "," , updated_by = ?, updated_on = now() "),
            array("sa_content_attribute_mapping"	, "content_id IN %{1}% "),
            array("sa_content_tags_mapping"	, "content_id IN %{1}% "),
            array("sa_content_sections"		, "content_id IN %{1}% "),
            array("sa_content_course_mapping"	, "content_id IN %{1}% "),
            array("study_abroad_content_lifecycle_tags"	, "contentId IN %{1}% "),
            array("sa_content_images"	, "content_id IN %{1}% ")
        );

        // common where clause
        $commonWhereClause = " AND status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            $queryArray = array();
            $setString = "";
            if(!empty($value[2])){
                $setString = $value[2];
                $queryArray[] = $userId;
            }
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $queryArray[] = $articleIds;

            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' ".$setString." WHERE 1 AND ".$whereClause.$commonWhereClause;
            //_p($query);
            // execute the update query
            $updateStatus = $this->dbHandle->query($query,$queryArray);
            //_p("Update status : ".$updateStatus." and Affected Rows : ".$this->dbHandle->affected_rows()."<br><br>");
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
        }

        return 1;
    }

    //function to populate content form in edit mode
    public function getContentData($content_id)
    {
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');
        $sql = "select content_id,type,title,summary,seo_title,seo_description,seo_keywords,is_downloadable,download_link,content_image_url as contentImageURL,content_url as contentURL,view_count as viewCount, comment_count as commentCount, status,updated_on as last_modified,updated_by as last_modified_by,related_date as relatedDate,exam_id as exam_type, is_homepage, apply_content_type_id,expert_id";
        $sql .= " from sa_content ";
        $sql .= " where content_id= ? and status in ('live','draft') ";
        $sql .= " order by id desc limit 1 ";

        $resultSet = $this->dbHandle->query($sql,array($content_id))->result_array();
        if(empty($resultSet)){
            return null;
        }

        $result[$content_id]['basic_info'] = $resultSet[0];
        $status = $result[$content_id]['basic_info']['status'];

        $sql = "select ccm.attribute_id as country_id,cta.name as country_name from sa_content_attribute_mapping ccm ";
        $sql .= "inner join ".ENT_SA_COUNTRY_TABLE_NAME." cta on(ccm.attribute_mapping = 'country' and ccm.attribute_id=cta.countryId) ";
        $sql .= "where ccm.content_id=? and ccm.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['country_info'] = $resultSet;


        $sql = "select cum.attribute_id as university_id, u.name as university_name from sa_content_attribute_mapping cum ";
        $sql .= "inner join university u on(cum.attribute_mapping = 'university' and cum.attribute_id = u.university_id) ";
        $sql .= "where cum.content_id= ? and cum.status=? and u.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status,ENT_SA_PRE_LIVE_STATUS))->result_array();

        $result[$content_id]['university_info'] = $resultSet;

        $sql = "select clm.attribute_id as ldb_course_id,tcm.CourseName as ldb_course_name from sa_content_attribute_mapping clm ";
        $sql .= "inner join tCourseSpecializationMapping tcm on(clm.attribute_mapping = 'ldbcourse' and clm.attribute_id=tcm.SpecializationId) ";
        $sql .= "where clm.content_id=? and clm.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['ldbCourse_info'] = $resultSet;


        $sql = "select ccm.course_type,ccm.parent_category_id,cbt.name parentCategory_name,ccm.subcategory_id,cbtSub.name subCategory_name ";
        $sql .= "from sa_content_course_mapping ccm left join categoryBoardTable cbt on(ccm.parent_category_id=cbt.boardId) ";
        $sql .= "left join categoryBoardTable cbtSub on(ccm.subcategory_id=cbtSub.boardId) ";
        $sql .= "where ccm.content_id=? and ccm.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['courseMapping_info'] = $resultSet;

        $sql = "select ctm.tag_id,ct.tag_title ";
        $sql .= "from sa_content_tags_mapping ctm inner join sa_content_tags ct on(ctm.tag_id=ct.id) ";
        $sql .= "where ctm.content_id=? and ctm.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['tag_info'] = $resultSet;

        $sql = "select cem.attribute_id as exam_id,exam ";
        $sql .= "from sa_content_attribute_mapping cem inner join abroadListingsExamsMasterTable alm on(cem.attribute_mapping = 'exam' and cem.attribute_id=alm.examId) ";
        $sql .= "where cem.content_id=? and cem.status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['exam_info'] = $resultSet;

        $sql = "select heading,details ";
        $sql .= " from sa_content_sections ";
        $sql .= " where content_id=? and status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();

        $result[$content_id]['contentSection_info'] = $resultSet;


        $sql = "select old_article_id as oldArticleId ";
        $sql .= "from sa_content_mapping_articleid sacma inner join  sa_content sac on(sac.content_id=sacma.content_id) ";
        $sql .= "where sac.content_id=? and sac.status=? and sacma.status = ? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status,$status))->result_array();

        $result[$content_id]['basic_info']['seoMappingContentId'] = $resultSet['0']['oldArticleId'];

        // lifecycle tags
        $sql = "select level as level1, value as level2 ";
        $sql .= "from study_abroad_content_lifecycle_tags ";
        $sql .= "where contentId = ? and status=? ";

        $resultSet = $this->dbHandle->query($sql,array($content_id,$status))->result_array();
        $result[$content_id]['lifecycle_tags'] = $resultSet;

        // apply content details
        if($result[$content_id]['basic_info']['type'] == "applyContent")
        {
            $this->dbHandle->select("content_id as contentId, details as description2");
            $this->dbHandle->from("sa_content_sections");
            $this->dbHandle->where("content_id",$content_id);
            $this->dbHandle->where("status",$status);
            $this->dbHandle->order_by("id","desc");
            $resultSet = $this->dbHandle->get()->result_array();
            $result[$content_id]['applyContentDetails'] = $resultSet[0];
            $result[$content_id]['applyContentDetails']['applyContentType'] = $result[$content_id]['basic_info']['apply_content_type_id'];
            $result[$content_id]['applyContentDetails']['isHomepage'] = $result[$content_id]['basic_info']['is_homepage'];
        }
        // exam content details
        if($result[$content_id]['basic_info']['type'] == "examContent")
        {
            $this->dbHandle->select("content_id as contentId,details as description2");
            $this->dbHandle->from("sa_content_sections");
            $this->dbHandle->where("content_id",$content_id);
            $this->dbHandle->where("status",$status);
            $this->dbHandle->order_by("id","desc");
            $resultSet = $this->dbHandle->get()->result_array();
            $result[$content_id]['examContentDetails'] = $resultSet[0];
            $result[$content_id]['examContentDetails']['isHomepage'] = $result[$content_id]['basic_info']['is_homepage'];

            $this->dbHandle->select("old_content_url as oldContentURL");
            $this->dbHandle->from("sa_content_redirection_mapping");
            $this->dbHandle->where("content_id",$content_id);
            $this->dbHandle->where("status",'live');
            $resultSet = $this->dbHandle->get()->result_array();
            if(count($resultSet)>0){
                $result[$content_id]['examContentDetails']['oldContentURL'] = $resultSet[0]['oldContentURL'];
            }

        }
        
        return $result;
    }

    public function getCurrencyExchangeRate($sourceCurrencyId = NULL, $destinationCurrencyId = NULL) {
        $exchangeRate = 0;
        if(!empty($sourceCurrencyId) && !empty($destinationCurrencyId)){
            $this->initiateModel("read");
            $sql 			= "SELECT conversion_factor FROM currency_exchange_rates WHERE source_currency_id = ? AND destination_currency_id = ? AND status = 'live' LIMIT 1";
            $result 		= $this->dbHandle->query($sql, array($sourceCurrencyId, $destinationCurrencyId));
            if($result->num_rows() > 0){
                $data 			= $result->row_array();
                $exchangeRate   = $data['conversion_factor'];
            }
        }
        return $exchangeRate;
    }
    public function getUniversityInfo($universityId){
        //Obtaing Read-Mode on DB
        $this->initiateModel('read');

        $sql = "select un.name university_name,ult.country_id,cta.name country_name ";
        $sql .= "from university un inner join university_location_table ult on(un.university_id=ult.university_id) ";
        $sql .= "inner join ".ENT_SA_COUNTRY_TABLE_NAME." cta on(ult.country_id=cta.countryId) ";
        $sql .= "where un.university_id=? and un.status = '".ENT_SA_PRE_LIVE_STATUS."' LIMIT 1";

        $resultSet = $this->dbHandle->query($sql,array($universityId))->result_array();
        return $resultSet[0];
    }

    /**
     * Purpose : Method to get Content Listing
     * Params  :	none
     * Author  : Vinay
     */
    function getContentTableData($searchType,$displayDataStatus, $paginatorObj, $searchContentName)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $queryArray = array();
        $LimitOffset 	= $paginatorObj->getLimitOffset();
        $LimitRowCount 	= $paginatorObj->getLimitRowCount();

        // determine the status of the data to be fetched
        $status = array("draft","live");

        if($displayDataStatus == 'draft')
            $status = array("draft");
        else if($displayDataStatus == 'published')
            $status = array("live");

        if(empty($searchType) || $searchType == 'ALL')
        {
            $searchType = array('article','guide','applyContent','examContent');
        }elseif(strtoupper($searchType) == "ARTICLE"){
            $searchType = array('article');
        }elseif(strtoupper($searchType) == "GUIDE"){
            $searchType = array('guide');
        }
        elseif(strtoupper($searchType) == "APPLY CONTENT"){
            $searchType = array('applyContent');
        }
        elseif(strtoupper($searchType) == "EXAM CONTENT"){
            $searchType = array('examContent');
        }

        $queryArray[] = $searchType;
        $queryArray[] = $status;
        $queryArray[] = $searchType;
        $queryArray[] = $status;
        // prepare the where clause
        $whereClause = "AND sac.`type` IN  (?)
		        AND sac.status in (?)
		        AND sac.`id` = (select max(sac1.`id`) from sa_content sac1 where sac1.`content_id` = sac.`content_id` AND sac1.`type` IN (?) AND sac1.status in (?))";

        // prepare the like clause
        $likeClause = "";
        if(!empty($searchContentName))
        {
            $likeClause = "AND sac.title LIKE ?";
            $queryArray[] = '%'.$searchContentName.'%';
        }

        // select query for MIS
        $query = "SELECT SQL_CALC_FOUND_ROWS
		    sac.`id`,
		    sac.`content_id` as contentId,
		    sac.title as contentName,
		    sac.comment_count as commentCount,
		    sac.view_count as viewCount,
		    sac.type as ContentType,
		    alemt2.exam as ExamType,
		    sac.apply_content_type_id as appContId,
		    sac.status as status,
		    GROUP_CONCAT(distinct ct.name,'') as countryNames,
			GROUP_CONCAT(distinct alemt.exam,'') as examNames,
		    sac.updated_on as submitDate,
			GROUP_CONCAT(distinct saccoursem.parent_category_id,'') as parentCatgoryIds,
			GROUP_CONCAT(distinct saclm.attribute_id,'') as ldbCourseIds,
		    count(distinct sacs.id) as noOfSection
		    FROM `sa_content` sac
		    
            LEFT JOIN sa_content_attribute_mapping saccm
		    on(saccm.attribute_mapping='country' and saccm.content_id = sac.content_id AND saccm.status = sac.status)
		    LEFT JOIN ".ENT_SA_COUNTRY_TABLE_NAME." ct
            on(ct.countryId = saccm.attribute_id)
            
		    LEFT JOIN sa_content_sections sacs
            on(sacs.content_id = sac.content_id AND sacs.status = sac.status)
            
		    LEFT JOIN sa_content_attribute_mapping sacem
		    on(sacem.attribute_mapping='exam' and sacem.content_id = sac.content_id AND sacem.status = sac.status)	
		    LEFT JOIN abroadListingsExamsMasterTable alemt
		    on(alemt.examId = sacem.attribute_id and alemt.status = 'live')
		    LEFT JOIN abroadListingsExamsMasterTable alemt2
            on(alemt2.examId = sac.exam_id and alemt2.status = 'live')
            
		    LEFT JOIN sa_content_course_mapping saccoursem
            on(saccoursem.content_id = sac.content_id and saccoursem.status  = sac.status)
            
		    LEFT JOIN sa_content_attribute_mapping saclm
            on(saclm.attribute_mapping = 'ldbcourse' and saclm.content_id = sac.content_id and saclm.status  = sac.status)
            
		    WHERE 1 "
            .$whereClause
            .$likeClause
            ." group by sac.`content_id`
		    ORDER BY sac.updated_on desc
		    LIMIT ?,?";
        // fetch the data
        $queryArray[] = $LimitOffset;
        $queryArray[] = $LimitRowCount;
        $result['data'] = $this->dbHandle->query($query,$queryArray)->result_array();
        for($i=0;$i<count($result['data']);$i++)
        {
            $result['data'][$i]['contentName'] = html_entity_decode(strip_tags($result['data'][$i]['contentName']),ENT_NOQUOTES, 'UTF-8');
        }

        // fetch the count of total rows fetched
        $query = "SELECT FOUND_ROWS() as TotalCount";
        $row = $this->dbHandle->query($query)->row_array();
        $result['totalCount'] = $row['TotalCount'];
        
        $queryArray = array();
        $queryArray[] = $searchType;
        if(!empty($searchContentName)){
            $likeClause = "AND sac.title LIKE ?";
            $queryArray[] = '%'.$searchContentName.'%';
        }
        // query to fetch the count of rows for each status
        $query = "SELECT
		    sum( case when sac.status IN ('live') then 1 else 0 end) as published_count,
		    sum( case when sac.status = 'draft' then 1 else 0 end) as draft_count,
		    count(distinct sac.content_id) as all_count
		    FROM `sa_content` sac WHERE 1
		    AND sac.`type` IN  (?)
		    AND sac.status in ('draft','live')"
            .$likeClause;

        $result['dataCount'] = $this->dbHandle->query($query,$queryArray)->row_array();
        return $result;
    }

    public function updateAbroadCategoryPageDataOnUniversityEdit($city_id, $state_id, $university_id, $transactionActive = false)
    {
        if(!$transactionActive )
        {
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }
        if(empty($state_id))
            $state_id = -1;
        $query = "update abroadCategoryPageData acpd
		      set acpd.state_id = ? ,
		      acpd.city_id = ?
		      where acpd.university_id = ?
		      and acpd.status = '".ENT_SA_PRE_LIVE_STATUS."' ";

        $this->dbHandle->query($query,array($state_id,$city_id,$university_id));

        if(!$transactionActive){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }
    //to fix corrupt institute_location_id among course_location_attribute
    public function fixInstituteLocationIds()
    {
        $this->initiateModel("write");
        $this->dbHandle->trans_start();
        /*############################## query 1 : to get institute ids of those course that need to be fixed #######################################*/
        $query1 = "select distinct
			group_concat(distinct cd.institute_id) as list_of_institutes
		    from
			listings_main lm
			    inner join
			course_details cd ON (cd.course_id = lm.listing_type_id
			    and cd.status = 'staging')
			    inner join
			course_location_attribute cla ON (lm.listing_type_id = cla.course_id
			    and cla.status = 'staging')
			    left join
			institute_location_table ilt ON (ilt.institute_location_id = cla.institute_location_id
			    and ilt.status = 'staging')
		    where
			listing_type = 'course'
			    and lm.status = 'staging'
			    and ilt.institute_location_id is null";
        echo "</br> query 1 : to get institute ids of those course that need to be fixed:: ".$query1;
        $result1 = $this->dbHandle->query($query1)->result_array();
        _p($result1[0]['list_of_institutes'] );

        $query2 = "select 
			    institute_id,
			    group_concat(institute_location_id) as all_location_ids,
			    min(institute_location_id) as true_location_id,
			    max(institute_location_id) as current_location_id
			    
			from
			    institute_location_table
			where
			Institute_Id in (".$result1[0]['list_of_institutes'].")/*result of query1*/
		    group by Institute_Id";
        echo "</br> query 2 : to get current institute localtion ids & real location ids of those institutes:: ".$query2;
        $result2 = $this->dbHandle->query($query2)->result_array();
        _p($result2);
        foreach($result2 as $instituteLocationData)
        {
            // first update course location attribute
            $updateQuery1 = "update course_location_attribute
				 set institute_location_id =".$instituteLocationData['true_location_id']." 
				 where institute_location_id in (".$instituteLocationData['all_location_ids'].")";
            echo "</br> update query 1 : first update course location attribute :: ".$updateQuery1;
            $this->dbHandle->query($updateQuery1);
            // now update institute_location_table
            $updateQuery2 = "update institute_location_table
				 set institute_location_id = ".$instituteLocationData['true_location_id']." 
				 where  institute_id = ".$instituteLocationData['institute_id'];
            echo "</br> update query 2 : now update institute_location_table :: ".$updateQuery2;
            $this->dbHandle->query($updateQuery2);

        }
    }

    public function DeleteCacheAfterPosting($type,$listingIds){
        $this->dataCollectorForLogging['calledVia'] = "deleteCacheAfterPosting";
        $this->updateCacheAfterPosting($type,$listingIds);
    }

    /**
     * @param $type : Type of listing as course,institute,university
     * @param $listingIds : array Of listing Ids
     * Purpose Refresh Cache while posting listing
     * Author Vinay Airan
     */

    public function updateCacheAfterPosting($type,$listingIds)
    {
        $this->dataCollectorForLogging['listingTypeUpgraded'] = $type;
        $this->dataCollectorForLogging['courseIdsSentForCaching'] = $listingIds;
        if(count($listingIds) == 0)
        {
            return false;
        }
        $listingIds = array_filter($listingIds,'is_numeric');
        foreach($listingIds as $listingId) {
            if($listingId >0){
                $this->deleteCacheIfListingDeleted($type, $listingId);
            }
        }
        $this->load->builder('ListingBuilder','listing');
        $listingBuilder 			= new ListingBuilder;

        $this->dataCollectorForLogging['updatedObjInCache'] = array();
        global $forceListingWriteHandle; // used in ListingModelAbstract to acquire a write handle
        $forceListingWriteHandle = true;
        if($type == "course")
        {
            if(count($listingIds)>0 && $listingIds[0]>0)
            {
                $this->abroadCourseRepository 	= $listingBuilder->getAbroadCourseRepository();
                $this->abroadCourseRepository->disableCaching();
                $objs =$this->abroadCourseRepository->findMultiple($listingIds);
                $this->dataCollectorForLogging['updatedObjInCache'][] = $objs;
            } // Refresh Cache For all the course ids
        }
        else if($type == "institute")
        {
            $this->abroadInstituteRepository 	= $listingBuilder->getAbroadInstituteRepository();
            $this->abroadInstituteRepository->disableCaching();
            $this->abroadInstituteRepository->findMultiple($listingIds);   // Refresh Cache For Institute/Department ids
            $courseIdsArray = $this->getAllLiveCourseIdsForDepartmentIds($listingIds); // Fetch Course Ids Of Department
            if(count($courseIdsArray) > 0) {
                $this->updateCacheAfterPosting('course',$courseIdsArray);  // Refresh Cache For All the Course Ids
            }
        }
        else if($type == "university")
        {
            $this->abroadUniversityRepository 	= $listingBuilder->getUniversityRepository();
            $this->abroadUniversityRepository->disableCaching();
            $this->abroadUniversityRepository->findMultiple($listingIds);   // Refresh Cache For University ids
            $departmentResultSet = array();  // For fetching All Department ids of Arrays of University ids
            foreach ($listingIds as $listingId) {
                $departmentResultSet[] = $this->getDepartmentsForUniversity($listingId); // Loop through to fetch deparment ids of each University
            }
            $departmentIds = array();
            foreach ($departmentResultSet as $departmentResult) {
                foreach ($departmentResult as $key => $departmentData)     // Remove Key association and extra data
                {
                    $departmentIds [] = $departmentData['institute_id'];
                }
            }
            if(count($departmentIds) > 0)
            {
                $this->updateCacheAfterPosting('institute', $departmentIds);  // Refresh Cache for all the departments in array
            }

        }
    }

    /*
	 * function to update ranking cache after a ranking page has been edited
	 */
    private function updateRankingPageCache($rankingPageId = 0)
    {
        if($rankingPageId == 0)
        {
            return false;
        }
        // load ranking builder
        $this->load->builder('RankingPageBuilder', 'abroadRanking');
        $rankingPageBuilder = new RankingPageBuilder;
        // common ranking library
        $rankingLib 	= $rankingPageBuilder->getRankingLib();
        // ranking page repository
        $rankingPageRepository = $rankingPageBuilder->getRankingPageRepository($rankingLib );
        // disable cache
        $rankingPageRepository->disableCaching();
        // find again so that it gets added to cache
        $r = $rankingPageRepository->find(array($rankingPageId));
        return true;
    }
    function getAllLiveCourseIdsForDepartmentIds($departmentIds)
    {
        if(!(is_array($departmentIds))){
            $departmentIds = explode(',', $departmentIds);
        }
        if(count($departmentIds) == 0){
            return array();
        }
        $this->initiateModel("read");
        $sql = "SELECT  COALESCE(GROUP_CONCAT(course_id),0) as course_ids
				FROM course_details
				WHERE institute_id IN (?)
				AND STATUS = '".ENT_SA_PRE_LIVE_STATUS."'";
        $rs = $this->dbHandle->query($sql,array($departmentIds))->row_array();

        return empty($rs['course_ids']) ? array() : explode(',',$rs['course_ids']);

    }

    private function updateUrl($contentId, $contentType, $contentTitle) {

        $this->initiateModel("write");
        $arr = array();
        $title = seo_url($contentTitle,"-",30);
        $title = seo_url_lowercase($title,"-");
        if($contentType=="guide"){
            $url="/".$title."-guidepage-".$contentId;
        }else{
            $url="/".$title."-articlepage-".$contentId;
        }
        $data['content_url'] = $url;

        $this->dbHandle->where("content_id",$contentId);
        $this->dbHandle->update('sa_content',$data);

    }

    public function getListingDetails($listingId,$listingType){
        $resultArray = array();
        if(empty($listingId)) {
            return $resultArray();
        }
        //Get Listing type and username
        $sql = "select lm.listing_type_id,lm.listing_type,lm.username from listings_main lm";
        if($listingType == 'institute'){
            $sql .= " where lm.status='live' and listing_type='institute' and lm.listing_type_id = ?";
        }elseif($listingType == 'university'){
            $sql .= " where lm.status='".ENT_SA_PRE_LIVE_STATUS."' and listing_type='university' and lm.listing_type_id = ?";
        }else{
            return $resultArray;
        }

        // get the read DB handle
        $this->initiateModel("read");

        $resultSet = $this->dbHandle->query($sql,array($listingId))->result_array();
        if(empty($resultSet)){
            return array();
        }
        foreach($resultSet as $row){
            $resultArray[$row['listing_type_id']] = array();
            $resultArray[$row['listing_type_id']]['listing_type'] = $row['listing_type'];
            $resultArray[$row['listing_type_id']]['username'] = $row['username'];
        }

        //Get Country ID and tier for University
        $sql = "select cta.countryId,cta.tier from ".ENT_SA_COUNTRY_TABLE_NAME." cta";
        if($listingType == 'institute'){
            $sql .= ",institute_location_table ilt";
            $sql .= " where ilt.institute_id=? and ilt.country_id=cta.countryId and ilt.status ='live' ";
        }elseif($listingType == 'university'){
            $sql .= ",university_location_table ult";
            $sql .= " where ult.university_id=? and ult.country_id=cta.countryId and ult.status ='".ENT_SA_PRE_LIVE_STATUS."' ";
        }else{
            return $resultArray;
        }

        $resultSet = $this->dbHandle->query($sql,array($listingId))->result_array();
        if(empty($resultSet)){
            return $resultArray;
        }
        foreach($resultSet as $row){
            $resultArray[$listingId]['countryId'] = $row['countryId'];
            $resultArray[$listingId]['country_tier'] = $row['tier'];
        }


        if($listingType =='university'){
            // Get Categories,Subcategories and tier for Departments of University
            //Input  : universityId
            //Output : subCategoryId, institute_id, categoryId, cateogryTier
            $sql = "select group_concat(institute_id) from institute_university_mapping where status = 'live' and university_id = ?";
            $institutes = reset(reset($this->dbHandle->query($sql,array($listingId))->result_array()));
            if($institutes == 'NULL'){
                return $resultArray;
            }
            //40200,40214
            $sql = "select lct.category_id as subCategoryId, cd.institute_id, cbt.parentId as categoryId, cbt.tier as categoryTier
			from listing_category_table lct,course_details cd,categoryBoardTable cbt
			where cd.status = 'live' and cd.institute_id in ($institutes) and lct.status ='live' and lct.listing_type='course'
			and lct.listing_type_id=cd.course_id  and cbt.boardId=lct.category_id and cbt.flag='studyabroad'
			group by subCategoryId, institute_id, categoryId, CategoryTier";
        }else{
            return $resultArray;
        }

        $resultSet = $this->dbHandle->query($sql)->result_array();
        if(empty($resultSet)){
            return $resultArray;
        }
        $category = "";
        $resultArray[$listingId]['institutes'] = array();
        foreach($resultSet as $row){
            $resultArray[$listingId]['institutes'][$row['institute_id']]['categoryId'] .= ",".$row['categoryId'];
            $resultArray[$listingId]['institutes'][$row['institute_id']]['subCategoryId'] .= ",".$row['subCategoryId'];
            $resultArray[$listingId]['institutes'][$row['institute_id']]['categoryTier'] .= ",".$row['categoryTier'];
        }
        //Adding functionality to check if this listing already exists in the DB : Send all existing combinations
        if($listingType =='university'){
            $sql = "SELECT GROUP_CONCAT( CONCAT( categoryid,  ':', course_level ) ) 
		    FROM tlistingsubscription
		    WHERE listing_type =  'university'
		    AND listing_type_id =  ?
		    AND STATUS =  'live'";
            $resultArray['existingStickies'] = reset(reset($this->dbHandle->query($sql,array($listingId))->result_array()));
            if(empty($resultArray['existingStickies'])){
                $resultArray['existingStickies'] = '';
            }
        }
        else{
            return $resultArray;
        }

        return $resultArray;
    }

    /**
     * @param $type : Type of listing as course,institute,university
     * @param $listingId : listingId
     * Purpose delete Cache while posting listing
     * Author Vinay Airan
     */
    private function deleteCacheIfListingDeleted($type,$listingId)
    {
        if(empty($listingId))
        {
            return;
        }
        $this->dataCollectorForLogging['listingToBeDeletedFromCache'] = $listingId;

        $this->load->builder('ListingBuilder','listing');
        $listingBuilder 			= new ListingBuilder;
        $this->cache = $listingBuilder->getListingCache();
        if($type == "course")
        {
            $this->cache->deleteCourse($listingId);
        }
        else if($type == "institute")
        {
            $this->cache->deleteInstitute($listingId);
            $courseIdsArray = $this->getAllLiveCourseIdsForDepartmentIds(array($listingId)); // Fetch Course Ids Of Department
            if(count($courseIdsArray) > 0) {
                foreach($courseIdsArray as $courseId) {
                    $this->deleteCacheIfListingDeleted('course',$courseId);
                }
            }
        }
        else if($type == "university")
        {

            $this->cache->deleteUniversity($listingId);
            $departmentResult = $this->getDepartmentsForUniversity($listingId);

            foreach ($departmentResult as $key => $departmentData) //fetch and delete cache for all the department of University
            {
                if($departmentData['institute_id'] > 0)
                {
                    $this->deleteCacheIfListingDeleted('institute',$departmentData['institute_id']);
                }
            }
        }elseif($type == 'snapshotcourse'){
            $this->cache = $listingBuilder->getSnapshotCourseCache();
            $this->cache->deleteSnapshotCourse($listingId);
        }
    }
    /*
	 * to get a course's client data from listings_main
	 */
    public function getCourseWithClientData($courseId = 0)
    {
        $courseId = (integer)$courseId;
        if($courseId == 0)
        {
            return -1;
        }

        $this->initiateModel("read");

        $sql = "select 
			ilt.country_id as country_id,
			lm.listing_type_id as course_id,
			lm.listing_title as course_name,
			lm.username as client_id,
			lm.expiry_date as expiry_date,
			lm.subscriptionId as subscription_id,
			lm.pack_type as pack_type
		    from
			listings_main lm
			    inner join
			course_location_attribute cla ON (lm.listing_type_id = cla.course_id
			    and cla.status = 'live')
			    inner join
			institute_location_table ilt ON (ilt.institute_location_id = cla.institute_location_id
			    and ilt.status = 'live')
		    where
			lm.listing_type = 'course'
			    and lm.listing_type_id = ?
			    and ilt.country_id != 2
			    and lm.status = 'live';
		    ";

        $result = $this->dbHandle->query($sql,array($courseId))->result_array();
        return $result;
    }
    /*
	 * to add paid clients to a course,its dept, university
	 * params: subscriptionClient,data
	 * This function is extended for Downgrading Expired National Courses
	 */
    public function addPaidClientToCourse($subscriptionClient, $data, $courseCountryFlag = 'abroad')
    {
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        //get subscription data for client
        $this->load->library('sums_product_client');
        $objSumsProduct =  new Sums_Product_client();
        $SubscriptionDetails = $objSumsProduct->getAllPseudoSubscriptionsForUser(1,array('userId'=>$data['client_id']));

        /****** consume a unit of subscription ******/
        // first pseudo....
        $subscriptionClient->consumePseudoSubscription(1,$data['subscription'],'-1',$data['client_id'],$data['editedBy'],'-1',$data['course_id'],'course','-1','-1');
        //....then real
        $subscriptionClient->consumeSubscription(1,$data['subscription'],'-1',$data['client_id'],$data['editedBy'],'-1',$data['course_id'],'course','-1','-1');

        //first get the institutes, university (and all other courses under it) of the course being processed
        if($courseCountryFlag == 'abroad'){
            $sql = "select 
				ium.university_id, group_concat(distinct ium2.institute_id) as institute_ids,group_concat(distinct cd2.course_id) as course_ids
			    from
				course_details cd
				    inner join
				institute_university_mapping ium ON (ium.institute_id = cd.institute_id
				    and ium.status = cd.status)
				    inner join
				institute_university_mapping ium2 ON (ium.university_id = ium2.university_id
				    and ium2.status in('".ENT_SA_PRE_LIVE_STATUS."','draft'))
			    left join course_details cd2
			    on (cd2.institute_id = ium2.institute_id and cd2.status in('".ENT_SA_PRE_LIVE_STATUS."','draft'))
			    where
				cd.course_id = ?
				    and cd.status in ('".ENT_SA_PRE_LIVE_STATUS."','draft' )
				    group by ium.university_id ";
            $result = $this->dbHandle->query($sql,array($data['course_id']))->result_array();
            // these will be updated later with new client id in listings main
            $instituteAndUniversityId = $result[0];
        }
        /* but first make new entries for course (live (and draft if available)) with new values in listings_main
	     * for this first get last entries from table for that course
	     */
        $sql = "select * from listings_main where listing_type = 'course' and listing_type_id = ? and status in ('draft','".ENT_SA_PRE_LIVE_STATUS."')";
        $result = $this->dbHandle->query($sql,array($data['course_id']))->result_array();
        $this->dataCollectorForLogging['old_listings_main'] = $result;
        foreach($result as $row)
        {
            $insertData = array();
            foreach($row as $k=>$rowElement )
            {
                switch($k){
                    case 'listing_id': //this will generate itself, however we need to keep this to make this history later
                        $listingIdForHistory = $rowElement;
                        break;
                    case 'approve_date':
                        $insertData[$k]=date('Y-m-d H:i:s');
                        break;
                    case 'last_modify_date':
                        if($courseCountryFlag == 'national'){
                            $insertData[$k]=date('Y-m-d H:i:s'); //this has to be implemented only for national courses
                        }else{
                            $insertData[$k]=$rowElement; // for abroad courses this value will remain same
                        }
                        break;
                    case 'expiry_date':
                        // this will come from new subscription
                        $insertData[$k]=$SubscriptionDetails[$data['subscription']]['SubscriptionEndDate'];
                        break;
                    case 'username':// new client assigned to course
                        $insertData[$k]=$data['client_id'];
                        break;
                    case 'pack_type':// this will come from new subscription
                        $insertData[$k]=$SubscriptionDetails[$data['subscription']]['BaseProductId'];
                        break;
                    case 'subscriptionId':
                        $insertData[$k]=$data['subscription'];
                        break;
                    default:	//default case is to save previously saved data as it is
                        $insertData[$k]=$rowElement;
                        break;
                }
            }
            // update last entries and ...
            $updateSql = "update listings_main set status = 'history' where listing_id = ?";
            $this->dbHandle->query($updateSql,array($listingIdForHistory));

            //...save the rows
            $this->dbHandle->insert('listings_main', $insertData);
            $this->dataCollectorForLogging['new_listings_main'] = $insertData;
        } //course's entry changes in listings_main end

        /*update institute & university with new client id in listings main
	     * This section of code will run in case of Abroad Courses Only
	    */
        if($courseCountryFlag == 'abroad'){
            foreach($instituteAndUniversityId as $k=>$val){
                if(!(is_array($val))){
                    $val = explode(',', $val);
                }
                if(count($val)==0){
                    $val = array(0);
                }
                if($k == 'institute_ids')
                {
                    $listing_type = 'institute';
                    $where1 = "( listing_type = 'institute' and listing_type_id in ( ?) )";
                    $instituteParam = $val;
                }
                else if($k == 'course_ids')
                {
                    $listing_type = 'course';
                    $where2 = "( listing_type = 'course' and listing_type_id in (?) )";
                    $courseParam = $val;
                }
                else
                {
                    $listing_type = 'university';
                    $where3 = "( listing_type = 'university' and listing_type_id in ( ?) )";
                    $universityParam = $val;
                }
            }
            $updateSql = "update listings_main set username = ? where ".
                "status in ('draft','".ENT_SA_PRE_LIVE_STATUS."') ".
                "and (".$where1." OR ".$where2." OR ".$where3." )";
            //echo $updateSql;
            $this->dbHandle->query($updateSql,array($data['client_id'],$instituteParam,$courseParam,$universityParam));
            $this->dataCollectorForLogging['updateSQLforUsername'] = $this->dbHandle->last_query();
        }

        /******* update abroadCategoryPageData for Abroad Courses and CategoryPageData for National Courses ********/
        if($courseCountryFlag == 'abroad'){
            $this->callToUpdatePacktypeInAbroadCategoryPageData($data['course_id'],$SubscriptionDetails[$data['subscription']]['BaseProductId'], true, $courseCountryFlag);
        }
        //for reindexing solr . Only done for abroad courses.
        if($courseCountryFlag=='abroad'){
            $this->checkAndAddCourseToIndexLog('course',array($data['course_id']),'index',true);
        }


        /******* user tracking *******/
        $commentForTracking = "Course Listing upgraded with pack type ".$SubscriptionDetails[$data['subscription']]['BaseProductId']." for client : ".$data['client_id']." by user ".$data['editedBy'];
        $this->addComments($this->dbHandle, $data['editedBy'], $data['course_id'], 'listingUpgrade', $commentForTracking);

        /********listingUpgradeHistoricalDetails ***/
        $this->_subscriptionHistoricalDetails($SubscriptionDetails,$data,$courseCountryFlag);

        $this->dbHandle->trans_complete();
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        // refresh cache & reindex solr data for this course
        if($data['course_id'] > 0)
        {
            // update search and cache
            if($courseCountryFlag == 'abroad'){
                //modules::run('search/Indexer/index', $data['course_id'],"abroadcourse","false");
                $this->dataCollectorForLogging['calledVia'] = "addPaidClientToCourse";
                $this->dataCollectorForLogging['courseIdToBeSentForCacheUpdate'] = $data['course_id'];
                $this->updateCacheAfterPosting('course', array($data['course_id']));
                try{
                    $lib = $this->load->library('common/studyAbroadCommonLib');
                    $lib->selfMailer('Data analysis: packtype upgrade',json_encode($this->dataCollectorForLogging,JSON_PRETTY_PRINT), "satech@shiksha.com","jahangeer.alam@shiksha.com");
                }catch(Exception $e){};
	            //_p(json_encode($this->dataCollectorForLogging,JSON_PRETTY_PRINT));
                //modules::run('search/Indexer/addToQueue', $data['course_id'],"abroadcourse","index","false");
                // add to abroadindexlog so that it gets re-indexed for new abroad search
                $this->checkAndAddCourseToIndexLog("course",$data['course_id'],"index");
            }else{
                $this->updateNationalCache('course',array($data['course_id']));
                $this->NationalIndexingLibraryObj = $this->load->library('indexer/NationalIndexingLibrary');
                $this->NationalIndexingLibraryObj->addToNationalIndexQueue($data['course_id'],'course','index',array('courseBasicSectionData')); //adding solr log table to reindex
                // modules::run('search/Indexer/addToQueue', $data['course_id'],"course","index","false");
            }
        }
    }

    public function updateNationalCache($type,$listingIds){
        if(empty($listingIds)){
            return;
        }
        $cache = $this->load->library('nationalCourse/cache/NationalCourseCache');
        $cache->removeCoursesCache($listingIds);
    }

    public function _subscriptionHistoricalDetails($SubscriptionDetails,$data,$courseCountryFlag = 'abroad')
    {
        $this->initiateModel('write');
        if($data['editedBy']==0 && $courseCountryFlag == 'abroad'){ //canot be zero for national
            $data['editedBy'] = 29; //29 is the userID for yaseen@naukri.com
        }
        //update old record with any subscription or packtype as end date today
        $udata = array(
            'endedOnDate'		=>date('Y-m-d'),
            'endedOnTime'		=>date('H:i:s'),
            'updatedBy'			=>$data['editedBy']
        );
        $this->dbHandle->where('courseId', $data['course_id']);
        $this->dbHandle->where('endedOnDate', '0000-00-00');
        $this->dbHandle->where('endedOnTime', '00:00:00');
        $this->dbHandle->update('courseSubscriptionHistoricalDetails', $udata);

        $upgradeHistoryData = array(
            'courseId'				=>$data['course_id'],
            'packType'				=>$SubscriptionDetails[$data['subscription']]['BaseProductId'],
            'subscriptionId'		=>$SubscriptionDetails[$data['subscription']]['SubscriptionId'],
            'clientId'				=>$data['client_id'],
            'subscriptionStartDate' =>$SubscriptionDetails[$data['subscription']]['SubscriptionStartDate'],
            'subscriptionExpiryDate'=>$SubscriptionDetails[$data['subscription']]['SubscriptionEndDate'],
            'addedOnDate'			=>date('Y-m-d'),
            'addedOnTime'			=>date('H:i:s'),
            'addedBy'				=>$data['editedBy'],
            'source'				=>$courseCountryFlag
        );
        if(isset($data['addedFrom'])){
            $upgradeHistoryData['addedFrom'] = $data['addedFrom'];
        }

        $this->dbHandle->insert('courseSubscriptionHistoricalDetails', $upgradeHistoryData);

        return ($this->dbHandle->affected_rows() != 1) ? false : true;

    }

    public function callToUpdatePacktypeInAbroadCategoryPageData($courseId,$packtype, $transactionActive, $courseCountryFlag = 'abroad')
    {
        $this->initiateModel('write');
        if(!$transactionActive )
        {
            $this->dbHandle->trans_start();
        }
        if($courseCountryFlag == 'national'){
            $tableToUpdate = 'categoryPageData';
        }else{
            $tableToUpdate = 'abroadCategoryPageData';
        }
        $updateSql = "update ".$tableToUpdate." set pack_type = ?
			  where course_id = ?
			  and status = 'live'";
        $this->dbHandle->query($updateSql,array($packtype,$courseId));
        if(!$transactionActive ){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }
    /**
     * Purpose : Method to get the data for Paid Course table data
     * Params  : paginator obj, course id
     * Author  : SRB
     */
    function getPaidCoursesWithClient($paginatorObj, $courseId = 0)
    {
        // get the write DB handle
        $this->initiateModel("read");

        $LimitOffset 	= $paginatorObj->getLimitOffset();
        $LimitRowCount 	= $paginatorObj->getLimitRowCount();
        $paramArr = array();
        // prepare the where clause
        $whereClause = "and lm.listing_type = 'course'
			    and tu.userid = lm.username 
	 	        and cpd.course_id = lm.listing_type_id 
	 	        and cpd.status = '".ENT_SA_PRE_LIVE_STATUS."' 
			    and lm.status = '".ENT_SA_PRE_LIVE_STATUS."' 
			    and lm.subscriptionId != 0
			    and lm.pack_type in (".GOLD_SL_LISTINGS_BASE_PRODUCT_ID.",".BRONZE_LISTINGS_BASE_PRODUCT_ID.") ";
        if($courseId >0){
            $whereClause .= "and lm.listing_type_id = ?";
            $paramArr[] = $courseId;
        }

        // select query
        $query = "select SQL_CALC_FOUND_ROWS 
			    distinct
			    lm.listing_title as course_name,
			    lm.listing_type_id as course_id,
			    tu.displayName as client_name,
			    lm.username as client_id,
			    LPAD(lm.subscriptionId,11,0) as subscription_id,
			    lm.expiry_date as expiry_date,
			    lm.last_modify_date as date,
			    lm.pack_type as pack_type,
			    lm.approve_date as subscription_consume_date,
			    lm.status
			from
			    listings_main lm, tuser tu , abroadCategoryPageData cpd 
			where 1 "
            .$whereClause
            ." order by lm.approve_date desc
			limit ?,?";
        $paramArr[] = $LimitOffset;
        $paramArr[] = $LimitRowCount;
        // fetch the data
        $result['data'] = $this->dbHandle->query($query,$paramArr)->result_array();

        // fetch the count of total rows fetched
        $query = "SELECT FOUND_ROWS() as TotalCount";
        $row = $this->dbHandle->query($query)->row_array();
        $result['totalCount'] = $row['TotalCount'];
        $result['dataCount'] = $row['TotalCount'];

        return $result;
    }
    private function setCharSetToLatin1()
    {
        //for special characters
        $charSql = "SET CHARACTER SET latin1";
        $this->dbHandle->query($charSql);
    }
    /*
	 * to get data from listings_main like username , viewCount, etc...
	 */
    public function getListingMainData($listingType,$listingTypeId)
    {
        $this->initiateModel('read');
        $sql = "select * from listings_main where listing_type= ? and listing_type_id = ? and status in ('".ENT_SA_PRE_LIVE_STATUS."','draft') order by listing_id desc limit 1";
        $result = $this->dbHandle->query($sql,array($listingType,$listingTypeId))->result_array();
        return $result;
    }

    public function resolveInstituteLocationIdConflictForAbroad($instituteId) {

        if(empty($instituteId)) {
            echo "Put valid Institute Id";
            return;
        }

        $this->initiateModel('write');
        $this->dbHandle->trans_start();


        $sql = "SELECT  `institute_id` FROM `institute` WHERE  `institute_id` = ?  and `institute_type` IN ('Department','Department_Virtual') and status = '".ENT_SA_PRE_LIVE_STATUS."'";
        $result = $this->dbHandle->query($sql,array($instituteId))->result_array();
        if($result[0]['institute_id'])
        {

            $sqlToFetchCourseIds = "SELECT group_concat(distinct course_id) as course_ids FROM course_details cd where  cd.institute_id = ? group by  cd.institute_id";
            $result = $this->dbHandle->query($sqlToFetchCourseIds,array($instituteId))->result_array();
            $courseIdsArray = $result[0]['course_ids'];

            $sqlToFetchOldLocationId = "SELECT institute_location_id FROM `institute_location_table` WHERE `institute_id` = ? AND status='live' ";
            $result = $this->dbHandle->query($sqlToFetchOldLocationId,array($instituteId))->result_array();
            $oldLocationId = $result[0]['institute_location_id'];

            $newLocationId = $this->_getNewAutogeneratedId('instituteLocation');

            $updateInstLocTable = "update `addDepartmentaddDepartmentinstitute_location_table` set institute_location_id = ? where `institute_location_id` = ? and `institute_id` = ? ";
            $this->dbHandle->query($updateInstLocTable,array($newLocationId,$oldLocationId,$instituteId));

            $updateListingContactDetailsForInst = "update `listing_contact_details` set institute_location_id = ? where `listing_type` ='institute' and `listing_type_id` = ? and institute_location_id =? ";
            $this->dbHandle->query($updateListingContactDetailsForInst,array($newLocationId,$instituteId,$oldLocationId));

            if(!empty($courseIdsArray)) {
                $updateListingContactDetailsForCourse = "update `listing_contact_details` set institute_location_id = ? where `listing_type` ='course' and `listing_type_id` IN (".$courseIdsArray.") and institute_location_id  = ? ";
                $this->dbHandle->query($updateListingContactDetailsForCourse,array($newLocationId,$oldLocationId));

                $updateCourseLocationAttrib = "update  `course_location_attribute` set `institute_location_id` = ? where  `course_id` IN (".$courseIdsArray.") and `institute_location_id` =? ";
                $this->dbHandle->query($updateCourseLocationAttrib,array($newLocationId,$oldLocationId));

            }
        }
        else {
            echo "NOT AN ABROAD INSTITUTE";
        }

        $this->dbHandle->trans_complete();
        if($this->dbHandle->trans_status() === FALSE) {
            $returnFlag = false;
            throw new Exception('Transaction Failed');
        } else {
            echo "DONE";
        }

    }
    // to get a country's name
    public function getCountryById($countryId)
    {
        $this->initiateModel('read');
        $abroadCountrySql 	= " SELECT ct.name as country_name " .
            " FROM ".ENT_SA_COUNTRY_TABLE_NAME." ct ".
            " WHERE ct.countryId = ? LIMIT 1";
        $query = $this->dbHandle->query($abroadCountrySql , array($countryId))->result_array();
        return $query;
    }

    public function getCourseLevelsOfUniversity($universityId){
        $this->initiateModel('read');
        $sql = "select group_concat(distinct cd.course_level_1) from institute_university_mapping ium, course_details cd
		    where cd.status = 'live' and ium.status = 'live' and cd.institute_id = ium.institute_id and ium.university_id = ?";
        $result = reset(reset($this->dbHandle->query($sql,array($universityId))->result_array()));
        return  $result;
    }

    public function checkListingExistinGivenState($listingId = 0,$listingType = '',$status = 'live'){
        if($listingId == 0 || $listingType == ''){
            return 0;
        }
        $params = array();
        if($listingType == 'content'){
            $params = array($listingId,$status);
            $sql = "select count(1) cnt from sa_content where content_id=? and status=?";
        }else{
            $params = array($listingId,$listingType,$status);
            $sql = "select count(1) cnt from listings_main where listing_type_id= ? and listing_type= ? and status= ? ";
        }
        $this->initiateModel('read');
        $resultSet = $this->dbHandle->query($sql,$params)->result_array();

        return $resultSet[0]['cnt'];
    }



    public function getUniversitiesOfSnapshotCourses($snapshotCourseIds){
        die;
        if(empty($snapshotCourseIds)){
            return array();
        }
        $this->initiateModel("read");
        $sql = "select distinct(university_id) from snapshot_courses where course_id in (".implode(',',$snapshotCourseIds).") and status='live'";
        $result = $this->dbHandle->query($sql)->result_array();
        $univIdArray = array();
        foreach($result as $univid){
            $univIdArray[] = reset($univid);
        }
        return $univIdArray;
    }

    public function getAllRMSCounsellor()
    {
        $this->db->select('counsellor_id,counsellor_name,counsellor_email,counsellor_mobile,counsellor_bio,counsellor_expertise,counsellor_image');
        $this->db->where('counsellor_manager_id !=', 0);
        $this->db->where('status', 'live');
        $result = $this->db->get('RMS_counsellor')->result_array();
        return $result;
    }

    public function saveRMSUniversityCounsellorMapping($data)
    {
        $count =0;
        $this->load->helper('date');
        $writeHandle = $this->getWriteHandle();
        //error_reporting(-1);
        foreach($data['universityId'] as $universityId){
            if(is_numeric($universityId))
            {
                $prepData = array(
                    'counsellor_id' => $data['counsellorId'] ,
                    'university_id' => $universityId,
                    'created_by'=>  $data['createdBy'],
                    'last_modified_by'=>  $data['modifiedBy'],
                    'created'=>$data['created'],
                    'last_modified'=>date('Y-m-d H:i:s',now()),
                    'status' => 'live'
                );

                if($data['sessionDetail'][$count] =="1"){
                    $prepData['sessionDetails'] = $data['sessionDetail'][$count];
                    $prepData['session_date']   =  date('Y-m-d H:i:s', strtotime(str_replace('/', '-',$data['sessionDate'][$count])));
                    $prepData['universityRepImageUrl'] =  $data['universityRepImageUrl'][$count];
                    $prepData['universityRepName']= $data['universityRepName'][$count];
                    $prepData['universityRepDesignation']=  $data['universityRepDesignation'][$count];
                    $prepData['aboutSession']=  $data['aboutSession'][$count];
                }
                $dataToBeInsertedInMappingTable[]  = $prepData;
                $count++;
            }
        }
        $writeHandle->insert_batch('RMS_counsellor_university_mapping', $dataToBeInsertedInMappingTable);
        //echo $writeHandle->last_query();
        return TRUE;
    }

    public function markHistoryOldUniversityCounsellorMapping($data)
    {
        $this->load->helper('date');
        $udata = array(
            'status' => 'history'
        );
        $this->db->where('id', $data['mappingId']);
        $this->db->where('status', 'live');
        $this->db->update('RMS_counsellor_university_mapping', $udata);
    }

    public function getAllUnivertyMappedToCounsellor($counsellorId)
    {
        /*SELECT  u.listing_title,r.university_id,r.RMSType,r.start_date,r.end_date,r.status
	    FROM RMS_counsellor_university_mapping` r left join `listings_main` u on u.listing_type_id = r.university_id     WHERE
	    r.status='live' and r.counsellor_id=35235325 and u.status='live' and u.listing_type='university'*/

        $this->db->select('u.listing_title as UniName,r.university_id,r.status,r.id');
        $this->db->select('r.session_date,r.created,r.last_modified');
        $this->db->select("DATE_FORMAT( session_date, '%d %M %Y' ) as sDate",  FALSE );
        $this->db->where_in('r.status',array('live','deleted'));
        $this->db->where('r.counsellor_id', $counsellorId);
        $this->db->where('u.status','live');
        $this->db->where('u.listing_type','university');
        $this->db->from('`RMS_counsellor_university_mapping` r ');
        $this->db->join('`listings_main` u', 'u.listing_type_id = r.university_id','left');
        $this->db->order_by('r.last_modified','DESC');
        $result = $this->db->get()->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    public function rmsUniversityMappingDetail($mappingId){

        $this->db->select('u.listing_title as UniName,r.university_id,r.status,r.id,r.counsellor_id,r.created,r.created_by,r.last_modified,r.last_modified_by,concat(t.firstname," ",t.lastname) as displayname');
        $this->db->select('r.sessionDetails,r.universityRepImageUrl,r.universityRepName,r.universityRepDesignation,r.aboutSession');
        $this->db->select("DATE_FORMAT( session_date, '%d/%m/%Y' ) as sDate",  FALSE );
        //$this->db->select("DATE_FORMAT( end_date, '%d/%m/%Y') as eDate",      FALSE );
        $this->db->where('r.status','live');
        $this->db->where('r.id', $mappingId);
        $this->db->where('u.status','live');
        $this->db->where('u.listing_type','university');
        $this->db->from('`RMS_counsellor_university_mapping` r ');
        $this->db->join('`listings_main` u', 'u.listing_type_id = r.university_id','left');
        $this->db->join('`tuser` t', 't.userid = r.last_modified_by','left');
        $result = $this->db->get()->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    /**
     * Purpose : Method to get the data for RMS counsellor
     * Params  : None
     * Author  : Abhay
     */

    public function getRMSCounsellorTableData()
    {
        // get the read DB handle
        $this->initiateModel("read");

        $query = "select rc.counsellor_id as counsellorId , rc.counsellor_name as counsellor_name,rc.counsellor_email as counsellor_email, rc.counsellor_mobile as counsellor_mobile, rc.status as status, rc.created as added_on, rcm.counsellor_name as counsellor_manager, rc.counsellor_bio as counsellor_bio, rc.counsellor_expertise as counsellor_expertise, rc.counsellor_image as counsellor_image from RMS_counsellor rc join RMS_counsellor rcm on rc.counsellor_manager_id = rcm.counsellor_id and rcm.status='live' where rc.status in ('live' , 'deleted') and rc.counsellor_manager_id != 0 order by rc.last_modified desc";

        // fetch the data
        $result['data'] = $this->dbHandle->query($query)->result_array();

        return $result;

    }



    public function getRMSManagersInfo(){
        $this->initiateModel('read');
        $sql = "select counsellor_id as id, counsellor_name as name, counsellor_email as email from RMS_counsellor where is_manager = 1 and status='live'";
        $result = $this->dbHandle->query($sql)->result_array();
        return $result;
    }

    public function getRMSCounsellorInfo($counsellorId){
        if(!empty($counsellorId) && is_numeric($counsellorId)){
            $this->initiateModel('read');
            $sql = "select * from RMS_counsellor where status = 'live' and counsellor_id = ?";
            return reset($this->dbHandle->query($sql,array($counsellorId))->result_array());
        }
    }

    public function getNameOfUser($userId){
        if(!empty($userId) && is_numeric($userId)){
            $this->initiateModel('read');
            $sql = "select displayname from tuser where userid = ?";
            $value = $this->dbHandle->query($sql,array($userId))->result_array();
            return reset(reset($value));
        }
    }

    public function addRMSCounsellor($data){
        $this->initiateModel('write');
        $this->load->helper('date');
        //Check first if email and mobile are unique in the table
        $errors = array();
        $sql = "select counsellor_email email,counsellor_mobile mobile from RMS_counsellor where counsellor_manager_id !=0 and status = 'live'";

        $existingData = $this->dbHandle->query($sql)->result_array();
        foreach($existingData as $checkpoint){
            if(strcasecmp($data['email'],$checkpoint['email']) == 0){
                $errors['Email'] = "This email id is already in use";
            }
            if(strcasecmp($data['mobile'],$checkpoint['mobile']) == 0){
                $errors['Mobile'] = "This mobile number is already in use";
            }
        }
        if(!empty($errors)){
            return $errors;
        }
        if(!empty($data)){
            $dbData = array();
            $dbData['counsellor_id'] = $data['id'];
            $dbData['counsellor_name'] = $data['name'];
            $dbData['counsellor_email'] = $data['email'];
            $dbData['counsellor_mobile'] = $data['mobile'];
            $dbData['counsellor_manager_id'] = $data['managerId'];
            $dbData['counsellor_bio'] = $data['bio'];
            $dbData['counsellor_expertise'] = $data['expertise'];
            $dbData['counsellor_image'] = $data['image'];
            $dbData['seoUrl'] = $data['seoUrl'];
            $dbData['status'] = 'live';
            $dbData['created'] = date('Y-m-d H:i:s',now());
            $dbData['last_modified'] = date('Y-m-d H:i:s',now());
            $dbData['created_by'] = $data['userid'];
            $dbData['last_modified_by'] = $data['userid'];
            $dbData['is_manager'] = $data['isManager'];

            $this->dbHandle->insert("RMS_counsellor",$dbData);
        }
        return true;
    }

    public function updateRMSCounsellor($data){
        //Check if email and mobile are being changed to something already existing among the live records
        $this->initiateModel('read');
        $this->load->helper('date');
        $errors = array();
        $sql = "select counsellor_email email, counsellor_mobile mobile from RMS_counsellor where status = 'live' and counsellor_id != ?";
        $existingData = $this->dbHandle->query($sql,array($data['id']))->result_array();
        foreach($existingData as $checkpoint){
            if(strcasecmp($data['email'],$checkpoint['email']) == 0){
                $errors['Email'] = "This email id is already in use";
            }
            if(strcasecmp($data['mobile'],$checkpoint['mobile']) == 0){
                $errors['Mobile'] = "This mobile number is already in use";
            }
        }
        if(!empty($errors)){
            return $errors;
        }
        if(!empty($data)){
            $udata = array();
            $udata['status'] = 'history';
            $this->dbHandle->where('status','live');
            $this->dbHandle->where('counsellor_id',$data['id']);
            $this->dbHandle->update('RMS_counsellor',$udata);
            //$sql = "update RMS_counsellor set status = 'history' where status = 'live' and counsellor_id = '".$data['id']."'";
            //$this->dbHandle->query($sql);
            $dbData = array();
            $dbData['counsellor_id'] = $data['id'];
            $dbData['counsellor_name'] = $data['name'];
            $dbData['counsellor_email'] = $data['email'];
            $dbData['counsellor_mobile'] = $data['mobile'];
            $dbData['counsellor_manager_id'] = $data['managerId'];
            $dbData['counsellor_bio'] = $data['bio'];
            $dbData['counsellor_expertise'] = $data['expertise'];
            $dbData['counsellor_image'] = $data['image'];
            $dbData['seoUrl'] = $data['seoUrl'];
            $dbData['status'] = 'live';
            $dbData['created'] = $data['created'];
            $dbData['last_modified'] = date('Y-m-d H:i:s',now());
            $dbData['created_by'] = $data['created_by'];
            $dbData['last_modified_by'] = $data['userid'];
            $dbData['is_manager'] = $data['isManager'];

            $this->dbHandle->insert("RMS_counsellor",$dbData);
            //$sql = "insert into RMS_counsellor
            //(counsellor_id, counsellor_name, counsellor_email,counsellor_mobile,counsellor_manager_id, status, created, last_modified, created_by, last_modified_by)
            //values('".$data['id']."','".$data['name']."','".$data['email']."','".$data['mobile']."','".$data['managerId']."','live','".$data['created']."',now(),".$data['created_by'].",".$data['userid'].")
            //";
            //$this->dbHandle->query($sql);
        }
        return true;
    }

    public function checkUniversityIsMapped($universityId,$mappingID)
    {

        $queryArray = array();
        $this->initiateModel('read');
        //$startDate = date('Y-m-d H:i:s', strtotime(str_replace('/', '-',$startDate)));
        //$endDate = date('Y-m-d H:i:s', strtotime(str_replace('/', '-',$endDate)));
        if(!$universityId){
            return array();
        }

        $sql = "SELECT
		    count(*) as total
		FROM
		    `RMS_counsellor_university_mapping`
		WHERE
		    (`university_id` = ?) ";
        //"and ((`start_date` BETWEEN ? AND ?) or (`end_date` BETWEEN ? AND ?))";
        $queryArray[] = $universityId;
        if($mappingID !='')
        {
            $sql.= " and (`id` != ?)";
            $queryArray[] = $mappingID;
        }
        $sql.= " and (`status` = 'live')";
        return $result = $this->dbHandle->query($sql,$queryArray)->result_array();
    }

    /**
     * Purpose : Method to get the data for RMS Universities mapping
     * Params  : None
     * Author  : Abhay
     */

    public function getRMSUniversitiesMappingTableData()
    {
        // get the read DB handle
        $this->initiateModel("read");


        $this->load->builder('ListingBuilder','listing');
        $listingBuilder = new ListingBuilder;
        $this->universityRepository = $listingBuilder->getUniversityRepository();

        $current_date= date('Y-m-d')." 23:59:59";
        $query = "select rcum.id as mappingId,rcum.counsellor_id, counsellor_name, rcum.university_id,rcum.last_modified,rcum.created
		  from RMS_counsellor rc, 
		  RMS_counsellor_university_mapping rcum 
		  where rc.counsellor_id=rcum.counsellor_id and
		  rc.status = 'live' and
		  
		  rcum.status='live' ".
            "order by rcum.counsellor_id,  rcum.last_modified desc";


        $mapping_data= $this->dbHandle->query($query)->result_array();
        $response_count =array();
        $counsellor = array();
        $k=-1;
        $all_univ_ids = array();
        $previous="";

        foreach($mapping_data as $counsellor_data)
        {
            if( $counsellor_data['counsellor_name'] !=  $previous )
            {

                $k++;
                $counsellor[$k]['counsellor_name'] = $counsellor_data['counsellor_name'];
                $counsellor[$k]['counsellor_id'] = $counsellor_data['counsellor_id'];
                $counsellor[$k]['last_modified'] = $counsellor_data['last_modified'];

                $counsellor[$k]['university_id'] = array();
                $counsellor[$k]['start_dates'] = array();
                $counsellor[$k]['mappingId'] = array();
                $counsellor[$k]['end_dates'] = array();
                $counsellor[$k]['no_of_mapping'] =0;
                $previous= $counsellor_data['counsellor_name'];
            }

            $counsellor[$k]['no_of_mapping']++;
            array_push($counsellor[$k]['university_id'] , $counsellor_data['university_id']) ;
            array_push($counsellor[$k]['mappingId'] , $counsellor_data['mappingId']) ;
            array_push($counsellor[$k]['start_dates'] , $counsellor_data['created']) ;
            array_push( $counsellor[$k]['end_dates'] , $current_date) ;

            if(!in_array($counsellor_data['university_id'] , $all_univ_ids))
                array_push($all_univ_ids,$counsellor_data['university_id']);
        }


        $course_ids = $this->universityRepository->getCoursesOfUniversities($all_univ_ids);
        $k=0;

        $result = array();
        foreach($counsellor as $counsellor_info)
        {
            $total_count = 0; $k=0;
            foreach($counsellor_info['university_id'] as $univ_ids)
            {
                if(empty($course_ids[$univ_ids]['courseList']))
                {
                    $course_ids[$univ_ids]['courseList'] = array(0);
                }else{
                    $course_ids[$univ_ids]['courseList'] = explode(',',$course_ids[$univ_ids]['courseList']);
                }

                $query = "select count(id) as response_count
		from tempLMSTable
		where listing_type = 'course' and
		listing_type_id in (?) and
		submit_date between ? and ?";

                $count = $this->dbHandle->query($query,array($course_ids[$univ_ids]['courseList'],$counsellor_info['start_dates'][$k],$counsellor_info['end_dates'][$k]))->result_array();
                $k++;
                $total_count += $count[0]['response_count'];
            }


            $final_data = array();

            $final_data['counsellor_name']=$counsellor_info['counsellor_name'];
            $final_data['counsellor_id']=$counsellor_info['counsellor_id'];
            $final_data['last_modified']=$counsellor_info['last_modified'];
            $final_data['no_of_mapping']=$counsellor_info['no_of_mapping'];
            $final_data['mappingId']    =implode(',',$counsellor_info['mappingId']);
            $final_data['response_count']=$total_count;

            $result[] = $final_data;
        }

        usort($result , function($a, $b)
        {
            if ($a == $b) {
                return 0;
            }
            return ($a['last_modified'] > $b['last_modified']) ? -1 : 1;
        });
        return $result;
    }


    public function getRMSResponseCount($course_ids, $start, $end)
    {
        if(!is_array($course_ids)){
            $course_ids = explode(',', $$course_ids);
        }
        if(count($course_ids)>0 && $start !="" && $end !="")
        {
            $this->initiateModel("read");
            $query = "select count(id) as response_count from tempLMSTable where listing_type = 'course' and listing_type_id in (?) and ( submit_date between ? and ?)";
            $count = $this->dbHandle->query($query,array($course_ids,$start,$end))->result_array();
            return $count[0];
        }
        else {
            $count = array();
            $count['response_count']=0;
            return $count;
        }
    }

    public function getExamWithExamPage()
    {
        $finalResult = array();
        return $finalResult;
        // exam pages are retired
        /*$this->db->select('exam_type');
        $this->db->where('status','live');
        $this->db->where('type', 'examPage');
        $this->db->from('`sa_content`');
        $result = $this->db->get()->result_array();
        foreach ($result as $key => $value)
        {
            $finalResult[] = $value['exam_type'];
        }*/
    }

    public function getPaidUniversityDetails($universityIds,$status){
        $this->initiateModel('read');
        $this->dbHandle->select('group_concat(distinct(actpg.course_id)) as course_ids,un.name,un.university_id');
        $this->dbHandle->from('abroadCategoryPageData actpg');
        $this->dbHandle->join('university un', 'actpg.university_id=un.university_id and actpg.status=un.status','inner');
        $this->dbHandle->where_in('actpg.pack_type',array(GOLD_SL_LISTINGS_BASE_PRODUCT_ID,SILVER_LISTINGS_BASE_PRODUCT_ID,GOLD_ML_LISTINGS_BASE_PRODUCT_ID));
        $this->dbHandle->where(array('actpg.status' => $status,'actpg.university_id' => $universityIds));
        $query_res = $this->dbHandle->get()->result_array();
        if(count($query_res) >= 1)
        {
            return $query_res[0];
        }
        else{
            return false;
        }
    }

    public function fetchContentTitleAndSummary($contentId)
    {
        $this->db->select('title,summary');
        $this->db->where('status','live');
        $this->db->where('content_id', $contentId);
        $this->db->from('`sa_content`');
        $result = $this->db->get()->result_array();
        //echo $this->db->last_query();
        return $result[0];
    }

    public function fetchContentSections($contentId)
    {
        $this->db->select('heading,details');
        $this->db->where('status','live');
        $this->db->where('content_id', $contentId);
        $this->db->from('`sa_content_sections`');
        $result = $this->db->get()->result_array();
        return $result;
    }

    public function getRMSResponseDetails($course_ids, $start, $end)
    {
        if(!is_array($course_ids)){
            $course_ids = explode(',', $$course_ids);
        }
        if(count($course_ids)>0 && $start !="" && $end !="")
        {
            $this->initiateModel("read");
            $query = "select distinct(tls.id),tls.userId,tls.displayName,tls.contact_cell,tls.email,tls.listing_type_id,
	    date_format(tls.submit_date,'%d-%b-%Y') as submit_date,
	    date_format(tls.submit_date,'%h:%i:%s: %p') as submit_time,
	    tu.passport,tu.city,
	    ct.city_name,
	    tf.isNDNC,
	    tls.action as source
	    from tempLMSTable tls
	    left join tuser tu on tls.userId = tu.userid
	    left join countryCityTable ct on tu.city = ct.city_id
	    left join tuserflag tf on tls.userId = tf.userId
	    where tls.listing_type = 'course' and 
	    tls.listing_type_id in (?) and ( tls.submit_date between ? and ?)";


            $result = $this->dbHandle->query($query,array($course_ids,$start,$end))->result_array();
            return $result;
        }
        else {
            $result = array();
            return $result;
        }
    }

    public function getUsersExamTaken($userIDs){
        if(!is_array($userIDs))
        {
            $userIDs = array($userIDs);
        }
        if(!empty($userIDs)){
            $this->db->select('UserId,Name,Marks,MarksType');
            $this->db->where('status','live');
            $this->db->where('Level','Competitive exam');
            $this->db->where_in('UserId',$userIDs,FALSE);
            $this->db->from('`tUserEducation`');
            $result = $this->db->get()->result_array();
            $finalArr = array();
            foreach($result as $res)
            {
                $finalArr[$res['UserId']][] = $res;
            }
            return $finalArr;
        }
    }

    public function getUsersLocationPref($userIDs){
        if(!is_array($userIDs))
        {
            $userIDs = array($userIDs);
        }
        if(!empty($userIDs)){
            $this->db->select('tUserLocationPref.UserId,countryTable.CountryId,countryTable.name');
            $this->db->where('status','live');
            $this->db->where_in('UserId',$userIDs,FALSE);
            $this->db->from('`tUserLocationPref`');
            $this->db->join('countryTable','tUserLocationPref.CountryId =countryTable.countryId','left');
            $result = $this->db->get()->result_array();
            $finalArr = array();
            foreach($result as $res)
            {
                $finalArr[$res['UserId']][] = $res;
            }
            return $finalArr;
        }
    }


    public function getUsersPrefForTime($userIDs){
        if(!is_array($userIDs))
        {
            $userIDs = array($userIDs);
        }
        if(!empty($userIDs)){
            $this->db->select('tup.UserId,date_format(tup.TimeOfStart,"%d-%m-%Y") as TimeOfStart');
            $this->db->where('tup.status','live');
            $this->db->where_in('tup.UserId',$userIDs,FALSE);
            $this->db->from('`tUserPref` tup');
            $result = $this->db->get()->result_array();
            //echo $this->db->last_query();
            $finalArr = array();
            foreach($result as $res)
            {
                $finalArr[$res['UserId']][] = $res;
            }
            return $finalArr;
        }
    }

    public function deleteCacheForListings($listingIds=array(),$listingType='') {
        if(count($listingIds) == 0 || !in_array($listingType, array('course','snapshotcourse','institute','university'))){
            return -1;
        }

        $this->load->builder('ListingBuilder','listing');
        $listingBuilder = new ListingBuilder;
        if($listingType == 'snapshotcourse'){
            $this->cache = $listingBuilder->getSnapshotCourseCache();
        }else{
            $this->cache    = $listingBuilder->getListingCache();
        }


        switch ($listingType){
            case 'course'           :   foreach ($listingIds as $id){
                $this->cache->deleteCourse($id);
            }
                break;
            case 'snapshotcourse'   :   foreach ($listingIds as $id) {
                $this->cache->deleteSnapshotCourse($id);
            }
                break;
            case 'institute'        :   foreach ($listingIds as $id) {
                $this->cache->deleteInstitute($id);
            }
                break;
            case 'university'       :   foreach ($listingIds as $id) {
                $this->cache->deleteUniversity($id);
            }
                break;
        }
    }
    /*
     *This function is potentially dangerous and should not be uncommented!
    public function getNotFoundExternalURL($tableName,$columnName,$entityFieldName,$whereClause,$limitLower=0,$limitUpper=500){
        if(empty($tableName) || empty($columnName) || empty($entityFieldName)){
            return array();
        }
        $this->initiateModel('read');
        $sql = "SELECT SQL_CALC_FOUND_ROWS ".$entityFieldName.",TRIM(".$columnName.") AS ".$columnName." FROM ".$tableName.
                " WHERE 1 ".$whereClause." AND ".$columnName." !=''".
                " GROUP BY 1,2 ".
                " LIMIT ".$limitLower.", ".$limitUpper;
        $result['data'] = $this->dbHandle->query($sql)->result_array();
        $sql = "SELECT found_rows() as recordCount";
        $result['rowsCount'] = $this->dbHandle->query($sql)->row_array();

        return $result;
    }*/
    /*
	 * add a country along with currency & its exchange rates
	 * - SRB
	 */
    public function addCountryWithCurrency($data)
    {
        // get the write DB handle
        $this->initiateModel("write");
        //check if country exists
        $existingRes = $this->dbHandle->query('select countryId from countryTable where name = ?', array($data['countryName']))->result_array();
        if($existingRes[0]['countryId'] > 0)
        {
            return false;
        }
        $this->dbHandle->trans_start();
        // get max trackingPriority
        $priorityRes = $this->dbHandle->query('select (max(trackingPriority) + 1) as trackingPriority from countryTable')->result_array();

        $countryTableData = array('name'			=>$data['countryName'],
            'urlName'			=>$data['countryName'],
            'continent_id'	=>$data['continentId'],
            'tier'			=>$data['tier'],
            'trackingPriority'=>$priorityRes[0]['trackingPriority']);
        /***** insert the country data in countryTable****/
        $this->dbHandle->insert('countryTable', $countryTableData);
        // get its country id
        $countryId = $this->dbHandle->insert_id();

        /******** insert currency data ***********/
        $currencyData = array(
            'currency_code' => $data['currencySymbol'],
            'currency_name' => $data['currencyName'],
            'country_id'	=> $countryId
        );

        $this->dbHandle->insert('currency', $currencyData);
        // get its country id
        $currencyId = $this->dbHandle->insert_id();

        /****insert currency exchange rate data****/
        $currencyXRateData = array(
            'source_currency_id' => $currencyId,
            'destination_currency_id' => '1',
            'conversion_factor' => $data['conversionFactor'],
            'status'	=> 'live'
        );
        $this->dbHandle->insert('currency_exchange_rates', $currencyXRateData);
        // get last inserted id
        $lastInsertId = $this->dbHandle->insert_id();

        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
        return $lastInsertId;
    }

    public function getPaidUniversitiesOfCountry($countryId){
        $this->initiateModel("read");
        $this->dbHandle->select("distinct(university_id)");
        $this->dbHandle->where_in("pack_type",array(1,2,375));
        $this->dbHandle->where_in("country_id",$countryId);
        $this->dbHandle->where("status","live");
        $res = $this->dbHandle->get("abroadCategoryPageData")->result_array();
        return array_map(function($ele){return reset($ele);},$res);
    }
    /*
	 * function to delete university application profiles & submission dates, when university is deleted
	 */
    private function deleteUnivApplicationProfiles($universityIds, $isTransactionActive = 0)
    {
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the write DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }

        if(!is_array($universityIds)){
            $universityIds = explode(',', $universityIds);
        }

        if(count($universityIds)==0){
            return false;
        }
        $applicationProfileIds = $this->getUnivApplicationProfileIdsForDeletion($universityIds,1); //Get the appln profile ids
        if(count($applicationProfileIds)==0){
            return false;
        }
        $tableToUpdate = array(
            array("universityApplicationProfiles" 	, "universityId IN %{1}%"),
            array("applicationSubmissionDates" 	, "applicationProfileId IN %{2}%"),
        );

        // common where clause
        $commonWhereClause = " AND status in ('live') ";

        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $whereClause = str_replace("%{2}%", "(?)", $whereClause);

            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' WHERE 1 AND ".$whereClause.$commonWhereClause;

            $queryArray = array();
            $queryArray[] = ($value[0]=='universityApplicationProfiles') ? $universityIds : $applicationProfileIds;
            // execute the update query
            $updateStatus = $this->dbHandle->query($query,$queryArray);
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
            //sleep(2);
            // delete university cache
            //$this->deleteCacheForListings($universityIds, 'university');
        }
        return 1;
    }
    /*
	 * get university application profile ids for deletion/historification
	 */
    public function getUnivApplicationProfileIdsForDeletion($universityIds = array())
    {
        if(count($universityIds)==0) {
            return array();
        }
        // start transaction only if no transaction is already active
        $this->initiateModel("read");
        $this->dbHandle->select('applicationProfileId');
        $this->dbHandle->from('universityApplicationProfiles');
        $this->dbHandle->where_in('universityId',$universityIds);
        $this->dbHandle->where('status','live');
        $query = $this->dbHandle->get()->result_array();
        return array_map(function($a){return $a['applicationProfileId'];},$query);
    }
    /*
	 * get university application profile ids
	 */
    public function getUniversityApplicationProfiles($universityId, $status, $skipDates = false)
    {
        if(!($universityId>0)) {
            return array();
        }
        // first get application profiles
        $this->initiateModel("read");
        $this->dbHandle->select('applicationProfileId,universityId,name,applicationProcessUrl,sopRequired,lorRequired,essayRequired,cvRequired,sopComments,lorComments,essayComments,cvComments,allDocuments,admissionType,applicationFaqLink,applyNowLink,addedOn,addedBy');
        $this->dbHandle->from('universityApplicationProfiles');
        $this->dbHandle->where('universityId',$universityId);
        $this->dbHandle->where('status',$status);
        $queryRes = $this->dbHandle->get()->result_array();
        $applicationProfiles = array();
        foreach($queryRes as $result)
        {
            $result['applicationProcessUrl'] = MEDIAHOSTURL.$result['applicationProcessUrl'];
            $applicationProfiles[$result['applicationProfileId']]= $result;
        }
        if(!$skipDates && count($applicationProfiles)>0){
            // now submission dates
            $this->dbHandle->select('applicationProfileId,applicationSubmissionName,applicationSubmissionLastDate,intakeSeason,intakeYear,intakeMonth,intakeRound');
            $this->dbHandle->from('applicationSubmissionDates');
            $this->dbHandle->where_in('applicationProfileId',array_keys($applicationProfiles));
            $this->dbHandle->where('status',$status);
            $queryRes = $this->dbHandle->get()->result_array();
            foreach($queryRes as $result)
            {
                $applicationProfiles[$result['applicationProfileId']]['submissionDates'][] = $result;
            }
        }
        $applicationProfiles = array_values($applicationProfiles);
        return array_values($applicationProfiles);
    }

    public function getUnivesityMappedConsultants($universityId)
    {
        if(!($universityId>0))
        {
            return array();
        }

        $this->initiateModel('read');
        $this->dbHandle->select("consultantId");
        $this->dbHandle->where("universityId",$universityId);
        $this->dbHandle->where("status","live");
        $result = $this->dbHandle->get("consultantUniversityMapping")->result_array();
        $returnArray = array();
        foreach($result as $row){
            $returnArray[] = $row['consultantId'];
        }
        return $returnArray;
    }

    //fetch all the universities which are mapped to shiksha apply in a given country
    public function shikshaApplyUniversities($countryId)
    {
        if(!($countryId>0))
        {
            return array();
        }
        $this->dbHandle->distinct();
        $this->dbHandle->select('abroadCategoryPageData.university_id');
        $this->dbHandle->where('universityApplicationProfiles.status','live');
        $this->dbHandle->where_in("abroadCategoryPageData.country_id",$countryId);
        $this->dbHandle->from('`abroadCategoryPageData`');
        $this->dbHandle->join('universityApplicationProfiles','abroadCategoryPageData.university_id =universityApplicationProfiles.universityId','inner');
        $result = $this->dbHandle->get()->result_array();

        $returnArray = array();
        foreach($result as $row){
            $returnArray[] = $row['university_id'];
        }
        return $returnArray;
    }
    //fetch all the courses with shiksha apply enabled if this university has shiksha apply enabled on it
    public function getShikshaApplyCoursesForUniversity($universityId)
    {
        if(!($universityId>0))
        {
            return array();
        }
        $this->initiateModel('read');
        $this->dbHandle->distinct();
        $this->dbHandle->select('cad.courseId');
        $this->dbHandle->where('cad.status','live');
        $this->dbHandle->where_in("uap.universityId",$universityId);
        $this->dbHandle->from('courseApplicationDetails cad');
        $this->dbHandle->join('universityApplicationProfiles uap','cad.universityCourseProfileId=uap.applicationProfileId and cad.status=uap.status','inner');
        $result = $this->dbHandle->get()->result_array();
        // echo ($this->dbHandle->last_query());
        $returnArray = array();
        foreach($result as $row){
            $returnArray[] = $row['courseId'];
        }
        //_p(count($returnArray));
        //die;
        return $returnArray;
    }

    public function deleteRMSUniversityCounsellorMapping($mappingId, $userId){
        $this->initiateModel("write");
        $data = array(
            'last_modified_by'=>$userId,
            'status' => 'deleted'
        );
        $this->dbHandle->where("id",$mappingId);
        $this->dbHandle->update('RMS_counsellor_university_mapping',$data);
    }


    /*
	 * function to delete RMCUniversity Counsellor Mapping, when university is deleted
	 */
    private function deleteRMCUniversityCounsellorMapping($universityIds, $isTransactionActive = 0)
    {
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the write DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }

        if(!is_array($universityIds)){
            $universityIds = explode(',', $universityIds);
        }

        if(count($universityIds)==0){
            return false;
        }

        $tableToUpdate = array(
            array("rmcCounsellorUniversityMapping" 	, "universityId IN %{1}%"),
        );

        // common where clause
        $commonWhereClause = " AND status in ('live') ";
        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put university id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' WHERE 1 AND ".$whereClause.$commonWhereClause;
            $queryArray = array();
            $queryArray[] = $universityIds;
            // execute the update query
            $updateStatus = $this->dbHandle->query($query,$queryArray);
        }
        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
        }
        return 1;
    }

    /*
	 * function to delete rmcUserCourseRatingMappings, when course is deleted
	 */
    private function deleteRmcUserCourseRatingMappings($courseIds, $isTransactionActive = 0)
    {
        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the write DB handle
            $this->initiateModel("write");
            $this->dbHandle->trans_start();
        }
        if(!(is_array($courseIds))){
            $courseIds = explode(',', $courseIds);
        }

        if(count($courseIds)==0){
            return false;
        }

        $rmcUserCourseRatingIds = $this->rmcUserCourseRatingIds($courseIds,1); //Get the Rmc User Course Rating Ids
        if(count($rmcUserCourseRatingIds)==0){
            return false;
        }
        $tableToUpdate = array(
            array("rmcUserCourseRating" 	, "courseId IN %{1}%"),
            //array("rmcUserReminders" 	, "rmcUserCourseRatingId IN %{2}%"),
            //array("rmcPreCandidateCounsellorMapping" 	, "rmcUserCourseRatingId IN %{3}%"),
        );

        // common where clause
        $commonWhereClause = " AND status in ('live') ";
        // prepare and execute update query for each table as specified in "$tableToUpdate" array
        foreach($tableToUpdate as $key=>$value)
        {
            // put course id(s) in where condition
            $whereClause = str_replace("%{1}%", "(?)", $value[1]);
            $whereClause = str_replace("%{2}%", "(?)", $whereClause);
            $whereClause = str_replace("%{3}%", "(?)", $whereClause);

            // if($value[0]=='rmcPreCandidateCounsellorMapping'){
            //     $commonWhereClause = " AND status in ('followUp') ";
            // }
            // prepare the query
            $query = "UPDATE ".$value[0]." SET status = 'deleted' WHERE 1 AND ".$whereClause.$commonWhereClause;

            $queryArray = array();
            if($value[0]=='rmcUserCourseRating'){
                $queryArray[] = $courseIds;
            // }else if($value[0]=='rmcUserReminders'){
            //     $queryArray[] = $rmcUserCourseRatingIds;
            // }else if($value[0]=='rmcPreCandidateCounsellorMapping'){
            //     $queryArray[] = $rmcUserCourseRatingIds;
            }

            // execute the update query
            $updateStatus = $this->dbHandle->query($query,$queryArray);
        }

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE) {
                throw new Exception('Transaction Failed');
            }
        }
        return 1;
    }
    public function rmcUserCourseRatingIds($courseIds,$isTransactionActive = 0)
    {
        if(count($courseIds)==0) {
            return array();
        }

        // start transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            // get the write DB handle
            $this->initiateModel("read");
            $this->dbHandle->trans_start();
        }
        $this->dbHandle->select('rmcUserCourseRatingId');
        $this->dbHandle->from('rmcUserCourseRating');
        $this->dbHandle->where_in('courseId',$courseIds);
        $this->dbHandle->where('status','live');
        $query = $this->dbHandle->get()->result_array();
        return array_map(function($v){return $v['rmcUserCourseRatingId'];},$query);

        // commit transaction only if no transaction is already active
        if(!$isTransactionActive)
        {
            $this->dbHandle->trans_complete();
            if ($this->dbHandle->trans_status() === FALSE)
            {
                throw new Exception('Transaction Failed');
            }

        }
    }
    /*
	 * does content type have a homepage yet?
	 */
    public function isHomepageAvailable($applyContentType)
    {
        // get the DB handle
        $this->initiateModel("read");
        $this->dbHandle->select("count(1) as contentHomepageCount",false);
        $this->dbHandle->from("sa_content");
        $this->dbHandle->where("status","live");
        $this->dbHandle->where("type","applyContent");
        $this->dbHandle->where("is_homepage",1,false);
        $this->dbHandle->where("apply_content_type_id",$applyContentType);
        $result = $this->dbHandle->get()->result_array();
        return $result[0]['contentHomepageCount'];
    }

    public function isExamHomepageAvailable($examContentType,$contentId)
    {
        // get the DB handle
        $this->initiateModel("read");
        
        $this->dbHandle->select("count(1) as examHomepageCount",false);
        $this->dbHandle->from("sa_content sac");
        $this->dbHandle->where("sac.status","live");
        $this->dbHandle->where("sac.type",'examContent');
        $this->dbHandle->where("sac.is_homepage",1,false);
        if($contentId>0){
            $this->dbHandle->where("sac.content_id <>",$contentId, false);
        }
        $this->dbHandle->where("sac.exam_id",$examContentType);
        $result = $this->dbHandle->get()->result_array();
        return $result[0]['examHomepageCount'];
    }
    
    public function getCourseSpecializations($categoryId,$courseLevel,$subCategoryId)
    {
        // get the DB handle
        $this->initiateModel("read");
        $this->dbHandle->select("
									tcs.SpecializationName,
									tcs.SpecializationId",false);
        if(is_array($subCategoryId)){
            $this->dbHandle->select("cbt.boardId as subcatId",false);
        }
        $this->dbHandle->from("tCourseSpecializationMapping tcs");
        $this->dbHandle->join("categoryBoardTable cbt","tcs.CategoryId = cbt.parentId","inner");
        $this->dbHandle->join("LDBCoursesToSubcategoryMapping lcs","tcs.SpecializationId = lcs.ldbCourseID AND lcs.CategoryId = cbt.boardId","inner");
        if(is_array($subCategoryId) && count($subCategoryId) > 0){
            $this->dbHandle->where_in("cbt.boardId",$subCategoryId);
        }
        else{
            $this->dbHandle->where("cbt.boardId",$subCategoryId);
        }
        if(is_array($categoryId) && count($categoryId)>0){
            $this->dbHandle->where_in("tcs.CategoryId",$categoryId);
        }
        else{
            $this->dbHandle->where("tcs.CategoryId",$categoryId);
        }
        if(is_array($courseLevel) && count($courseLevel)>0){
            $this->dbHandle->where_in("tcs.CourseName",$courseLevel);
        }
        else{
            $this->dbHandle->where("tcs.CourseName",$courseLevel);
        }
        $this->dbHandle->where("tcs.Status","live");
        $this->dbHandle->where("lcs.status","live");
        $this->dbHandle->where("tcs.scope","abroad");
        $this->dbHandle->where("tcs.isEnabled","1");
        $this->dbHandle->where("cbt.flag","studyabroad");
        $this->dbHandle->where("cbt.isOldCategory","0");
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }

    public function getSpecializationData($id){
        $this->initiateModel('read');
        $this->dbHandle->select("tcsm.SpecializationId as id, tcsm.SpecializationName as name, cbt1.name as category, cbt2.name as subcategory, tcsm.SubmitDate as date");
        $this->dbHandle->from("tCourseSpecializationMapping tcsm");
        $this->dbHandle->join("categoryBoardTable cbt1","cbt1.boardId = tcsm.CategoryId","inner");
        $this->dbHandle->join("LDBCoursesToSubcategoryMapping stsm","stsm.ldbCourseId = tcsm.SpecializationId and stsm.status='live'","inner");
        $this->dbHandle->join("categoryBoardTable cbt2","cbt2.boardId = stsm.categoryId","inner");
        $this->dbHandle->where("tcsm.scope","abroad");
        $this->dbHandle->where("tcsm.isEnabled","1");
        if((integer)($id) > 0){
            $this->dbHandle->select("tcsm.CategoryId as categoryId, stsm.categoryId as subcategoryId, tcsm.CourseDetail as courseDetail");
            $this->dbHandle->where("tcsm.SpecializationId",$id);
        }
        $this->dbHandle->group_by('name, category, subcategory');
        $this->dbHandle->order_by("date desc, id asc");
        $result = $this->dbHandle->get()->result_array();
        return $result;
    }

    public function getCategorySubcategoryMappingData(){
        $this->initiateModel('read');
        $this->dbHandle->select("boardId, name, parentId");
        $this->dbHandle->from("categoryBoardTable");
        $this->dbHandle->where("isOldCategory","0");
        $this->dbHandle->where("flag","studyabroad");
        $res = $this->dbHandle->get()->result_array();
        $result = array();
        foreach($res as $row){
            if($row['parentId'] == 1){
                $result[$row['boardId']]['name'] = $row['name'];
            }else{
                $result[$row['parentId']]['subcategories'][$row['boardId']] = $row['name'];
            }
        }
        return $result;
    }

    public function getParentDataByCategoryId($categoryId){
        $this->initiateModel('read');
        $this->dbHandle->select("distinct(CourseName), ParentId, CourseLevel, CourseLevel1");
        $this->dbHandle->from("tCourseSpecializationMapping");
        $this->dbHandle->where('CategoryId',$categoryId);
        $this->dbHandle->where('SpecializationName !=','All');
        $res = $this->dbHandle->get()->result_array();
        $result = array();
        foreach($res as $row){
            $result[$row['CourseName']] = array('ParentId'=>$row['ParentId'],'CourseLevel'=>$row['CourseLevel'],'CourseLevel1'=>$row['CourseLevel1']);
        }
        return $result;
    }

    public function insertNewSpecialization($fullData,$subcategoryId){
        $this->initiateModel('write');
        $this->dbHandle->trans_start();
        $subcategoryMappingData = array('isPopularCourse'=>'0','status'=>'live','categoryId'=>$subcategoryId);
        foreach($fullData as $record){
            $this->dbHandle->insert('tCourseSpecializationMapping',$record);
            $id = $this->dbHandle->insert_id();
            $subcategoryMappingData['ldbCourseId'] = $id;
            $this->dbHandle->insert('LDBCoursesToSubcategoryMapping',$subcategoryMappingData);
        }
        $this->dbHandle->trans_complete();
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
    }

    public function getSpecializationIdsByNameAndCategory($oldData){
        $this->initiateModel('read');
        $this->dbHandle->select("tcsm.SpecializationId");
        $this->dbHandle->from("tCourseSpecializationMapping tcsm");
        $this->dbHandle->join("LDBCoursesToSubcategoryMapping ldb","ldb.ldbCourseId = tcsm.SpecializationId","inner");
        $this->dbHandle->where("tcsm.SpecializationName",$oldData['oldName']);
        $this->dbHandle->where("tcsm.CategoryId",$oldData['oldCategoryId']);
        $this->dbHandle->where("ldb.categoryId",$oldData['oldSubcategoryId']);
        $res = $this->dbHandle->get()->result_array();
        $result = array_map(function($ele){return reset($ele);},$res);
        return $result;
    }

    public function getCourseIdsMappedToSpecializations($specializationIDs,$mode='read'){
//        die($mode);
        $this->initiateModel($mode);
        $this->dbHandle->select("distinct(cclm.clientCourseID)");
        $this->dbHandle->from("clientCourseToLDBCourseMapping cclm");
        if(is_array($specializationIDs))
        {
            $this->dbHandle->where_in("cclm.LDBCourseID",$specializationIDs);
        }
        else
        {
            $this->dbHandle->where("cclm.LDBCourseID",$specializationIDs);
        }
        $this->dbHandle->where_in("cclm.status",array('live','draft'));
        $res = $this->dbHandle->get()->result_array();
//        _p($this->dbHandle->last_query());die;
        $result = array_map(function($ele){return reset($ele);},$res);
//        _p($result);die;
        return $result;
    }

    public function editExistingSpecialization($idsToEdit,$newData){
        $this->initiateModel('write');
        $this->dbHandle->where_in("SpecializationId",$idsToEdit);
        $this->dbHandle->update('tCourseSpecializationMapping',$newData);
    }

    public function confirmUniqueAddSpecialization($commonData){
        $this->initiateModel('read');
        $this->dbHandle->select("distinct(ldb.categoryId) as subcategory");
        $this->dbHandle->from("tCourseSpecializationMapping tcsm");
        $this->dbHandle->join("LDBCoursesToSubcategoryMapping ldb","ldb.ldbCourseId = tcsm.SpecializationId","inner");
        $this->dbHandle->where("tcsm.SpecializationName",$commonData['name']);
        $this->dbHandle->where("tcsm.CategoryId",$commonData['categoryId']);
        $this->dbHandle->where("tcsm.scope","abroad");
        $this->dbHandle->where("tcsm.isEnabled","1");
        $res = $this->dbHandle->get()->result_array();
        $subCategories = array_map(function($ele){return reset($ele);},$res);
        if(in_array($commonData['subcategoryId'],$subCategories)){
            return false;
        }
        return true;
    }

    public function confirmUniqueEditSpecialization($newData,$oldData,$idsToEdit){
        $this->initiateModel('read');
        $this->dbHandle->select("*");
        $this->dbHandle->from("tCourseSpecializationMapping tcsm");
        $this->dbHandle->join("LDBCoursesToSubcategoryMapping ldb","ldb.ldbCourseId = tcsm.SpecializationId","inner");
        $this->dbHandle->where("tcsm.SpecializationName",$newData['SpecializationName']);
        $this->dbHandle->where("tcsm.CategoryId",$oldData['oldCategoryId']);
        $this->dbHandle->where("ldb.categoryId",$oldData['oldSubcategoryId']);
        $this->dbHandle->where_not_in("tcsm.SpecializationId",$idsToEdit);
        $this->dbHandle->where("tcsm.scope","abroad");
        $this->dbHandle->where("tcsm.isEnabled","1");
        $res = $this->dbHandle->get()->result_array();
        if(count($res) > 1){
            return false;
        }
        return true;
    }
    public function getPaidDetailsForUniversities($universityIds)
    {
        $this->initiateModel('read');
        $this->dbHandle->select('group_concat(distinct(actpg.course_id)) as course_ids,un.university_id');
        $this->dbHandle->from('abroadCategoryPageData actpg');
        $this->dbHandle->join('university un', 'actpg.university_id=un.university_id and actpg.status=un.status','inner');
        $this->dbHandle->where_in('actpg.pack_type',array(GOLD_SL_LISTINGS_BASE_PRODUCT_ID,SILVER_LISTINGS_BASE_PRODUCT_ID,GOLD_ML_LISTINGS_BASE_PRODUCT_ID));
        $this->dbHandle->where_in('actpg.university_id',$universityIds);
        $this->dbHandle->where('actpg.status','live');
        $this->dbHandle->group_by('actpg.university_id');

        $result = $this->dbHandle->get()->result_array();
        $resultData = array();
        if(!empty($result[0]['course_ids']))
        {
            foreach ($result as $value)
            {
                $resultData[$value['university_id']]= $value;
            }
        }
        return $resultData;
    }

    public function validateExamContentRedirection($url){

        $resultData = array();
        $resultData['error'] = false;
        if($url !='')
        {
            $this->initiateModel('read');
            $this->dbHandle->select('content_id as contentId');
            $this->dbHandle->from('sa_content_redirection_mapping crm');
            $this->dbHandle->where('crm.status','live');
            $this->dbHandle->where('crm.old_content_url',$url);
            $result = $this->dbHandle->get()->result_array();
            if(count($result)>0){
                $resultData['error'] = true;
                $resultData['errorMsg'] = "URL already redirected";
                $resultData['contentId'] = $result[0]['contentId'];
            }
        }
        return $resultData;
    }

    public function verifyContentDetails($contentId,$contentType,$url=''){
        $resultData = array();
        $resultData['error'] = true;
        if($contentId >0 && $contentType!='')
        {
            $this->initiateModel('read');
            $this->dbHandle->select('content_id');
            $this->dbHandle->from('sa_content crm');
            $this->dbHandle->where_in('crm.status',array('live','deleted'));
            $this->dbHandle->where('crm.content_id',$contentId);
            $this->dbHandle->where('crm.type',$contentType);
            if($url!=''){
                $this->dbHandle->where('crm.content_url',$url);
            }
            $result = $this->dbHandle->get()->result_array();
            if(count($result)>0){
                $resultData['error'] = false;
                $resultData['contentId'] = $result[0]['content_id'];
            }else{
                $resultData['error'] = true;
                $resultData['errorMsg'] = "Please enter a valid content URL";
            }
        }
        return $resultData;
    }

    public function moveOldCommentToNewContent($oldContentId,$newContentID,$oldSectionId=0,$transactionActive = false)
    {
        $this->initiateModel("write");
        if(!$transactionActive )
        {
            $this->dbHandle->trans_start();
        }

        $udata = array(
            'content_id'		=>$newContentID,
            'section_id'		=>0
        );
        $this->dbHandle->where('content_id', $oldContentId);
        if($oldSectionId >0){
            $this->dbHandle->where('section_id', $oldSectionId);
        }
        $this->dbHandle->where('status','live');
        $this->dbHandle->update('sa_comment_details', $udata);
        $commentCount = $this->dbHandle->affected_rows();

        $this->dbHandle->select('content_id,max(published_on) as updateDate');
        $this->dbHandle->from('sa_content crm');
        $this->dbHandle->where_in('crm.status',array('live','deleted'));
        $this->dbHandle->where('crm.content_id',$oldContentId);
        $result = $this->dbHandle->get()->result_array();
        if(count($result) >0){
            $udata = array(
                'comment_count'	=>$commentCount,
                'published_on'	=>$result[0]['updateDate']
            );
            $this->dbHandle->where('content_id', $newContentID);
            $this->dbHandle->where_in('status', array('live','draft'));
            $this->dbHandle->update('sa_content', $udata);
        }

        if(!$transactionActive){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }
    /*
	 * to check if a listing has been added to indexlog & its indexing is pending
	 * @params: single or multiple course ids & operation (index/delete) and listing type as course or scholarship
	 * 		OR
	 * 			single or multiple univ ids & operation (delete) and listing type as university
	 */
    public function checkAndAddCourseToIndexLog($listingType="", $listingTypeIds = array(), $operation = 'index',$transactionActive = false)
    {
        $indexLogExistingRows = array();
        if(count($listingTypeIds)==0)
        {
            return false;
        }
        if(is_numeric($listingTypeIds) && $listingTypeIds >0)
        {
            $listingTypeIds = array($listingTypeIds);
        }
        $this->initiateModel("write");
        if(!$transactionActive )
        {
            $this->dbHandle->trans_start();
        }
        $this->dbHandle->select('listingTypeId');
        $this->dbHandle->from('abroadIndexLog');
        $this->dbHandle->where('status','pending');
        $this->dbHandle->where('operation',$operation);
        $this->dbHandle->where('listingType',$listingType);
        $this->dbHandle->where_in('listingTypeId',$listingTypeIds);
        $result = $this->dbHandle->get()->result_array();
        foreach($result as $row)
        {
            $indexLogExistingRows[$row['listingTypeId']] = true;
        }
        $batch = array();
        foreach($listingTypeIds as $listingTypeId)
        {
            // add to index log those not found
            if($indexLogExistingRows[$listingTypeId] !== true){
                $batch[] = array('listingType'=>$listingType,'listingTypeId'=>$listingTypeId,'operation'=>$operation);
            }
            // desktop search indexlog
            switch($listingType)
            {
                case "course" : $type = "abroadcourse";
                    break;
                case "university" : $type = "university";
                    break;
                case "institute" : $type = "abroadinstitute";
                    break;
            }
            //modules::run('search/Indexer/addToQueue', $listingTypeId,$type,$operation,"false");
        }
        if(count($batch)>0)
        {
            $this->dbHandle->insert_batch('abroadIndexLog',$batch);
        }
        if(!$transactionActive){
            $this->dbHandle->trans_complete();
            if($this->dbHandle->trans_status() === FALSE) {
                $returnFlag = false;
                throw new Exception('Transaction Failed');
            }
        }
    }

    public function getCounsellorURLIds(){
        $ids = array();
        $this->initiateModel('read');
        $this->dbHandle->select('seoUrl');
        $this->dbHandle->from('RMS_counsellor');
        $this->dbHandle->where('counsellor_manager_id !=',0);
        $this->dbHandle->where('status','live');
        $result = $this->dbHandle->get()->result_array();
        foreach ($result as $key => $value) {
            if($value['seoUrl']){
                $ids[] = explode("-",$value['seoUrl'])[1];
            }
        }
        return $ids;
    }

    //function is used to get content id given contentTypeId,$contentIds,$contentType
    //function is built only for exam and apply content
    public function getContentIdByContentTypeId($contentTypeId,$contentIds,$contentType)
    {
        $this->initiateModel('read');
        $this->dbHandle->select('sac.content_id,sac.title as strip_title,sac.status');
        $this->dbHandle->from('sa_content sac');
        $this->dbHandle->where('sac.status',ENT_SA_PRE_LIVE_STATUS);
        $this->dbHandle->where('sac.type',$contentType);
        if($contentType == 'examContent') {
            $this->dbHandle->where('sac.exam_id', $contentTypeId);
        }
        elseif($contentType == 'applyContent'){
            $this->dbHandle->where('sac.apply_content_type_id',$contentTypeId);
        }
        if(count($contentIds) == 1)
        {
            $this->dbHandle->where('sac.content_id',$contentIds[0]);
        }
        else
        {
            $this->dbHandle->where_in('sac.content_id',$contentIds);
        }
        $result = $this->dbHandle->get()->result_array();
        for($i=0;$i<count($result);$i++)
        {
            $result[$i]['strip_title'] = html_entity_decode(strip_tags($result[$i]['strip_title']),ENT_NOQUOTES, 'UTF-8');
        }
        return $result;
    }

    public function saveExamApplyContentNavbarLinksData($data)
    {
        // get the write DB handle
        $this->initiateModel("write");
        // start the transaction
        $this->dbHandle->trans_start();
        if($data['updateFlag'])
        {
            $statusUpdateData = array('status'=>ENT_SA_HISTORY_STATUS);
            $this->dbHandle->where("content_type_id",$data['content_type_id']);
            $this->dbHandle->where("content_type",$data['content_type']);
            $this->dbHandle->update('sa_exam_apply_navbar_links', $statusUpdateData);
            $data['modified_by'] 	= $data["userid"];
        }
        else
        {
            $data['modified_by'] 	= 0;
            $data['added_by'] 	= $data["userid"];
            $data['added_at'] 	= date('Y-m-d H:i:s');
        }
        unset($data["userid"]);
        unset($data["updateFlag"]);
        $this->dbHandle->insert('sa_exam_apply_navbar_links', $data);
//       echo $this->dbHandle->last_query();die;
        // commit the transaction
        $this->dbHandle->trans_complete();
        if ($this->dbHandle->trans_status() === FALSE) {
            throw new Exception('Transaction Failed');
        }
    }

    public function getDeletedCourse($courseId) {
        if(empty($courseId)) {
            return array();
        }

        $this->initiateModel('read');
        $this->dbHandle->select('cd.course_id, cd.institute_id, cd.status, cd.courseTitle,
				cd.course_level_1, lm.last_modify_date, lct.category_id');
        $this->dbHandle->from('course_details cd');
        $this->dbHandle->join('listings_main lm','lm.listing_type_id = cd.course_id and lm.status="'.ENT_SA_DELETED_STATUS.'"', 'inner');
        $this->dbHandle->join('listing_category_table lct', 'lct.listing_type_id=cd.course_id and lct.listing_type="course" and lct.status="'.ENT_SA_DELETED_STATUS.'"', 'inner');
        $this->dbHandle->join('institute_university_mapping ium', 'ium.institute_id=cd.institute_id and ium.status="'.ENT_SA_PRE_LIVE_STATUS.'"', 'inner');
        $this->dbHandle->where('cd.status', ENT_SA_DELETED_STATUS);
        $this->dbHandle->where('cd.course_id', $courseId);

        $result = $this->dbHandle->get()->result_array();
        return $result;
    }

    public function isPaidCourse($courseId) {
        if(empty($courseId)) {
            return false;
        }

        $this->initiateModel('read');
        $this->dbHandle->select('cd.course_id');
        $this->dbHandle->from('course_details cd');
        $this->dbHandle->join('listings_main lm','lm.listing_type_id = cd.course_id and lm.listing_type="course" and lm.pack_type=1 and lm.status="'.ENT_SA_PRE_LIVE_STATUS.'"', 'inner');
        $this->dbHandle->where('cd.status', ENT_SA_PRE_LIVE_STATUS);
        $this->dbHandle->where('cd.course_id', $courseId);

        $result = $this->dbHandle->get()->result_array();
        if(!empty($result)) {
            return true;
        }
        return false;
    }
}
