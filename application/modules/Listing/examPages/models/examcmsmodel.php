<?php
//alter table exampage_content_table add column toc_text mediumtext Default null after entity_value;
class examcmsmodel extends MY_Model {
    private $dbHandle = '';
    private $dbHandleMode = '';
    
    function __construct() {
		parent::__construct('Listing');
    }
    
    private function initiateModel($mode = "write"){
		if($this->dbHandle && $this->dbHandleMode == 'write')
		    return;
		
		$this->dbHandleMode = $mode;
		$this->dbHandle = NULL;
		if($mode == 'read') {
			$this->dbHandle = $this->getReadHandle();
		} else {
			$this->dbHandle = $this->getWriteHandle();
		}
    }
	
    private function _getNewAutogeneratedId($type = 'snapshot_course') {
		return Modules::run('common/IDGenerator/generateId',$type);
    }
	
	public function getExamPageData($examPageId) {
		if(empty($examPageId)) {
			return;
		}
		//Obtaing Read-Mode on DB
		$this->initiateModel('read');
		
		//Query to get basic details and all static field values
		$sqlStaticFields = "SELECT ".
								"em.exampage_id					as exampage_id,".
								"main.name						as exam_name,".
								"em.exam_id                     as exam_id,".
								"em.exam_full_form				as exam_full_form,".
								"em.exam_article_tags			as exam_article_tags,".
								"em.exam_order					as exam_order,".
								"em.is_featured					as is_featured,".
								"em.created						as creation_date,".
								"em.created_by					as created_by,".
								"em.updated						as last_modified_date,".
								"em.updated_by					as last_modified_by,".
								
								"eds.discussion_ids				as discussion_ids,".
								
								"er.exam_from_result_date		as result_from_date,".
								"er.exam_to_result_date			as result_to_date,".
								"er.event_name					as result_event_name,".
								"er.article_id					as result_article_id,".
								"er.exam_analysis				as result_exam_analysis,".
								"er.exam_analysis_show_expanded	as result_exam_analysis_show_expndd,".
								"er.exam_reaction				as result_exam_reaction,".
								"er.exam_reaction_show_expanded	as result_exam_reaction_show_expndd,".
								
								"es.syllabus_content			as syllabus_content,".
								"es.show_expanded				as syllabus_show_expanded ".
							"FROM ".
											"exampage_master 	as em ".
								"LEFT JOIN exampage_main as main on em.exam_id = main.id ".
								"LEFT JOIN	exampage_discussion as eds ON em.exampage_id = eds.exampage_id AND eds.status = ? ".
								"LEFT JOIN	exampage_result		as er  ON em.exampage_id = er.exampage_id  AND er.status  = ? ".
								"LEFT JOIN	exampage_syllabus	as es  ON em.exampage_id = es.exampage_id  AND es.status  = ? ".
							"WHERE ".
								"em.exampage_id = ? AND em.status = ? ";
		$staticFieldResult = $this->dbHandle->query($sqlStaticFields, array('draft', 'draft', 'draft', $examPageId, 'draft'));
		$status = 'draft';
		if($staticFieldResult->num_rows() <= 0) {
			$staticFieldResult = $this->dbHandle->query($sqlStaticFields, array('live', 'live', 'live', $examPageId, 'live'));
			$status = 'live';
		}
		
		$staticFieldResultSet = $staticFieldResult->result_array();
		
		//Query to get homepage data
		$homePageQuery = "SELECT ".
							"exampage_id				as exampage_id, ".
							"label						as wiki_label, ".
							"description				as wiki_description, ".
							"`order`					as wiki_order, ".
							"show_expanded				as wiki_show_expanded, ".
							"type						as wiki_type ".
						"FROM ".
							"exampage_home ".
						"WHERE ".
							"exampage_id = ? AND status = ? ";
		$homePageResultSet = $this->dbHandle->query($homePageQuery, array($examPageId, $status))->result_array();
		foreach($homePageResultSet as $homePageResultSetRow) {
		    $homePageResultSetFinal[$homePageResultSetRow['wiki_label']] = $homePageResultSetRow;
		}
		
		//Query to get important dates data
		$importantDatesQuery = "SELECT ".
									"exampage_id				as exampage_id, ".
									"exam_from_date			as important_dates_from, ".
									"exam_to_date			as important_dates_to, ".
									"event_name				as important_dates_event_name, ".
									"article_id				as important_dates_article_id ".
								"FROM ".
									"exampage_dates ".
								"WHERE ".
									"exampage_id = ? AND status = ? ";
		$importantDatesResultSet = $this->dbHandle->query($importantDatesQuery, array($examPageId, $status))->result_array();
		
		//Query to get topper interview data
		$interviewQuery = 	"SELECT ".
								"exampage_id				as exampage_id, ".
								"interview					as topper_interview, ".
								"`order`					as topper_interview_order, ".
								"show_expanded				as topper_interview_show_expanded ".
							"FROM ".
								"exampage_interview ".
							"WHERE ".
								"exampage_id = ? AND status = ? ";
		$interviewResultSet = $this->dbHandle->query($interviewQuery, array($examPageId, $status))->result_array();
		
		//Query to get tile data
		$sectionQuery = "SELECT ".
							"section_name, section_description, section_priority, show_link_in_menu ".
						"FROM ".
							"exampage_section_description ".
						"WHERE ".
							"exampage_id = ? AND status = ? ".
						"ORDER BY ".
							"section_priority ";
		$sectionResultSet = $this->dbHandle->query($sectionQuery, array($examPageId, $status))->result_array();
		
		foreach($sectionResultSet as $sectionData) {
			$sectionResultSetFinal[$sectionData['section_name']]['description']    = $sectionData['section_description'];
			$sectionResultSetFinal[$sectionData['section_name']]['priority']       = $sectionData['section_priority'];
			$sectionResultSetFinal[$sectionData['section_name']]['section']        = $sectionData['section_name'];
			$sectionResultSetFinal[$sectionData['section_name']]['showLinkInMenu'] = $sectionData['show_link_in_menu'];
		}
		
		//Query to get tile data
		$collegeQuery = "SELECT ".
							"tile_link ".
						"FROM ".
							"exampage_college ".
						"WHERE ".
							"exampage_id = ? AND status = ? ";
		$collegeResultSet = $this->dbHandle->query($collegeQuery, array($examPageId, $status))->result_array();
		foreach($collegeResultSet as $collegeResultSetRow) {
		    $collegeResultSetFinal = $collegeResultSetRow;
		}
		
		$examPageData['basic'] 			= $staticFieldResultSet[0];
		$examPageData['homepage'] 		= $homePageResultSetFinal;
		$examPageData['important_dates'] 	= $importantDatesResultSet;
		$examPageData['topper_interview'] 	= $interviewResultSet;
		$examPageData['section_info']		= $sectionResultSetFinal;
		$examPageData['college']		= $collegeResultSetFinal;
		
		return $examPageData;
	}

	public function getMetaDetails($examPageId){
		$this->initiateModel('read');
		$handle = $this->dbHandle;
		$sql = "SELECT section_name,title,description FROM exampage_metatags WHERE exampage_id = ?";
		$res = $handle->query($sql,array($examPageId))->result_array();
		return $res;
	}

	public function getExamPageSeo($examId, $sectioName){
		$this->initiateModel('read');
		$sql = "SELECT metaTitle, metaDescription, h1Tag from exampage_seo_details where exam_id = ? and status='live' and sectionName = ?";
		return $this->dbHandle->query($sql,array($examId,$sectioName))->row_array();
	}

	public function saveExamPageSeoFormData($postData){
		$this->initiateModel('write');

		$this->dbHandle->trans_start();

		$updateArr = array('status' => 'history');
		$this->dbHandle->where('exam_id',$postData['examId']);
		$this->dbHandle->where('sectionName',$postData['sectionName']);
		$this->dbHandle->update('exampage_seo_details', $updateArr);

		if(!empty($postData['metaTitle'])){
			$insertData['metaTitle'] = $postData['metaTitle'];
		}
		if(!empty($postData['metaDescription'])){
			$insertData['metaDescription'] = $postData['metaDescription'];
		}
		if(!empty($postData['h1Tag'])){
			$insertData['h1Tag'] = $postData['h1Tag'];
		}
		$insertData['exam_id'] = $postData['examId'];
		$insertData['sectionName'] = $postData['sectionName'];
		$insertData['status'] = 'live';
		$this->dbHandle->insert('exampage_seo_details', $insertData);

		$this->dbHandle->trans_complete();
		if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
		}
	}
	
	public function getAllExamPageDataForTable() {
		//Obtaing Read-Mode on DB
		$this->initiateModel('read');
		
		//Query to get view table data
		$examDataQuery = "SELECT
							em.exampage_id				as exampage_id,
							em.exam_name				as exam_name,
							em.exam_id	  			    as exam_id,
							exam.exampageId             as exampageId,
							DATE(em.updated)			as last_modified_date,
							em.updated_by				as last_modified_by,
							em.status					as status,
							ecm.client_type				as grade_type
						FROM
										exampage_master 			as em
							LEFT JOIN   exampage_main 				as exam ON exam.id = em.exam_id and exam.status = 'live' and exam.exampageId > 0
							LEFT JOIN	exampage_clienttype_mapping as ecm ON em.exam_name = ecm.exam_name
						WHERE
							em.id = (SELECT MAX(em1.id) FROM exampage_master as em1 WHERE em1.exampage_id = em.exampage_id AND em1.status IN ('live','draft'))
							AND em.status IN ('live','draft')
						ORDER BY
							em.updated DESC
						";
		$examDataResultSet = $this->dbHandle->query($examDataQuery)->result_array();

		return $examDataResultSet;
	}
	
	public function getAlreadyAddedExams() {
		//Obtaing Read-Mode on DB
		$this->initiateModel('read');
		
		//Query to get view table data
		$examListQuery = "SELECT DISTINCT exam_name,
								 category_name
						  FROM 	 exampage_master
						  WHERE  status IN ('live','draft')
						";
		$examListResultSet = $this->dbHandle->query($examListQuery)->result_array();
		
		return $examListResultSet;
	}

	/**
	 * insert post form data
	 * @param array $examFormData contains postData
	 */
	function addEditExamData($examFormData){

     	// get the write DB handle
		$this->initiateModel("write");
		
		$this->dbHandle->trans_start();
     	
		// adding new exam page 
		if($examFormData['action'] == 'add'){
			$examFormData['examPageId']   = $this->_getNewAutogeneratedId('exampage');
			$examPageId = $examFormData['examPageId'];
		}elseif($examFormData['status'] =='live' && $examFormData['action'] == 'edit'){
		  //edit post data save
		  	$examPageId = $examFormData['examPageId'];
			// make live to history
			$oldStatus = "'live','draft'";
			$this->updateExamPageTableStatus('history',$examPageId,$oldStatus);
		}elseif($examFormData['status']=='draft' && $examFormData['action'] == 'edit'){  
			// draft already exist exam page
			$examPageId = $examFormData['examPageId'];
			$oldStatus = "'draft'";
			// insert the new  in draft state and make old draft to history
			$this->updateExamPageTableStatus('history',$examPageId,$oldStatus);
		}

		// inserting records in all exams tables
		$this->_updateExampageMain($examFormData['examId'], $examFormData['examPageId']);
	 	$this->_insertExampageMaster($examFormData);
 		$this->_insertExampageHome($examFormData);	
	 	$this->_insertExampageSyllabus($examFormData);
	 	$this->_insertExampageDates($examFormData);
	 	$this->_insertExampageResult($examFormData);
	 	$this->_insertExampageDiscussion($examFormData);
	 	$this->_insertExampageTileDescription($examFormData);
	 	$this->_insertExampageCollege($examFormData);

	 	if($examFormData['action'] == 'edit' && $examFormData['examName'] != $examFormData['beforeEditExamName'] && $examFormData['status'] == 'live' && !empty($examFormData['beforeEditExamName'])){
	 		$this->_addRedirectForOldToNewExam($examFormData['examPageId'],$examFormData['beforeEditExamName'],$examFormData['examName']);
	 	}
	 	$this->addMetaDetails($examFormData,$examFormData['examPageId']);

		$this->dbHandle->trans_complete();
		
		if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
	  	}
	  	return $examPageId;
    }
    function saveExamContent($formData)
    {
    	$status = $formData['status'];
    	if(empty($formData) && count($formData) == 0)
    		return;
    	$this->initiateModel("write");
		
		$this->dbHandle->trans_start();

		if($formData['action'] == 'add')
		{
			$formData['examPageId']   = $this->_getNewAutogeneratedId('exampage');
			$examPageId  = $formData['examPageId'];
			if($status == 'live'){
				$this->updateExamGuide($formData['examId'],'exam');
			}
			
		}
		elseif($formData['action'] == 'edit')
		{
			$examPageId = $formData['examPageId'];
			if(empty($examPageId))
				return;


    		if($status == 'draft')
    			$fromStatus = array('draft');
    		else if($status == 'live')
    			$fromStatus = array('live','draft');
    		$this->updateExamContentData($examPageId,$fromStatus, 'history');
    		$this->updateExamGuide($formData['groupId'],'group');
    	
		}


		$examPageMasterData = array(
			'exam_id'           => $formData['examId'],
			'groupId'           => $formData['groupId'],
			'status'            => $formData["status"],
			'created'           => $formData["created"],
			'updated'           => $formData["updated"],
			'created_by'        => $formData["createdBy"],
			'updated_by'        => $formData["updatedBy"],
			'user_comment'      => $formData["userComments"],
			'exampage_id'       => $formData['examPageId'],
			'is_featured'		=> $formData['isFeatured'],
			'exam_order'		=> $formData['examOrder'],
			'view_count'		=> $formData['view_count'],
			'no_Of_Past_Views'		=> $formData['no_Of_Past_Views']


		);
		//insert row in "exampage_master"
		$query = $this->dbHandle->insert('exampage_master', $examPageMasterData);

		//insert wiki type of data into examspage_content_table
		foreach ($formData['wiki'] as $sectionName => $sectionValue) {
    		foreach ($sectionValue as $wikiKey => $wikiValue) {
    			$wikiData = array(
					'page_id'           => $formData['examPageId'],
					'section_name'         => $sectionName,
					'entity_type' => $wikiKey,
					'entity_value' => $wikiValue['wikiData'],
					'toc_text' => $wikiValue['tocContent'],
					'status'            => $formData["status"],
					'creationTime'      => date('Y-m-d h:i:s'),
					'updatedOn'      => $wikiValue['updatedOn'],
                    'updated_by'    =>  $formData['updatedBy']
				);
				//insert row in "exampage_master"
				$query = $this->dbHandle->insert('exampage_content_table', $wikiData);
    		}
    	}

		//insert all types of dates data into exampage_content_dates

		foreach ($formData['dates'] as $dateKey => $dateValue) {
    		
    		$datesData = array(
    				'page_id' => $formData['examPageId'],
    				'start_date' => $dateValue['startDate'],
    				'end_date' => $dateValue['endDate'],
    				'event_name' => $dateValue['eventName'],
    				'article_id' => $dateValue['articleId'],
    				'section_name' => $dateValue['sectionName'],
    				'status' => $formData['status'],
    				'date_order' => $dateValue['order'],
    				'creationTime' => date('Y-m-d h:i:s'),
    				'eventCategory' =>$dateValue['eventCategory'],
    				'updatedOn'      => $dateValue['updatedOn']
    			);
    		$this->dbHandle->insert('exampage_content_dates',$datesData);
    	}

	    //insert sample papers, prep guide and application form files into exampage_content_files	
	    foreach ($formData['files'] as $fileKey => $fileValue) {
	    	$filesData = array(
	    			'page_id' => $formData['examPageId'],
	    			'file_url' => $fileValue['file_url'],
	    			'thumbnail_url' => $fileValue['thumbnail_url'],
	    			'file_order' => $fileValue['order'],
	    			'file_type' => $fileValue['section_name'],
	    			'file_name' => $fileValue['file_name'],
	    			'status' => $formData['status'],
	    			'creationTime' => date('Y-m-d h:i:s'),
	    			'updatedOn'      => $fileValue['updatedOn']
	    		);
	    	$this->dbHandle->insert('exampage_content_files',$filesData);
	    }


	    //insert section order data into exampage_section_order

	    foreach ($formData['sectionOrder'] as $orderKey => $orderValue) {
	    	$orderData = array(
	    			'page_id' => $formData['examPageId'],
	    			'section_name' => $orderKey,
	    			'section_order' => $orderValue,
	    			'status' => $formData['status'],
	    			'creationTime' => date('Y-m-d h:i:s')
	    		);
	    	$this->dbHandle->insert('exampage_section_order',$orderData);
	    }

	    if(!empty($formData['saveToMultiple']) && count($formData['saveToMultiple']) > 0 && $formData['status'] == 'live')
	    {
	    	$this->updateOnMulitpleGroups($formData);	
	    }

	    $this->dbHandle->trans_complete();

	    if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
	  	}
	  	return $examPageId;

    }

    public function updateWikiContentData($formData) {

        if(empty($formData) && count($formData) == 0) {
            return;
        }
        $this->initiateModel("write");

        $this->dbHandle->trans_start();

        $updateSql = "UPDATE exampage_content_table SET status = ? where page_id = ? AND section_name = ? AND entity_type = ? AND status = ?";

        //insert wiki type of data into examspage_content_table
        foreach ($formData['wiki'] as $sectionName => $sectionValue) {
            foreach ($sectionValue as $wikiKey => $wikiValue) {
                $wikiData = array(
                    'page_id'           => $formData['examPageId'],
                    'section_name'         => $sectionName,
                    'entity_type' => $wikiKey,
                    'entity_value' => $wikiValue['wikiData'],
                    'toc_text' => $wikiValue['tocContent'],
                    'status'            => $formData["status"],
                    'creationTime'      => date('Y-m-d h:i:s'),
                    'updatedOn'      => $wikiValue['updatedOn'],
                    'updated_by'    =>  $formData['updatedBy']
                );
                //update existing row to history
                $this->dbHandle->query($updateSql,array('history',$formData['examPageId'], $sectionName, $wikiKey, 'live'));
                //insert row in "exampage_master"
                $query = $this->dbHandle->insert('exampage_content_table', $wikiData);
            }
        }

        $this->dbHandle->trans_complete();

        if ($this->dbHandle->trans_status() === FALSE) {
            return 0;
        }else{
            return 1;
        }
    }

    function updateOnMulitpleGroups($formData)
    {
    	$this->initiateModel('write');

    	$this->load->config("examPages/examPageConfig");

    	$pageSectionMapping = $this->config->item('sectionToPageMapping');

    	foreach ($formData['saveToMultiple'] as $secKey => $groupValue) {
    		foreach ($groupValue as $gkey => $groupId) {
    			
    			$sql = "SELECT exampage_id FROM exampage_master WHERE groupId = ? AND status = 'live'";
    			$rs = $this->dbHandle->query($sql,array($groupId))->result_array();

    			if(empty($rs[0]['exampage_id']))
    				continue;
    			else
    			{
    				$examPageId = $rs[0]['exampage_id'];
    				$toBeUpdatedFields = $pageSectionMapping[$secKey];
    				error_log('toBeUpdatedFields'.print_r($toBeUpdatedFields,true));
    				foreach ($toBeUpdatedFields as $subkey => $subvalue) {
    					if($subvalue['type'] == 'wiki')
    					{
    						$tableName = 'exampage_content_table';
    					}
    					elseif($subvalue['type'] == 'dates')
    					{
    						$tableName = 'exampage_content_dates';
    					}
    					elseif($subvalue['type'] == 'files')
    					{
    						$tableName = 'exampage_content_files';
    					}
    					$this->updateExamContentDataBySection($examPageId,$tableName,$subvalue['section_name'],$subvalue['entity_type'],array('live'),'history');
    					$this->updateExamGuide($groupId);
    					if($tableName == 'exampage_content_table')
    					{
    						$this->updateAmpExamContentData($examPageId,array('live'),'history');
    					}
    					$this->insertIntoExamContentTablesBySection($examPageId,$tableName,$subvalue['section_name'],$subvalue['entity_type'],$formData,$subvalue['type']);
    				}
    			}

    		}
    	}
    }
    function insertIntoExamContentTablesBySection($examPageId,$tableName,$sectionName,$entityType,$formData,$type)
    {
    	if(empty($examPageId) || empty($tableName) || empty($formData) || empty($type))
    		return;
    	$this->initiateModel('write');
    	if($tableName == 'exampage_content_table')
    	{	
    		$wikiData = array(
					'page_id'           => $examPageId,
					'section_name'         => $sectionName,
					'entity_type' => $entityType,
					'entity_value' => $formData[$type][$sectionName][$entityType]['wikiData'],
					'toc_text' => $formData[$type][$sectionName][$entityType]['tocContent'],
					'status'            => $formData['status'],
					'creationTime'      => date('Y-m-d h:i:s'),
					'updatedOn'   => $formData[$type][$sectionName][$entityType]['updatedOn']
				);
				//insert row in "exampage_master"
				$query = $this->dbHandle->insert('exampage_content_table', $wikiData);
    	}
    	elseif($tableName == 'exampage_content_dates')
    	{
    		foreach ($formData[$type] as $subkey => $subvalue) {
    				if($subvalue['sectionName'] == $sectionName)
    				{
    					$datesData = array(
			    				'page_id' => $examPageId,
			    				'start_date' => $subvalue['startDate'],
			    				'end_date' => $subvalue['endDate'],
			    				'event_name' => $subvalue['eventName'],
			    				'article_id' => $subvalue['articleId'],
			    				'section_name' => $subvalue['sectionName'],
			    				'status' => $formData['status'],
			    				'date_order' => $subvalue['order'],
			    				'creationTime' => date('Y-m-d h:i:s'),
			    				'updatedOn' => $subvalue['updatedOn']

			    			);
			    		$this->dbHandle->insert('exampage_content_dates',$datesData);
    				}
    			}	
    	}
    	elseif($tableName == 'exampage_content_files')
    	{
    		foreach ($formData[$type] as $supkey => $supvalue) {
    			if($supvalue['section_name'] == $entityType)
    			{
    				$filesData = array(
			    			'page_id' => $examPageId,
			    			'file_url' => $supvalue['file_url'],
			    			'thumbnail_url' => $supvalue['thumbnail_url'],
			    			'file_order' => $supvalue['order'],
			    			'file_type' => $supvalue['section_name'],
			    			'file_name' => $supvalue['file_name'],
			    			'status' => $formData['status'],
			    			'creationTime' => date('Y-m-d h:i:s'),
			    			'updatedOn' => $supvalue['updatedOn']
			    		);
			    	$this->dbHandle->insert('exampage_content_files',$filesData);
    			}
    		}
    	}

    }
    function updateExamContentDataBySection($examPageId,$tableName = '',$sectionName='',$entityType='',$fromStatus = array('live'),$toStatus = 'history')
    {
    	if(empty($examPageId) || empty($tableName))
    		return;

    	$this->initiateModel('write');
    	$extraCond = "";
    	if($tableName == 'exampage_content_table' || $tableName == 'exampage_amp_content_table')
    	{
    		$extraCond = " AND entity_type = ?";
    	}
    	if($tableName == 'exampage_content_table' || $tableName == 'exampage_content_dates' || $tableName == 'exampage_amp_content_table')
    	{
    		$sql = "UPDATE $tableName SET status = ? WHERE status IN ('".implode("','", $fromStatus)."') AND page_id = ? AND section_name = ?".$extraCond;	
    		$this->dbHandle->query($sql,array($toStatus,$examPageId,$sectionName,$entityType));
    	}
    	elseif($tableName == 'exampage_content_files')
    	{
    		$sql = "UPDATE $tableName SET status = ? WHERE status IN ('".implode("','", $fromStatus)."') AND page_id = ? AND file_type = ?".$extraCond;	
    		$this->dbHandle->query($sql,array($toStatus,$examPageId,$entityType));	
    	}
    }
    function updateAmpExamContentData($examPageId,$fromStatus = array('draft'),$toStatus = 'history')
    {
    	if(empty($examPageId))
    		return;
    	$this->initiateModel('write');	
    	$tables = array('exampage_amp_content_table');
    	foreach ($tables as $tkey => $tname) {
    		$sql = "UPDATE $tname SET status = ? WHERE status IN ('".implode("','", $fromStatus)."') AND page_id = ?";
    		$this->dbHandle->query($sql,array($toStatus,$examPageId));
    	}
    }
    function updateExamContentData($examPageId,$fromStatus = array('draft'),$toStatus = 'history')
    {
    	if(empty($examPageId))
    		return;

    	$this->initiateModel('write');

    	$sql = "UPDATE exampage_master SET status = ? WHERE exampage_id = ? AND status in ('".implode("','", $fromStatus)."')";

    	$this->dbHandle->query($sql,array($toStatus,$examPageId));

    	$tables = array('exampage_content_table','exampage_content_dates','exampage_section_order','exampage_content_files','exampage_amp_content_table');
    	foreach ($tables as $tkey => $tname) {
    		$sql = "UPDATE $tname SET status = ? WHERE status IN ('".implode("','", $fromStatus)."') AND page_id = ?";
    		$this->dbHandle->query($sql,array($toStatus,$examPageId));
    	}
    }

    function addMetaDetails($data,$examPageId){
    	if(empty($data)){
    		return 0;
    	}
    	$this->initiateModel("write");
    	$handle = $this->dbHandle;
    	$count = 0;
        foreach ($data['metaDetails'] as $key => $value) {
            if($count != 0){
                $metaData .= ",";
            }
            if(empty($value['metaTitle']) || empty($value['metaDescription'])){
                continue;
            }
            $metaData .= "('".$examPageId."','".$key."',".$handle->escape($value['metaTitle']).",".$handle->escape($value['metaDescription']).",now())";
            $count++;
        }
        if(empty($metaData)){
        	return 0;
        }
    	$sql = "INSERT INTO exampage_metatags (exampage_id,section_name,title,description,last_modified_date) VALUES $metaData ON DUPLICATE KEY UPDATE title = VALUES(title), description = VALUES(description), last_modified_date = VALUES(last_modified_date)";
    	$handle->query($sql);
    	return $handle->insert_id();
    }

    function _addRedirectForOldToNewExam($examPageId,$oldName,$newName){
    	$oldNames = array();

    	$this->dbHandle->select('oldName');
    	$this->dbHandle->where(array('examPageId'=>$examPageId,'status'=>'live'));
    	$query = $this->dbHandle->get('exampage_redirects');
    	if($query->num_rows() > 0){
    		$oldNames = $this->getColumnArray($query->result_array(),'oldName');
    	}

    	// mark all previous entries as history
    	$this->dbHandle->where(array('examPageId'=>$examPageId));
    	$this->dbHandle->update('exampage_redirects',array('status'=>'history'));

    	$oldNames = array_unique($oldNames);
    	foreach($oldNames as $name){
    		if($name != strtolower($newName)){
    			$data[] = array('examPageId' => $examPageId,'oldName' => $name, 'newName' => strtolower($newName), 'status' => 'live');
    		}
    	}
    	if(!in_array($oldName, $oldNames)){
    		$data[] = array('examPageId' => $examPageId,'oldName' => strtolower($oldName), 'newName' => strtolower($newName), 'status' => 'live');
    	}
    	$this->dbHandle->insert_batch('exampage_redirects',$data);
    }

    public function getExamNameById($id,$status){
    	$this->dbHandle->select('exam_name');
    	$this->dbHandle->where(array('exampage_id'=>$id,'status'=>'live'));
    	$query = $this->dbHandle->get('exampage_master');

    	$name = $this->getColumnArray($query->result_array(),'exam_name');
    	return $name[0];
    }

    public function getExamNameAndFullFormById($id,$status){
    	$this->dbHandle->select('exam_name,exam_full_form');
    	$this->dbHandle->where(array('exampage_id'=>$id,'status'=>'live'));
    	$details = $this->dbHandle->get('exampage_master')->result_array();
    	return $details;
    }

    public function getRedirectExams(){
    	$this->initiateModel('read');
    	$this->dbHandle->select('oldName,newName');
    	$this->dbHandle->where('status','live');
    	$query = $this->dbHandle->get('exampage_redirects');

    	$redirectExams = array();
    	if($query->num_rows() > 0){
    		foreach($query->result_array() as $row){
    			$redirectExams[$row['oldName']] = $row['newName'];
    		}
    	}
    	return $redirectExams;
    }

    function updateExamPageTableStatus($newStatus,$examPageId,$oldStatus){

	//make history :) 
	$tablesToUpdate = array('exampage_master','exampage_home','exampage_syllabus','exampage_dates','exampage_result','exampage_interview','exampage_discussion','exampage_section_description','exampage_college');
     
    foreach ($tablesToUpdate as $key => $tableName) {
    	$this->dbHandle->where("status in (".$oldStatus." )");
    	$this->dbHandle->where('exampage_id',$examPageId);
    	$this->dbHandle->update($tableName,array('status' =>$newStatus));
    }
    
    /*
	$this->dbHandle->query("UPDATE exampage_master SET status = '".$newStatus."' WHERE exampage_id = '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_home SET status = '".$newStatus."' WHERE exampage_id =  '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_syllabus SET status = '".$newStatus."' WHERE exampage_id = '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_dates SET status = '".$newStatus."' WHERE exampage_id =  '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_result SET status = '".$newStatus."' WHERE exampage_id =  '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_interview SET status = '".$newStatus."' WHERE exampage_id =  '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_discussion SET status = '".$newStatus."' WHERE exampage_id = '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_section_description SET status = '".$newStatus."' WHERE exampage_id = '".$examPageId."' AND status in (".$oldStatus." )");
	$this->dbHandle->query("UPDATE exampage_college SET status = '".$newStatus."' WHERE exampage_id = '".$examPageId."' AND status in (".$oldStatus." )");
     */
    
    }

    function _updateExampageMain($examId, $exampageId){
    	if(!empty($examId)){
	    	$this->dbHandle->where('id', $examId);
	    	$this->dbHandle->where('status', 'live');
	    	$query = $this->dbHandle->update('exampage_main', array('exampageId'=>$exampageId));
	    }
    }

	function insertExampageMaster($examFormData){
		
	}

 	function _insertExampageHome($examFormData){
 		
 		/************ insertion in "exampage_home" ***************/
 		foreach($examFormData['homePageData'] as $homeData){
 			if(!empty($homeData['wikiData']) || !empty($homeData['label'])){
			$examPageHomeData = array(
			'exampage_id'       => $examFormData["examPageId"],
			'label'             => $homeData["label"],
			'description'       => $homeData["wikiData"],
     		'order'             => $homeData["order"],
			'type'              => $homeData["type"],
   		    'show_expanded'     => ($homeData["collapse"] == 'checked')?'true':'false',
			'status'            => $examFormData["status"]
			);
			// insert  data in "exampage_home"
			$this->dbHandle->insert('exampage_home', $examPageHomeData);
		    }
		}
	}
	
	function _insertExampageSyllabus($examFormData){
		
		$syllabusData = $examFormData['syllabusData'];
		if(!empty($syllabusData['wikiData'])){
			/************** insertion in "exampage_syllabus" ****************/
			$examPageSyllabusData = array(
			'exampage_id'      => $examFormData["examPageId"],
			'syllabus_content' => $syllabusData["wikiData"],
			'show_expanded'    => ($syllabusData["collapse"] == 'checked')?'true':'false',
			'status'           => $examFormData["status"]
			);
			// insert  data in "exampage_syllabus"
			$this->dbHandle->insert('exampage_syllabus', $examPageSyllabusData);
		}
	}
	


	function _insertExampageDates($examFormData){

	 	/************** insertion in "exampage_dates" *******************/
		foreach($examFormData['importantDateData'] as $datesData){		

			$startDate = $datesData['startDate'];
	        $endDate   = $datesData['endDate'];

	        // check if start date is empty and end date is not empty then set start date equal to  end date and viceversa
			if(empty($startDate) && empty($endDate)){
				$exam_from_date = null;
				$exam_to_date   = null;
			}else{
				$exam_from_date = (empty($startDate))?$endDate:$startDate;
			 	$exam_to_date   = (empty($endDate))?$startDate:$endDate;	
			}
			
			if(!empty($datesData["startDate"]) || !empty($datesData["endDate"]) || !empty($datesData["eventName"]) || !empty($datesData["articleID"])){
				$examPageDatesData = array(
					'exampage_id'    => $examFormData["examPageId"],
					'exam_from_date' => $exam_from_date,
					'exam_to_date'   => $exam_to_date,
					'event_name'     => $datesData["eventName"],
					'article_id'     => $datesData["articleID"],
					'status'         => $examFormData["status"]

				);
				// insert  data in "exampage_dates"
				$this->dbHandle->insert('exampage_dates', $examPageDatesData);
			}
		}
	}
 	
 	function _insertExampageResult($examFormData){

 		$resultData = $examFormData['resultData']['resultDecSec'];
 		/********* insertion in "exampage_result" ******************/


 		$startDateResult = $resultData["startDate"];
        $endDateResult   = $resultData["endDate"];

        // check if result start date is empty and result end date is not empty then set result start date equal to result end date and viceversa
		if(empty($startDateResult) && empty($endDateResult)){
			$exam_from_result_date = null;
			$exam_to_result_date   = null;
		}else{
			$exam_from_result_date = (empty($startDateResult))?$endDateResult:$startDateResult;
		 	$exam_to_result_date   = (empty($endDateResult))?$startDateResult:$endDateResult;	
		}


 		if(!empty($resultData["startDate"]) || !empty($resultData["endDate"]) || !empty($resultData["eventName"]) || !empty($resultData["articleId"]) || !empty($examFormData["resultData"]["examAnalysis"]) || !empty($examFormData["resultData"]["studentReaction"])){

			$examPageResultData = array(
			'exampage_id'                 => $examFormData["examPageId"],
			'exam_from_result_date' 	  => $exam_from_result_date,
			'exam_to_result_date'         => $exam_to_result_date,
			'event_name'                  => $resultData["eventName"],
			'article_id'                  => $resultData["articleId"],
			'exam_analysis'               => $examFormData['resultData']["examAnalysis"],
			'exam_analysis_show_expanded' => ($resultData["examAnalysisCollapsibleState"] == 'checked')?'true':'false',
			'exam_reaction'               => $examFormData['resultData']["studentReaction"],
			'exam_reaction_show_expanded' => ($resultData["stuReactionCollapsibleState"] == 'checked')?'true':'false',
			'status'                      => $examFormData["status"]
			);
			// insert  data in "exampage_result"
			$this->dbHandle->insert('exampage_result', $examPageResultData);
		}
		
		foreach($examFormData['resultData']['interviewData'] as $interviewData){
			if(!empty($interviewData["info"])){ 
				$examPageInterviewData = array(
				'exampage_id'                 => $examFormData["examPageId"],
				'interview'                   => $interviewData["info"],
				'order'                       => $interviewData["pos"],
				'show_expanded' => ($interviewData['collapse'] == 'checked')?'true':'false',
				'status'                      => $examFormData["status"]
				);
				// insert  data in "exampage_interview"
				$this->dbHandle->insert('exampage_interview', $examPageInterviewData);
			}
		}
		
 	}


 	function _insertExampageDiscussion($examFormData){

 		$discussionData = $examFormData['discussionData'];
 		
	 	/*********** insertion in "exampage_discussion" *************/
		if(!empty($discussionData["discussionIds"])){ 	
			$examPageDiscussionData = array(
			'exampage_id'    => $examFormData["examPageId"],
			'discussion_ids' => $discussionData["discussionIds"],
			'status'         => $examFormData["status"]
			);
			// insert  data in "exampage_discussion"
			$this->dbHandle->insert('exampage_discussion', $examPageDiscussionData);
		}	
 	}

 	function _insertExampageTileDescription($examFormData){

		$tileDescription = $examFormData['tileDescription'];
		$sectionOrder    = $examFormData['sectionOrder'];
		$showLinkInMenu  = $examFormData['showLinkInMenu'];
		
 		
	 	/*********** insertion in "exampage_section_description" *************/
	 	foreach($tileDescription as $key=>$val){
			$examPageTileDescriptionData = array(
			'exampage_id'                => $examFormData["examPageId"],
			'section_name'               => $key,
			'section_description'        => $val,
			'section_priority'           => $sectionOrder[$key],
			'show_link_in_menu'          => $showLinkInMenu[$key],
			'status'                     => $examFormData["status"]
			);
			// insert  data in "exampage_section_description"
			$this->dbHandle->insert('exampage_section_description', $examPageTileDescriptionData);
	 	}
		
 	}

 	function _insertExampageCollege($examFormData){

 		$collegeData = $examFormData['colleges'];
	
	 		/*********** insertion in "exampage_college" *************/
		if(!empty($collegeData["tile_link"])){ 	
			$examPageCollegeData = array(
			'exampage_id'    => $examFormData["examPageId"],
			'tile_link' => $collegeData["tile_link"],
			'status'         => $examFormData["status"]
			);
			// insert  data in "exampage_college"
			$this->dbHandle->insert('exampage_college', $examPageCollegeData);
		}
		
 	}
        
        function getLiveCategories() {
            $this->initiateModel('read');
            $examListQuery = "SELECT category_name FROM exampage_master WHERE STATUS = 'live' GROUP BY category_name;";
            return $this->dbHandle->query($examListQuery)->result_array();
            
        }

        function getExamIdsByHierarchy($hierarchyIds,$entityType = ''){
        	if(!(is_array($hierarchyIds) && count($hierarchyIds) > 0)){
        		return array();
        	}
        	$this->initiateModel();
        	$this->dbHandle->select('distinct(examId) as examId');
        	$this->dbHandle->from('examAttributeMapping');
        	$this->dbHandle->where('status','live');        	
        	$this->dbHandle->where_in('entityId',$hierarchyIds);
        	if($entityType == 'course'){
        		$this->dbHandle->where('entityType','course');
        	}else{
        		$this->dbHandle->where_in('entityType',array('primaryHierarchy','hierarchy'));
        	}
        	$result = $this->dbHandle->get()->result_array();
        	//echo $this->dbHandle->last_query();die;
        	return $result;
        }

        function getExamNameByExamId($examIds){
        	if(!(is_array($examIds) && count($examIds)>0)){
        		return array();
        	}
        	$this->initiateModel();
        	$this->dbHandle->select('epm.id id, epm.name name, epma.url');
        	$this->dbHandle->from('exampage_main epm');
        	$this->dbHandle->join('exampage_master epma','epm.exampageId = epma.exampage_id','inner');
        	$this->dbHandle->where_in('epm.id',$examIds);
        	$this->dbHandle->where('epm.status','live');
			$this->dbHandle->where('epma.status','live');
        	$this->dbHandle->where('epm.exampageId >',0);
        	$result = $this->dbHandle->get()->result_array();
        	//echo $this->dbHandle->last_query();die;
        	return $result;
        }

        function getExamOrderForInputHierarchy($examIds,$courseId,$streamId,$subStreamId){
        	if(!(is_array($examIds) && count($examIds) > 0)){
        		return array();
        	}
        	$this->initiateModel();
        	$this->dbHandle->select('examId,exam_order,is_featured');
        	$this->dbHandle->from('exampage_order');
        	$this->dbHandle->where('status','live');
        	$this->dbHandle->where_in('examId',$examIds);
        	$this->dbHandle->where('courseId',$courseId);
        	$this->dbHandle->where('streamId',$streamId);
        	$this->dbHandle->where('subStreamId',$subStreamId);
        	$result = $this->dbHandle->get()->result_array();
        	//echo $this->dbHandle->last_query();die;
        	return $result;
        }
        
        function getExamsByCategoryName($categoryName = '') {
            if(empty($categoryName)) {
                return false;
            }
            $this->initiateModel('read');

            $examListQuery = "SELECT exam_name, is_featured ".
                                              "FROM 	 exampage_master ".
                                              "WHERE  status IN ('live') ".
                                              "AND category_name = ? ".
                                              "GROUP BY exam_name ".
                                              "ORDER BY CASE WHEN exam_order = -1 THEN TRUE ELSE FALSE END , ".
                                              "exam_order asc";
            return $this->dbHandle->query($examListQuery,$categoryName)->result_array();
        }
        
        function updateExamSortOrder($examData) {
            $order = 0;
            $data = array();
            if(!empty($examData['examId'])) {
                $this->initiateModel('write');
                foreach($examData['examId'] as $exam) {
                    $order++;
                    $featured = ($examData['featured'][$exam] == 'on') ? 1 : 0;
                    $values = '?,?,?,?,'.$order.','.$featured.',"live"';

		    $streamId = $examData['streamId']?$examData['streamId']:0;
		    $subStreamId = $examData['subStreamId']?$examData['subStreamId']:0;
		    $courseId = $examData['courseId']?$examData['courseId']:0;
		    $paramArray = array($exam, $streamId, $subStreamId, $courseId);

                    $sql = "Insert into exampage_order (examId,streamId,subStreamId,courseId,exam_order,is_featured,status) values(".$values.")";

                    $sql .= " ON DUPLICATE KEY UPDATE exam_order = ".$order.' , is_featured = '.$featured.' , status = "live"';
                    $this->dbHandle->query($sql, $paramArray);
                }
                return true;
            }
            else {
                return false;
            }
        }

        function getOldExamUrl($examId){
        	$this->initiateModel('read');
            $sql = "SELECT url FROM exampage_master where exam_id = ? and status = 'live' order by id desc limit 1";
            $res = $this->dbHandle->query($sql,array($examId))->result_array();
            return $res[0]['url'];
        }

    function deleteExamListingMapping($listingIds){    	
    	if(empty($listingIds) || (!is_array($listingIds))|| (!(count($listingIds) > 0))){
   			return false;
   		}

   		$fieldsTobeUpdated = array('status' => 'deleted');
   		$listingType = array('university','group','college');
   		$this->initiateModel('write');
   		$this->dbHandle->where('status','live');
   		$this->dbHandle->where_in('entityId',$listingIds);
   		$this->dbHandle->where_in('entityType',$listingType);
   		
   		$response = $this->dbHandle->update('examAttributeMapping',$fieldsTobeUpdated);
   		return $response;
    }

    function checkIfExamMappingExist($listingIds){
    	if(empty($listingIds) || (!is_array($listingIds))|| (!(count($listingIds) > 0))){
   			return false;
   		}
   		$listingType = array('university','group','college');
   		$this->initiateModel('read');
   		$this->dbHandle->select('id');
   		$this->dbHandle->from('examAttributeMapping');
   		$this->dbHandle->where('status','live');
   		$this->dbHandle->where_in('entityId',$listingIds);
   		$this->dbHandle->where_in('entityType',$listingType);
   		$result = $this->dbHandle->get()->result_array();
   		if(count($result) > 0){
   			return true;
   		}else{
   			return false;
   		}
    }

    function migrateExamListingMapping($listingIds,$newListingId){
    	if(empty($listingIds) || (!is_array($listingIds))|| (!(count($listingIds) > 0))){
   			return false;
   		}

   		if(empty($newListingId) || !($newListingId > 0)){
   			return false;
   		}

   		$response = true;
   		// mark previous entry as deleted and insert new entry
   		$listingType = array('university','group','college');
   		// 1. select all row
   		$dbHandle = $this->getWriteHandle();
   		$dbHandle->select('*');
   		$dbHandle->from('examAttributeMapping');
   		$dbHandle->where('status','live');
   		$dbHandle->where_in('entityId',$listingIds);
   		$dbHandle->where_in('entityType',$listingType);
   		$result = $dbHandle->get()->result_array();
   		if($result){
   			// mark status as deleted for these mapping
	   		$fieldsTobeUpdated = array('status' => 'deleted');
	   		$dbHandle->where('status','live');
	   		$dbHandle->where_in('entityId',$listingIds);
	   		$dbHandle->where_in('entityType',$listingType);
	   		$response = $dbHandle->update('examAttributeMapping',$fieldsTobeUpdated);
	   		if($response){
	   			// insert new rows
		   		foreach ($result as $key => $examAttributeMapping) {
		   			$result[$key]['entityId'] = $newListingId;
		   			$result[$key]['modificationDate'] = date('Y-m-d h:i:s');
		   			unset($result[$key]['id']);
		   		}
		   		$response = $dbHandle->insert_batch('examAttributeMapping', $result);
	   		}
   		}
   		return $response;
    }

    public function addExamToIndexLog($data){
        if(empty($data)){
            return;
        }
        $this->initiateModel('write');
        $this->dbHandle->insert_batch('indexlog',$data);
    }
    function getPageIdBasedOnExamGroupId($groupId)
    {
    	if(empty($groupId))
    		return;
    	$this->initiateModel('read');
    	$sql = "SELECT exampage_id FROM exampage_master where groupId = ? AND status in ('live')";
    	$result = $this->dbHandle->query($sql,array($groupId))->result_array();

    	return !empty($result[0]['exampage_id']) ? $result[0]['exampage_id'] : '';
    }
    function getExamContentDataBasedOnPageId($examId,$groupId)
    {
    	$this->initiateModel('write');

    	$status = 'draft';

    	//get PageId on combination of examId, groupId 
    	$sql = "SELECT exampage_id,created,created_by,exam_order,is_featured,view_count,no_Of_Past_Views,status FROM exampage_master WHERE exam_id = ? AND groupId = ? AND status in ('live','draft')";
    	$query = $this->dbHandle->query($sql,array($examId,$groupId,$status));

    	if($query->num_rows() > 0)
    	{
				$examPageId       = $query->row_array();
				$creationDate     = $examPageId['created'];
				$created_by       = $examPageId['created_by'];
				$examOrder        = $examPageId['exam_order'];
				$isFeatured       = $examPageId['is_featured'];
				$view_count       = $examPageId['view_count'];
				$no_Of_Past_Views = $examPageId['no_Of_Past_Views'];
				$status           = $examPageId['status'];
				$examPageId       = $examPageId['exampage_id'];
    	}
    	else
    	{
    		return 0;
    	}

    	$examPageData = array();

    	//get wiki information and other information except dates and files info.

    	$sql = "SELECT section_name, entity_type, entity_value, toc_text, updatedOn FROM exampage_content_table WHERE page_id = ? AND status = ?";
    	$wikiData = $this->dbHandle->query($sql,array($examPageId,$status))->result_array();

    	$examPageData['wiki'] = $wikiData;

    	//get imporantant dates and result dates info
    	$sql = "SELECT start_date,end_date,event_name,article_id,date_order,section_name,eventCategory,updatedOn FROM exampage_content_dates WHERE page_id = ? AND status = ? order by date_order";

    	$datesData = $this->dbHandle->query($sql,array($examPageId,$status))->result_array();

    	$examPageData['dates'] = $datesData;

    	//get files information 

    	$sql = "SELECT file_name,file_url,thumbnail_url,file_order,file_type,updatedOn FROM exampage_content_files where page_id = ? AND status = ? order by file_order";
    	$filesData = $this->dbHandle->query($sql,array($examPageId,$status))->result_array();
    	$examPageData['files'] = $filesData;

    	//get section ordering(i.e pages)

    	$sql = "SELECT section_name,section_order FROM exampage_section_order WHERE page_id = ? AND status = ? order by section_order";
    	$sectionOrder = $this->dbHandle->query($sql,array($examPageId,$status))->result_array();

		$examPageData['section_order'] = $sectionOrder;
		$examPageData['examPageId']    = $examPageId;
		$examPageData['creationDate']  = $creationDate;
		$examPageData['created_by'] = $created_by;
		$examPageData['exam_order'] = $examOrder;
		$examPageData['is_featured'] = $isFeatured;
		$examPageData['view_count'] = $view_count;
		$examPageData['no_Of_Past_Views'] = $no_Of_Past_Views;
		$examPageData['status'] = $status;
    	return $examPageData;
    }
    function getGroupNameByExamGroup($examId,$groupId)
    {
    	if(empty($examId) || empty($groupId))
    		return;
    	$this->initiateModel();

    	$sql = "SELECT groupName FROM exampage_groups WHERE status = 'live' AND examId = ? AND groupId = ?";

    	$rs = $this->dbHandle->query($sql,array($examId,$groupId))->result_array();

    	return !empty($rs[0]['groupName']) ? $rs[0]['groupName'] : '';
    }
    function getGroupsUnderExam($examId)
    {
    	if(empty($examId))
    		return;

    	$this->initiateModel();

    	$sql = "SELECT g.groupId,g.groupName FROM exampage_master m JOIN exampage_groups g ON g.groupId = m.groupId WHERE m.exam_id = ? AND m.status = 'live' AND g.status = 'live'";
    	$rs = $this->dbHandle->query($sql,array($examId))->result_array();

    	$result = array();

    	foreach ($rs as $key => $value) {
    		$result[$value['groupId']] = $value['groupName'];
    	}
    	return $result;
    }
    function getExamWikiContentBasedOnPageId($examPageId,$status = 'live')
    {
    	if(empty($examPageId) || empty($status))
    		return;
    	$this->initiateModel('read');
    	//get wiki information and other information except dates and files info.

    	$sql = "SELECT page_id,section_name, entity_type, entity_value,creationTime,updatedOn FROM exampage_content_table WHERE page_id = ? AND status = ? order by id";
    	$wikiData = $this->dbHandle->query($sql,array($examPageId,$status))->result_array();
    	return $wikiData;
    }
    function saveAmpExamPageData($examData)
    {
    	if(empty($examData) || empty($examData['examPageId']))
    		return;

    	$this->initiateModel('write');

    	$this->dbHandle->trans_start();

		//insert wiki type of data into exampage_amp_content_table
		foreach ($examData as $sectionName => $sectionValue) {
    		foreach ($sectionValue as $wikiKey => $wikiValue) {
    			
    			$wikiData = array(
					'page_id'           => $examData['examPageId'],
					'section_name'         => $sectionName,
					'entity_type' => $wikiKey,
					'entity_value' => $wikiValue['html'],
					'external_css' => $wikiValue['css'],
					'status'            => 'live',
					'creationTime'      => date('Y-m-d h:i:s'),
				);
				//insert row in "exampage_amp_content_table"
				$query = $this->dbHandle->insert('exampage_amp_content_table', $wikiData);
    		}
    	}


	    $this->dbHandle->trans_complete();

	    if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
	  	}   	
    }
    function getExamGroupIdBasecOnPageId($pageId)
    {
    	if(empty($pageId))
    		return;
    	$this->initiateModel();
    	$this->dbHandle->select('groupId,exam_id');
    	$this->dbHandle->from('exampage_master');
    	$this->dbHandle->where('exampage_id',$pageId);
    	$this->dbHandle->where('status','live');
    	$rs = $this->dbHandle->get()->result_array();
    	return $rs[0];
    }
    public function getAllGroupDetails($examId){ 
	 	$this->initiateModel('read'); 
	 	$sql = "SELECT groupName,groupId,examId FROM exampage_groups WHERE examId = ? AND status='live'"; 

	    $result = $this->dbHandle->query($sql,array($examId))->result_array(); 

	    return $result; 
	} 
	function updateExamGuide($entityId,$entityType='group'){
        if(empty($entityId)){return;}
        $this->initiateModel('write');
        $columnName = ($entityType == 'group')?'group_id':'exam_id';
       
        $this->dbHandle->where(array($columnName=>$entityId,'status'=>'live'));
        $this->dbHandle->update('exampage_guide', array('status'=>'history'));
        return $this->dbHandle->affected_rows();
    }
    /**
    * below function is used for getting exam page ids those are in live state (note: exampage id and exam ids are different )
    */
    function getExamPageIds($days = -1){
    	$this->initiateModel('read');
    	$sql = "SELECT exampage_id FROM exampage_master where status = 'live'";
    	if($days > 0 ){
    		$date = date('Y-m-d H:i:s',strtotime("-".$days." Days"));
//    		_p($date);
    		$sql .= " AND updated >= ?";
    		$result = $this->dbHandle->query($sql,array($date))->result_array();
    	}
    	else{
	    	$result = $this->dbHandle->query($sql)->result_array();
	    }
    	$rs = array();

    	foreach ($result as $key => $value) {
    		if(!in_array($value['exampage_id'], $rs)){
    			$rs[] = $value['exampage_id'];	
    		}
    	}
    	return $rs;
    }

    function getExamGroupIds($days = -1){
    	$this->initiateModel('read');
    	$sql = "SELECT exampage_id,groupId FROM exampage_master where status = 'live'";
    	if($days > 0 ){
    		$date = date('Y-m-d H:i:s',strtotime("-".$days." Days"));
//    		_p($date);
    		$sql .= " AND updated >= ?";
    		$result = $this->dbHandle->query($sql,array($date))->result_array();
    	}
    	else{
	    	$result = $this->dbHandle->query($sql)->result_array();
	    }
    	$rs = array();
    	foreach ($result as $key => $value) {
    		$rs[$value['groupId']] = $value['exampage_id'];	
    	}
    	return $rs;
    }


    function updateAndInsertExamWikiData($examPageId,$wikiData,$exceptSections)
    {

    	if(empty($examPageId) || empty($wikiData))
    		return;
 

    	$this->initiateModel('write');
    	$this->dbHandle->trans_start();

    	if(!empty($exceptSections) && is_array($exceptSections)){
    		$whereCondition = " AND entity_type not in (?)";
    	}else{
    		$exceptSections = array();
    	}

		$sql = "UPDATE exampage_content_table SET status = 'history' WHERE status = 'live' AND page_id = ? ".$whereCondition;
		$this->dbHandle->query($sql,array($examPageId,$exceptSections));


		$this->dbHandle->insert_batch('exampage_content_table',$wikiData);

		$this->dbHandle->trans_complete();
		if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
		}
    }

}
