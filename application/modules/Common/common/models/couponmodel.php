<?php
class CouponModel extends MY_Model
{
    private $dbHandle = null;
    
    function __construct(){
	parent::__construct('Listing');
    }
    
    private function initiateModel($mode = "write"){
	if($this->dbHandle && $this->dbHandleMode == 'write')
	    return;

	$this->dbHandleMode = $mode;
	$this->dbHandle = NULL;
	if($mode == 'read') {
		$this->dbHandle = $this->getReadHandle();
	} else {
		$this->dbHandle = $this->getWriteHandle();
	}
    }
    
    private function _getNewAutogeneratedId($type = 'coupons') {
    	return Modules::run('common/IDGenerator/generateId',$type);
    }
    
    /**
    * Purpose : Method to create a new coupon code for the given user
    * Params  :	1. User-id - Integer
    * Author  : Romil
    */
    private function _getNewCoupon($userId){
	
	// get new coupon code
	$newCoupon = $this->_getNewAutogeneratedId("coupons");
	$newCoupon = COUPON_CODE_PREFIX.$newCoupon;
	
	return $newCoupon;
    }
    
    /**
    * Purpose : Method to create a new coupon code for the given user
    * Params  :	1. User-id - Integer
    * Author  : Romil
    */
    function createUsersCoupon($userId)
    {
	// get the write DB handle
	$this->initiateModel("write");
	
	$this->dbHandle->trans_start();
	
	$newCoupon = $this->_getNewCoupon($userId);
	
	$data = array(
		'user_id' => $userId,
		'coupon_code' => $newCoupon,
		'status' => 'live'
	);
	
	// insert row
	$this->dbHandle->insert('coupon_table', $data);
	
	// get the primary key of the inserted row
	$cityId = $this->dbHandle->insert_id();
	
	$this->dbHandle->trans_complete();
		
	if ($this->dbHandle->trans_status() === FALSE) {
		throw new Exception('Transaction Failed');
	}
	
	return $newCoupon;
    }
    
    /**
    * Purpose : Method to fetch coupon code details for the provided user
    * Params  :	1. User-id - Integer
    * Author  : Romil
    */
    function getUserCoupon($userId){

	// get the db handle
	$this->initiateModel("write");

	// prepare the query
	$queryCmd 	= "select coupon_code from coupon_table where status='live' and user_id = ?";

	// fetch the data
	$finalResult 	= array();
	$queryRes 	= $this->dbHandle->query($queryCmd, array($userId));
	$finalResult 	= $queryRes->result_array();
	
	return $finalResult[0]['coupon_code'];
    }
	
	function getCouponUserId($coupon) {
		// get the db handle
		$this->initiateModel("read");
		
		// prepare the query
		$queryCmd = "select user_id from coupon_table where status='live' and coupon_code = ?";
		
		// fetch the data
		$queryRes = $this->dbHandle->query($queryCmd, array($coupon))->result_array();
		if(!empty($queryRes)) {
			return $queryRes[0]['user_id'];
		} else {
			return false;
		}
	}

    function trackPaytmRequest($data){
	// get the db handle
	$this->initiateModel("write");
	
	$data = array(
		    'application_id' 		=> $data['application_id'],
		    'user_id'			=> $data['user_id'],
		    'coupon_code'		=> $data['coupon_code'],
		    'coupon_type'		=> $data['coupon_type'],
		    'merchant_order_id' 	=> $data['merchant_order_id'],
		    'applied_to_new_users' 	=> $data['applied_to_new_users'],
		    'amount' 			=> $data['amount'],
		    'user_mobile'		=> $data['user_mobile'],
		    'user_email' 		=> $data['user_email']
	);

	// insert row
	$this->dbHandle->insert('paytmResponseTrack', $data);
	
	// get the primary key of the inserted row
	$rowId = $this->dbHandle->insert_id();

	return $rowId;
    }
    
    function trackPaytmResponse($responseData){

	if(empty($responseData['rowId']))
	    return false;

	// get the db handle
	$this->initiateModel("write");

	$data['response_full_text'] 		= $responseData['response_full_text'];
	$data['response_status_code'] 		= $responseData['response_status_code'];
	$data['response_status_message'] 	= $responseData['response_status_message'];
	$data['wallet_transactionid'] 		= $responseData['wallet_transactionid'];
	$data['is_existing_user'] 		= $responseData['is_existing_user'];

	$this->dbHandle->where('id', $responseData['rowId']);

	// insert row
	$this->dbHandle->update('paytmResponseTrack', $data); 

	return $finalResult;
    }
	
	function logOnlineFormCouponSystem($data) {
		if(empty($data['formId']) || empty($data['userId'])) {
			return false;
		}
		
		// get the write DB handle
		$this->initiateModel("write");
		$this->dbHandle->trans_start();
		
		$date = new DateTime();
		$timestamp = $date->format('Y-m-d H:i:s');
		$isExternalFormFlag = $data['isExternalFormFlag'] == 1 ? 1 : 0;
		$data = array(
			'applicationFormId'		=> $data['formId'],
			'userId' 				=> $data['userId'],
			'couponCodeUsed' 		=> $data['couponCode'],
			'isValidCouponUsed' 	=> $data['isValidCode'],
			'couponType' 			=> $data['couponType'],
			'isNewCouponCreated' 	=> $data['isNewCouponCreated'],
			'couponCodeCreated'		=> $data['couponCodeCreated'],
			'referrerUserId' 		=> $data['referrerUserId'],
			'action' 				=> $data['action'],
			'status' 				=> $data['status'],
			'payTMResponseTrackId' 	=> $data['paytmTrackId'],
			'isExternalFormFlag'	=> $isExternalFormFlag,
			'timestamp'				=> $timestamp
		);
		
		// insert row
		$this->dbHandle->insert('onlineFormCouponActivityLog', $data);
		
		$this->dbHandle->trans_complete();
		if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
		}
		return true;
	}
	
	function getPaidUsersOfThisSeason() {
		//get the db handle
		$this->initiateModel("write");
		
		//prepare the query
		$queryCmd = "SELECT DISTINCT `userId` FROM `OF_Payments` WHERE YEAR(`date`) = 2015 and status = 'Success'";
		
		//fetch the data
		$queryRes = $this->dbHandle->query($queryCmd);
		$finalResult = $queryRes->result_array();
		
		$userIds = array();
		foreach($finalResult as $row) {
			$userIds[] = $row['userId'];
		}
		
		return $userIds;
	}

	function getTodaysPaytmCreditsTransferred(){
	    
	    //get the db handle
		$this->initiateModel("read");
		
		//prepare the query
		$queryCmd = "SELECT SUM(amount) as amount, count(distinct(application_id)) as application_count
			     FROM paytmResponseTrack prt
			     WHERE 
			     prt.response_status_code = 'SUCCESS'
			     AND DATE(prt.timestamp) = CURDATE()";

		//fetch the data
		$queryRes = $this->dbHandle->query($queryCmd);
		$finalResult = $queryRes->row_array();

		return $finalResult;
	}
	
	/*
	 * Make all enteries related to course and coupon for a user to history, If user is applying new coupon then add new entry.
	 *  Author : Vinay
	 *  Purpose : External Forms Paytm Integration.
	 */
	
	
	function trackUserAppliedCoupon($couponCode,$userId,$courseId){
		 
		//get the db handle
		$this->initiateModel("write");
		$this->dbHandle->trans_start();
		//prepare the query
		
		//Mark all coupon entry to history.
		$updateData = array(
		    'status'=>'history'
		);
		$whereClause = array(
			'courseId' =>$courseId,
			'userId' =>$userId,
			'paytmPaymentStatus' => 'unpaid'	
		);
		$this->db->update('userAppliedCoupon', $updateData,$whereClause);
		
		//insert coupon entry if coupon is applied.
		if($couponCode) {
		$insertData = array(
				'couponCode' =>$couponCode,
				'courseId' =>$courseId,
				'userId' =>$userId,
				'status' => 'live'
		);
		// insert row
		$this->dbHandle->insert('userAppliedCoupon', $insertData);
		}
		
		$this->dbHandle->trans_complete();
		if ($this->dbHandle->trans_status() === FALSE) {
			throw new Exception('Transaction Failed');
		}
		return true;
	
	}
	
	/*
	 * Fetch applied unpaid coupon for an course for a specific user.
	 * 
	 */
	function fetchAppliedCouponForACourse($courseId,$userId) {
		$this->initiateModel("read");
		
		$sql = " SELECT couponCode FROM userAppliedCoupon".
			   " WHERE userId = ?".
			   " AND status = 'live'".
			   " AND paytmPaymentStatus = 'unpaid'".
			   " AND courseId = ?";
		
		$query = $this->dbHandle->query($sql,array($userId,$courseId));
		$row = $query->row_array();
		return $row['couponCode'];
		
	}
	
}